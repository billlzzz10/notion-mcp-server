const express = require('express');
const path = require('path');
const { Client } = require('@notionhq/client');
const rateLimit = require('express-rate-limit');

const app = express();
const PORT = 3000;

// Initialize Notion client
const notion = process.env.NOTION_API_KEY ? new Client({
  auth: process.env.NOTION_API_KEY,
}) : null;

// Database IDs - ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 14 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á
const DATABASES = {
  // Core Ashval Databases (‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å 8 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
  CHARACTERS: process.env.NOTION_CHARACTERS_DB_ID,
  SCENES: process.env.NOTION_SCENES_DB_ID,
  LOCATIONS: process.env.NOTION_LOCATIONS_DB_ID,
  WORLDS: process.env.NOTION_WORLDS_DB_ID,
  POWER_SYSTEMS: process.env.NOTION_POWER_SYSTEMS_DB_ID,
  ARCANAS: process.env.NOTION_ARCANAS_DB_ID,
  MISSIONS: process.env.NOTION_MISSIONS_DB_ID,
  AI_PROMPTS: process.env.NOTION_AI_PROMPTS_DB_ID,
  
  // Enhanced Ashval Databases (‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° 6 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
  VERSION_HISTORY: process.env.NOTION_VERSION_HISTORY_DB_ID,
  STORY_TIMELINE: process.env.NOTION_STORY_TIMELINE_DB_ID,
  STORY_ARCS: process.env.NOTION_STORY_ARCS_DB_ID,
  WORLD_RULES: process.env.NOTION_WORLD_RULES_DB_ID,
  PROJECTS: process.env.NOTION_PROJECTS_DB_ID,
  YOUTUBE_ANALYSIS: process.env.NOTION_YOUTUBE_ANALYSIS_DB_ID
};

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// Health check
app.get('/api/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    notion_connected: !!notion,
    databases_configured: Object.values(DATABASES).filter(Boolean).length
  });
});

// Get all pages count from Notion
app.get('/api/pages', async (req, res) => {
  if (!notion) {
    return res.json({
      error: 'Notion not configured',
      pages: [],
      totalPages: 0,
      message: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ NOTION_API_KEY ‡πÉ‡∏ô .env'
    });
  }

  try {
    let allPages = [];
    let totalPages = 0;
    let databaseStats = {};
    
    // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const databaseNames = {
      [DATABASES.CHARACTERS]: 'Characters (‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£)',
      [DATABASES.SCENES]: 'Scenes (‡∏â‡∏≤‡∏Å)',
      [DATABASES.LOCATIONS]: 'Locations (‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà)',
      [DATABASES.WORLDS]: 'Worlds (‡πÇ‡∏•‡∏Å)',
      [DATABASES.POWER_SYSTEMS]: 'Power Systems (‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏•‡∏±‡∏á)',
      [DATABASES.ARCANAS]: 'Arcanas (‡∏≠‡∏≤‡∏£‡πå‡∏Ñ‡∏≤‡∏ô‡∏≤)',
      [DATABASES.MISSIONS]: 'Missions (‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à)',
      [DATABASES.AI_PROMPTS]: 'AI Prompts (‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AI)',
      [DATABASES.VERSION_HISTORY]: 'Version History (‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô)',
      [DATABASES.STORY_TIMELINE]: 'Story Timeline (‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á)',
      [DATABASES.STORY_ARCS]: 'Story Arcs (‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á)',
      [DATABASES.WORLD_RULES]: 'World Rules (‡∏Å‡∏é‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å)',
      [DATABASES.PROJECTS]: 'Projects (‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå)',
      [DATABASES.YOUTUBE_ANALYSIS]: 'YouTube Analysis (‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå YouTube)'
    };
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const databaseIds = Object.values(DATABASES).filter(Boolean);
    
    for (const databaseId of databaseIds) {
      try {
        const response = await notion.databases.query({
          database_id: databaseId,
        });
        
        const pages = response.results.map(page => ({
          id: page.id,
          title: page.properties.Name?.title?.[0]?.plain_text || 
                 page.properties.Title?.title?.[0]?.plain_text || 
                 '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠',
          database: databaseId,
          databaseName: databaseNames[databaseId] || 'Unknown Database',
          created: page.created_time,
          updated: page.last_edited_time,
          url: page.url
        }));
        
        allPages = allPages.concat(pages);
        totalPages += pages.length;
        
        // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        databaseStats[databaseId] = {
          name: databaseNames[databaseId] || 'Unknown Database',
          count: pages.length,
          lastUpdated: pages.length > 0 ? Math.max(...pages.map(p => new Date(p.updated))) : null
        };
        
      } catch (dbError) {
        console.error(`Error fetching pages from database ${databaseId}:`, dbError);
        databaseStats[databaseId] = {
          name: databaseNames[databaseId] || 'Unknown Database',
          count: 0,
          error: dbError.message,
          lastUpdated: null
        };
      }
    }
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï
    allPages.sort((a, b) => new Date(b.updated) - new Date(a.updated));
    
    res.json({
      pages: allPages,
      totalPages: totalPages,
      databases: databaseIds.length,
      databaseStats: databaseStats,
      workspaceStats: {
        totalDatabases: Object.keys(DATABASES).length,
        configuredDatabases: databaseIds.length,
        missingDatabases: Object.keys(DATABASES).length - databaseIds.length,
        totalPages: totalPages
      },
      message: `üéØ ‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${totalPages} ‡∏´‡∏ô‡πâ‡∏≤ ‡∏à‡∏≤‡∏Å ${databaseIds.length}/${Object.keys(DATABASES).length} ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`
    });
  } catch (error) {
    console.error('Error fetching pages:', error);
    res.status(500).json({
      error: 'Failed to fetch pages',
      message: error.message
    });
  }
});

// Get all projects from Notion
app.get('/api/projects', async (req, res) => {
  if (!notion || !DATABASES.PROJECTS) {
    return res.json({
      error: 'Notion not configured',
      projects: [],
      message: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ NOTION_API_KEY ‡πÅ‡∏•‡∏∞ NOTION_PROJECTS_DB_ID ‡πÉ‡∏ô .env'
    });
  }

  try {
    const response = await notion.databases.query({
      database_id: DATABASES.PROJECTS,
    });

    const projects = response.results.map(page => ({
      id: page.id,
      title: page.properties.Name?.title?.[0]?.plain_text || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠',
      status: page.properties.Status?.select?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      created: page.created_time,
      updated: page.last_edited_time
    }));

    res.json({
      projects,
      total: projects.length,
      message: `‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ ${projects.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`
    });
  } catch (error) {
    console.error('Error fetching projects:', error);
    res.status(500).json({
      error: 'Failed to fetch projects',
      message: error.message
    });
  }
});

// Get all tasks from Notion
app.get('/api/tasks', async (req, res) => {
  if (!notion || !DATABASES.TASKS) {
    return res.json({
      error: 'Notion not configured',
      tasks: [],
      message: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ NOTION_API_KEY ‡πÅ‡∏•‡∏∞ NOTION_TASKS_DB_ID ‡πÉ‡∏ô .env'
    });
  }

  try {
    const response = await notion.databases.query({
      database_id: DATABASES.TASKS,
    });

    const tasks = response.results.map(page => ({
      id: page.id,
      title: page.properties.Name?.title?.[0]?.plain_text || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠',
      status: page.properties.Status?.select?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      priority: page.properties.Priority?.select?.name || '‡∏õ‡∏Å‡∏ï‡∏¥',
      created: page.created_time,
      updated: page.last_edited_time
    }));

    res.json({
      tasks,
      total: tasks.length,
      completed: tasks.filter(t => t.status === 'Done').length,
      message: `‡∏û‡∏ö‡∏á‡∏≤‡∏ô ${tasks.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`
    });
  } catch (error) {
    console.error('Error fetching tasks:', error);
    res.status(500).json({
      error: 'Failed to fetch tasks',
      message: error.message
    });
  }
});

// Create new project
app.post('/api/projects', async (req, res) => {
  if (!notion || !DATABASES.PROJECTS) {
    return res.json({
      error: 'Notion not configured',
      message: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ NOTION_API_KEY ‡πÅ‡∏•‡∏∞ NOTION_PROJECTS_DB_ID ‡πÉ‡∏ô .env'
    });
  }

  const { name, status = 'Planning' } = req.body;
  
  if (!name) {
    return res.status(400).json({
      error: 'Project name is required',
      message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ'
    });
  }

  try {
    const response = await notion.pages.create({
      parent: {
        database_id: DATABASES.PROJECTS,
      },
      properties: {
        Name: {
          title: [
            {
              text: {
                content: name,
              },
            },
          ],
        },
        Status: {
          select: {
            name: status,
          },
        },
      },
    });

    res.json({
      success: true,
      project: {
        id: response.id,
        name: name,
        status: status,
        created: response.created_time
      },
      message: `‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ "${name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    });
  } catch (error) {
    console.error('Error creating project:', error);
    res.status(500).json({
      error: 'Failed to create project',
      message: error.message
    });
  }
});

// Create new task
app.post('/api/tasks', async (req, res) => {
  if (!notion || !DATABASES.TASKS) {
    return res.json({
      error: 'Notion not configured',
      message: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ NOTION_API_KEY ‡πÅ‡∏•‡∏∞ NOTION_TASKS_DB_ID ‡πÉ‡∏ô .env'
    });
  }

  const { name, status = 'To Do', priority = 'Medium' } = req.body;
  
  if (!name) {
    return res.status(400).json({
      error: 'Task name is required',
      message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô'
    });
  }

  try {
    const response = await notion.pages.create({
      parent: {
        database_id: DATABASES.TASKS,
      },
      properties: {
        Name: {
          title: [
            {
              text: {
                content: name,
              },
            },
          ],
        },
        Status: {
          select: {
            name: status,
          },
        },
        Priority: {
          select: {
            name: priority,
          },
        },
      },
    });

    res.json({
      success: true,
      task: {
        id: response.id,
        name: name,
        status: status,
        priority: priority,
        created: response.created_time
      },
      message: `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô "${name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    });
  } catch (error) {
    console.error('Error creating task:', error);
    res.status(500).json({
      error: 'Failed to create task',
      message: error.message
    });
  }
});

// Command processor with real actions
app.post('/api/command', async (req, res) => {
  const { command } = req.body;
  
  if (!command) {
    return res.status(400).json({
      error: 'Command is required',
      message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á'
    });
  }

  console.log(`üì® Processing command: ${command}`);
  
  try {
    let response = '';
    let data = null;
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if (command.includes('‡∏´‡∏ô‡πâ‡∏≤') || command.includes('page')) {
      if (command.includes('‡∏ô‡∏±‡∏ö') || command.includes('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô') || command.includes('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')) {
        const pagesResponse = await fetch(`http://localhost:${PORT}/api/pages`);
        const pagesData = await pagesResponse.json();
        
        if (pagesData.totalPages > 0) {
          response = `üìÑ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô Notion ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${pagesData.totalPages} ‡∏´‡∏ô‡πâ‡∏≤\n\n`;
          response += `üìä ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n`;
          
          // ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          for (const [dbId, count] of Object.entries(pagesData.byDatabase)) {
            const dbName = Object.keys(DATABASES).find(key => DATABASES[key] === dbId) || 'Unknown';
            response += `‚Ä¢ ${dbName}: ${count} ‡∏´‡∏ô‡πâ‡∏≤\n`;
          }
          
          response += `\nüóÇÔ∏è ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${pagesData.databases} ‡∏ê‡∏≤‡∏ô\n`;
          response += `üìÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${pagesData.pages.length > 0 ? new Date(pagesData.pages[0].updated).toLocaleString('th-TH') : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}`;
          
          // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 5 ‡∏´‡∏ô‡πâ‡∏≤
          if (pagesData.pages.length > 0) {
            response += `\n\nüìã ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:\n`;
            pagesData.pages.slice(0, 5).forEach((page, index) => {
              response += `${index + 1}. ${page.title}\n`;
              response += `   üìÖ ${new Date(page.updated).toLocaleString('th-TH')}\n`;
            });
          }
        } else {
          response = 'üìÑ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô Notion\n\nüí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡πÅ‡∏•‡∏∞ Database ID';
        }
      } else {
        response = 'üí° ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤:\n‚Ä¢ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤\n‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n‚Ä¢ ‡∏î‡∏π‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î';
      }
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
    if (command.includes('‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ') || command.includes('project')) {
      if (command.includes('‡πÅ‡∏™‡∏î‡∏á') || command.includes('‡∏î‡∏π') || command.includes('‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')) {
        const projectsResponse = await fetch(`http://localhost:${PORT}/api/projects`);
        const projectsData = await projectsResponse.json();
        
        if (projectsData.projects && projectsData.projects.length > 0) {
          response = `üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (${projectsData.projects.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):\n\n`;
          projectsData.projects.forEach((project, index) => {
            response += `${index + 1}. ${project.title}\n`;
            response += `   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${project.status}\n`;
            response += `   ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date(project.created).toLocaleString('th-TH')}\n\n`;
          });
        } else {
          response = 'üìã ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n\nüí° ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ [‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ]"';
        }
      } else if (command.includes('‡∏™‡∏£‡πâ‡∏≤‡∏á')) {
        const projectName = command.replace(/‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ?/gi, '').trim();
        if (projectName) {
          const createResponse = await fetch(`http://localhost:${PORT}/api/projects`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name: projectName, status: 'Planning' })
          });
          const createData = await createResponse.json();
          
          if (createData.success) {
            response = `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ "${projectName}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n`;
            response += `üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:\n`;
            response += `‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠: ${createData.project.name}\n`;
            response += `‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${createData.project.status}\n`;
            response += `‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date(createData.project.created).toLocaleString('th-TH')}\n\n`;
            response += `üîó ID: ${createData.project.id}`;
          } else {
            response = `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ "${projectName}" ‡πÑ‡∏î‡πâ\n\n‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${createData.message}`;
          }
        } else {
          response = '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ Ashval Novel"';
        }
      }
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô
    else if (command.includes('‡∏á‡∏≤‡∏ô') || command.includes('task')) {
      if (command.includes('‡πÅ‡∏™‡∏î‡∏á') || command.includes('‡∏î‡∏π') || command.includes('‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')) {
        const tasksResponse = await fetch(`http://localhost:${PORT}/api/tasks`);
        const tasksData = await tasksResponse.json();
        
        if (tasksData.tasks && tasksData.tasks.length > 0) {
          response = `üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (${tasksData.tasks.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):\n\n`;
          
          const todoTasks = tasksData.tasks.filter(t => t.status === 'To Do');
          const inProgressTasks = tasksData.tasks.filter(t => t.status === 'In Progress');
          const doneTasks = tasksData.tasks.filter(t => t.status === 'Done');
          
          if (todoTasks.length > 0) {
            response += `üìù ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° (${todoTasks.length}):\n`;
            todoTasks.forEach((task, index) => {
              response += `${index + 1}. ${task.title} [${task.priority}]\n`;
            });
            response += '\n';
          }
          
          if (inProgressTasks.length > 0) {
            response += `üîÑ ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ (${inProgressTasks.length}):\n`;
            inProgressTasks.forEach((task, index) => {
              response += `${index + 1}. ${task.title} [${task.priority}]\n`;
            });
            response += '\n';
          }
          
          if (doneTasks.length > 0) {
            response += `‚úÖ ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (${doneTasks.length}):\n`;
            doneTasks.forEach((task, index) => {
              response += `${index + 1}. ${task.title}\n`;
            });
            response += '\n';
          }
          
          response += `üìä ‡∏™‡∏£‡∏∏‡∏õ: ‡πÄ‡∏™‡∏£‡πá‡∏à ${doneTasks.length}/${tasksData.tasks.length} ‡∏á‡∏≤‡∏ô`;
        } else {
          response = 'üìã ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n\nüí° ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô [‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô]"';
        }
      } else if (command.includes('‡∏™‡∏£‡πâ‡∏≤‡∏á')) {
        const taskName = command.replace(/‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô?/gi, '').trim();
        if (taskName) {
          const createResponse = await fetch(`http://localhost:${PORT}/api/tasks`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name: taskName, status: 'To Do', priority: 'Medium' })
          });
          const createData = await createResponse.json();
          
          if (createData.success) {
            response = `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô "${taskName}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n`;
            response += `üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:\n`;
            response += `‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠: ${createData.task.name}\n`;
            response += `‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${createData.task.status}\n`;
            response += `‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ${createData.task.priority}\n`;
            response += `‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date(createData.task.created).toLocaleString('th-TH')}\n\n`;
            response += `üîó ID: ${createData.task.id}`;
          } else {
            response = `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô "${taskName}" ‡πÑ‡∏î‡πâ\n\n‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${createData.message}`;
          }
        } else {
          response = '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Chapter 1"';
        }
      }
    }
    
    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    else if (command.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || command.includes('hello')) {
      response = `ü¶Ñ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà UnicornX Dashboard\n\n`;
      response += `üéØ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n`;
      response += `‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ\n`;
      response += `‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ [‡∏ä‡∏∑‡πà‡∏≠]\n`;
      response += `‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô\n`;
      response += `‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô [‡∏ä‡∏∑‡πà‡∏≠]\n\n`;
      response += `üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${notion ? '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Notion ‡πÅ‡∏•‡πâ‡∏ß' : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Notion'}`;
    }
    
    else {
      response = `ü§î ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "${command}"\n\n`;
      response += `üí° ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n`;
      response += `‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ\n`;
      response += `‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ [‡∏ä‡∏∑‡πà‡∏≠]\n`;
      response += `‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô\n`;
      response += `‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô [‡∏ä‡∏∑‡πà‡∏≠]\n`;
      response += `‚Ä¢ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ\n\n`;
      response += `‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ Ashval Novel"`;
    }
    
    res.json({
      command: command,
      response: response,
      data: data,
      timestamp: new Date().toISOString(),
      processed: true
    });
    
  } catch (error) {
    console.error('‚ùå Command Error:', error);
    res.status(500).json({
      command: command,
      response: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`,
      timestamp: new Date().toISOString(),
      processed: false,
      error: true
    });
  }
});

// Main dashboard page
const dashboardLimiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 minute
  max: 30, // limit each IP to 30 requests per windowMs
  standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers
  legacyHeaders: false, // Disable the `X-RateLimit-*` headers
});
app.get('/', dashboardLimiter, (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Start server
app.listen(PORT, () => {
  console.log(`ü¶Ñ UnicornX Dashboard running on http://localhost:${PORT}`);
  console.log(`üìä Dashboard: http://localhost:${PORT}/`);
  console.log(`üè• Health Check: http://localhost:${PORT}/api/health`);
  console.log(`üîó Notion Status: ${notion ? 'Connected' : 'Setup .env file'}`);
  console.log(`üìã Databases: ${Object.values(DATABASES).filter(Boolean).length}/5 configured`);
});

module.exports = app;
