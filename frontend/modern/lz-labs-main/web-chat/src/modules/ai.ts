// === üè∞ AI Management ===
import { settings } from './settings.js';
import { showToast } from '../utils/toast.js';

export let ai: any = null;

export async function initializeAI() {
    try {
        showToast('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ...', 'info');
        
        const { GoogleGenerativeAI } = await import("https://esm.sh/@google/generative-ai@^0.21.0") as any;
        
        if (settings.geminiKey) {
            ai = new GoogleGenerativeAI(settings.geminiKey);
            console.log("‚úÖ Gemini AI initialized with API key from environment");
            showToast('‚úÖ Gemini AI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô! (‡∏à‡∏≤‡∏Å Environment)', 'success', true);
        } else {
            showToast('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ VITE_GEMINI_API_KEY ‡πÉ‡∏ô .env', 'warning', true);
        }
        
        console.log("‚úÖ Libraries loaded successfully");
    } catch (error) {
        console.error("‚ùå Failed to load libraries:", error);
        showToast('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πÑ‡∏î‡πâ', 'error');
    }
}

export async function generateSummary(content: string): Promise<string> {
    if (!ai) throw new Error("AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
    
    const model = ai.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });
    const prompt = `‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÜ ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢:\n\n${content}`;
    
    const result = await model.generateContent(prompt);
    return result.response.text();
}

export async function evaluateImprovement(oldResponse: string, newResponse: string) {
    if (!ai) {
        return { score: null, analysis: "Cannot evaluate - AI not available" };
    }
    
    try {
        const model = ai.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });
        const prompt = `‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á (1-10):

‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏Å‡πà‡∏≤: ${oldResponse.substring(0, 500)}

‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà: ${newResponse.substring(0, 500)}

‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON:
{
  "score": [‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 1-10],
  "analysis": "[‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏±‡πâ‡∏ô‡πÜ]"
}`;
        
        const result = await model.generateContent(prompt);
        const evaluation = JSON.parse(result.response.text());
        
        return evaluation;
        
    } catch (error) {
        console.error('Evaluation error:', error);
        return { 
            score: 5, 
            analysis: "Auto-evaluation failed, assigned neutral score" 
        };
    }
}

export function calculateSimilarity(text1: string, text2: string): number {
    // Simple similarity calculation based on common words
    const words1 = text1.toLowerCase().split(/\s+/);
    const words2 = text2.toLowerCase().split(/\s+/);
    const commonWords = words1.filter(word => words2.includes(word));
    
    return commonWords.length / Math.max(words1.length, words2.length);
}
