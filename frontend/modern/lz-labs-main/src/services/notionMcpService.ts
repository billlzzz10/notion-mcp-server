import type { Project, Message, CustomTool, Datasource } from "../types";

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI Agent ‡∏ú‡πà‡∏≤‡∏ô Notion MCP Server
 */
export async function* streamChatResponse(
  currentMessages: Message[],
  allProjects: Project[],
  activeProjectId: string,
  tools: CustomTool[],
  datasources: Datasource[]
): AsyncGenerator<{ type: 'system' | 'text', payload: string }> {

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á MCP Gateway Agent API
  const response = await fetch('http://localhost:3001/api/v1/agent/process-command', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ 
      command: currentMessages[currentMessages.length - 1]?.text || '',
      context: {
        messages: currentMessages,
        projects: allProjects,
        activeProjectId,
        tools,
        datasources
      }
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    yield { type: 'system', payload: `‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MCP Server: ${response.status} ${response.statusText}. ${errorText}` };
    return;
  }

  const result = await response.json();
  
  if (result.success) {
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    if (result.modelInfo) {
      yield { 
        type: 'system', 
        payload: `ü§ñ ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•: ${result.modelInfo.selectedModel} (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô: ${result.modelInfo.complexity}%)` 
      };
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å AI
    if (result.analysis) {
      yield { type: 'text', payload: result.analysis };
    } else if (result.response) {
      yield { type: 'text', payload: result.response };
    } else {
      yield { type: 'text', payload: '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å AI Agent ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞' };
    }
  } else {
    yield { type: 'system', payload: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${result.error || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'}` };
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Notion
 */
export async function createProject(name: string, description: string) {
  try {
    const response = await fetch('http://localhost:3001/api/v1/writer/projects', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        name,
        description,
        status: 'active',
        priority: 'medium'
      }),
    });

    return await response.json();
  } catch (error) {
    console.error('Error creating project:', error);
    throw error;
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
 */
export async function getProjects() {
  try {
    const response = await fetch('http://localhost:3001/api/v1/writer/projects');
    return await response.json();
  } catch (error) {
    console.error('Error fetching projects:', error);
    throw error;
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Notion
 */
export async function getDatabases() {
  try {
    const response = await fetch('http://localhost:3001/api/v1/databases');
    return await response.json();
  } catch (error) {
    console.error('Error fetching databases:', error);
    throw error;
  }
}

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏° note ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
 */
export async function createNote(projectId: string, title: string, content: string) {
  try {
    const response = await fetch(`http://localhost:3001/api/v1/writer/projects/${projectId}/notes`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        title,
        content,
        category: 'general'
      }),
    });

    return await response.json();
  } catch (error) {
    console.error('Error creating note:', error);
    throw error;
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ notes ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
 */
export async function getProjectNotes(projectId: string) {
  try {
    const response = await fetch(`http://localhost:3001/api/v1/writer/projects/${projectId}/notes`);
    return await response.json();
  } catch (error) {
    console.error('Error fetching project notes:', error);
    throw error;
  }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
 */
export async function getProjectStats(projectId: string) {
  try {
    const response = await fetch(`http://localhost:3001/api/v1/writer/projects/${projectId}/stats`);
    return await response.json();
  } catch (error) {
    console.error('Error fetching project stats:', error);
    throw error;
  }
}
