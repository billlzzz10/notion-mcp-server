import { Client } from '@notionhq/client';
import { GoogleGenerativeAI } from '@google/generative-ai';
import dotenv from 'dotenv';
import fs from 'fs/promises';

dotenv.config();

const notion = new Client({ auth: process.env.NOTION_TOKEN });
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

class NotionPagesFetcher {
  constructor() {
    this.pageIds = [
      '2315e81a91ff80f79535dc7569e52385', // Page 1
      '2325e81a91ff80e2a4f0f3332f7491fa'  // Page 2
    ];
  }

  async fetchPageContent(pageId) {
    try {
      console.log(`üìÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Page: ${pageId}`);
      console.log(`üîó URL: https://www.notion.so/${pageId}`);
      
      // Get page metadata
      console.log(`   ‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á metadata...`);
      const page = await notion.pages.retrieve({ page_id: pageId });
      console.log(`   ‚úÖ ‡∏î‡∏∂‡∏á metadata ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      
      // Get page blocks (content)
      console.log(`   ‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á blocks...`);
      const blocks = await notion.blocks.children.list({
        block_id: pageId,
        page_size: 100
      });
      console.log(`   ‚úÖ ‡∏î‡∏∂‡∏á ${blocks.results.length} blocks ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      
      const result = {
        id: pageId,
        title: this.extractTitle(page),
        properties: page.properties,
        blocks: blocks.results,
        content: this.extractTextContent(blocks.results),
        metadata: {
          created_time: page.created_time,
          last_edited_time: page.last_edited_time,
          created_by: page.created_by,
          last_edited_by: page.last_edited_by
        }
      };
      
      console.log(`   üìù Title: ${result.title}`);
      console.log(`   üìä Content Length: ${result.content.length} characters`);
      
      return result;
      
    } catch (error) {
      console.error(`‚ùå Error fetching page ${pageId}:`, error.message);
      console.error(`   üîç Error Code: ${error.code}`);
      console.error(`   üìã Full Error:`, error);
      
      return {
        id: pageId,
        title: `Error: ${error.message}`,
        error: true,
        content: '',
        errorDetails: error.message,
        errorCode: error.code
      };
    }
  }

  extractTitle(page) {
    // Extract title from different property types
    if (page.properties) {
      for (const [key, property] of Object.entries(page.properties)) {
        if (property.type === 'title' && property.title.length > 0) {
          return property.title[0].plain_text;
        }
      }
    }
    return 'Untitled Page';
  }

  extractTextContent(blocks) {
    let content = '';
    
    blocks.forEach(block => {
      switch (block.type) {
        case 'paragraph':
          if (block.paragraph.rich_text.length > 0) {
            content += block.paragraph.rich_text.map(text => text.plain_text).join('') + '\n';
          }
          break;
        case 'heading_1':
          if (block.heading_1.rich_text.length > 0) {
            content += '# ' + block.heading_1.rich_text.map(text => text.plain_text).join('') + '\n';
          }
          break;
        case 'heading_2':
          if (block.heading_2.rich_text.length > 0) {
            content += '## ' + block.heading_2.rich_text.map(text => text.plain_text).join('') + '\n';
          }
          break;
        case 'heading_3':
          if (block.heading_3.rich_text.length > 0) {
            content += '### ' + block.heading_3.rich_text.map(text => text.plain_text).join('') + '\n';
          }
          break;
        case 'bulleted_list_item':
          if (block.bulleted_list_item.rich_text.length > 0) {
            content += '‚Ä¢ ' + block.bulleted_list_item.rich_text.map(text => text.plain_text).join('') + '\n';
          }
          break;
        case 'numbered_list_item':
          if (block.numbered_list_item.rich_text.length > 0) {
            content += '1. ' + block.numbered_list_item.rich_text.map(text => text.plain_text).join('') + '\n';
          }
          break;
        case 'code':
          if (block.code.rich_text.length > 0) {
            content += '```\n' + block.code.rich_text.map(text => text.plain_text).join('') + '\n```\n';
          }
          break;
        case 'quote':
          if (block.quote.rich_text.length > 0) {
            content += '> ' + block.quote.rich_text.map(text => text.plain_text).join('') + '\n';
          }
          break;
        case 'table':
          content += '[TABLE]\n';
          break;
        case 'database':
          content += '[DATABASE]\n';
          break;
        case 'child_database':
          content += '[CHILD_DATABASE]\n';
          break;
        case 'divider':
          content += '---\n';
          break;
        case 'callout':
          if (block.callout && block.callout.rich_text.length > 0) {
            content += 'üìã ' + block.callout.rich_text.map(text => text.plain_text).join('') + '\n';
          }
          break;
      }
    });
    
    return content;
  }

  async analyzeSystemCapabilities(pagesData) {
    console.log('ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ AI...');
    
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    
    const systemInfo = {
      currentTools: [
        'auto-update-projects.js',
        'check-data-quality.js', 
        'check-db-structure.js',
        'check-status-options.js',
        'cleanup-duplicates.js',
        'create-project-roadmap.js',
        'subtasks-reports-agent.js',
        'youtubeAnalyzer.js',
        'ashval-bot.js (Telegram)',
        'mobile-ready.html (Web Interface)'
      ],
      databases: {
        characters: process.env.NOTION_CHARACTERS_DB_ID,
        scenes: process.env.NOTION_SCENES_DB_ID,
        chapters: process.env.NOTION_CHAPTERS_DB_ID,
        locations: process.env.NOTION_LOCATIONS_DB_ID,
        projects: process.env.NOTION_PROJECTS_DB_ID,
        tasks: process.env.NOTION_TASKS_DB_ID,
        subtasks: process.env.NOTION_SUBTASKS_DB_ID,
        reports: process.env.NOTION_REPORTS_DB_ID,
        ai_prompts: process.env.NOTION_AI_PROMPTS_DB_ID
      },
      integrations: {
        telegram: process.env.TELEGRAM_BOT_TOKEN ? 'enabled' : 'disabled',
        gemini: process.env.GEMINI_API_KEY ? 'enabled' : 'disabled',
        makecom: process.env.MAKE_WEBHOOK_URL ? 'enabled' : 'disabled'
      }
    };

    const prompt = `
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Notion Pages ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:

    === ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Notion Pages ===
    ${pagesData.map(page => `
    ‡∏´‡∏ô‡πâ‡∏≤: ${page.title}
    ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${page.error ? 'Error - ' + page.errorDetails : 'Success'}
    ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: ${page.content.substring(0, 1000)}...
    `).join('\n')}

    === ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ===
    ${JSON.stringify(systemInfo, null, 2)}

    === ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ===
    1. ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô Notion Pages?
    2. ‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á?
    3. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Notion Pages ‡∏ä‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ?
    4. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÑ‡∏õ
    5. ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÄ‡∏ä‡πà‡∏ô YouTube Analyzer, TTS, Colab integration)

    ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
    `;

    try {
      const result = await model.generateContent(prompt);
      return result.response.text();
    } catch (error) {
      console.error('‚ùå AI Analysis Error:', error);
      return '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ';
    }
  }

  async generateReport(pagesData, aiAnalysis) {
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        totalPages: pagesData.length,
        successfulFetches: pagesData.filter(p => !p.error).length,
        errors: pagesData.filter(p => p.error).length
      },
      pages: pagesData,
      aiAnalysis: aiAnalysis,
      systemStatus: {
        databases: Object.keys({
          characters: process.env.NOTION_CHARACTERS_DB_ID,
          scenes: process.env.NOTION_SCENES_DB_ID,
          chapters: process.env.NOTION_CHAPTERS_DB_ID,
          locations: process.env.NOTION_LOCATIONS_DB_ID,
          projects: process.env.NOTION_PROJECTS_DB_ID,
          tasks: process.env.NOTION_TASKS_DB_ID,
          subtasks: process.env.NOTION_SUBTASKS_DB_ID,
          reports: process.env.NOTION_REPORTS_DB_ID,
          ai_prompts: process.env.NOTION_AI_PROMPTS_DB_ID
        }).length,
        tools: [
          'auto-update-projects.js',
          'check-data-quality.js', 
          'check-db-structure.js',
          'check-status-options.js',
          'cleanup-duplicates.js',
          'create-project-roadmap.js',
          'subtasks-reports-agent.js',
          'youtubeAnalyzer.js',
          'ashval-bot.js',
          'mobile-ready.html'
        ]
      }
    };

    // Save report to file
    await fs.writeFile(
      'notion-pages-analysis-report.json',
      JSON.stringify(report, null, 2),
      'utf8'
    );

    // Create markdown summary
    const markdownReport = `# üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Notion Pages

## üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
- **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå**: ${report.summary.totalPages}
- **‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à**: ${report.summary.successfulFetches}
- **‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î**: ${report.summary.errors}
- **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå**: ${new Date().toLocaleString('th-TH')}

## üìÑ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå

${pagesData.map((page, index) => `
### ${index + 1}. ${page.title}
${page.error ? `‚ùå **Error**: ${page.errorDetails}

**Page ID**: ${page.id}
**‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏**: ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Page ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
` : `
‚úÖ **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞**: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
**‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠**: ${page.title}
**‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î**: ${page.metadata?.last_edited_time ? new Date(page.metadata.last_edited_time).toLocaleString('th-TH') : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}

**‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á**:
\`\`\`
${page.content.substring(0, 500)}${page.content.length > 500 ? '...' : ''}
\`\`\`

**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Blocks**: ${page.blocks ? page.blocks.length : 0}
**‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤**: ${page.content.length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
`}
`).join('\n')}

## ü§ñ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI

${aiAnalysis}

## üõ†Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

### üíæ ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ (${report.systemStatus.databases} ‡∏ê‡∏≤‡∏ô)
- **Characters**: ${process.env.NOTION_CHARACTERS_DB_ID}
- **Scenes**: ${process.env.NOTION_SCENES_DB_ID}  
- **Chapters**: ${process.env.NOTION_CHAPTERS_DB_ID}
- **Locations**: ${process.env.NOTION_LOCATIONS_DB_ID}
- **Projects**: ${process.env.NOTION_PROJECTS_DB_ID}
- **Tasks**: ${process.env.NOTION_TASKS_DB_ID}
- **Subtasks**: ${process.env.NOTION_SUBTASKS_DB_ID}
- **Reports**: ${process.env.NOTION_REPORTS_DB_ID}
- **AI Prompts**: ${process.env.NOTION_AI_PROMPTS_DB_ID}

### üîß ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ (${report.systemStatus.tools.length} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠)
${report.systemStatus.tools.map(tool => `- ‚úÖ ${tool}`).join('\n')}

### üîå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
- **Telegram Bot**: ${process.env.TELEGRAM_BOT_TOKEN ? '‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}
- **Gemini AI**: ${process.env.GEMINI_API_KEY ? '‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}
- **Make.com**: ${process.env.MAKE_WEBHOOK_URL ? '‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}

---
*‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö Notion MCP Server ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥*
*‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: ${new Date().toLocaleString('th-TH')}*
`;

    await fs.writeFile(
      'notion-pages-analysis-report.md',
      markdownReport,
      'utf8'
    );

    return report;
  }

  async run() {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Notion Pages...');
    console.log(`üîë ‡πÉ‡∏ä‡πâ Notion Token: ${process.env.NOTION_TOKEN ? '‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°' : '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö'}`);
    console.log(`ü§ñ ‡πÉ‡∏ä‡πâ Gemini API: ${process.env.GEMINI_API_KEY ? '‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°' : '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö'}`);
    console.log('');
    
    // Fetch all pages
    const pagesData = [];
    for (const pageId of this.pageIds) {
      const pageData = await this.fetchPageContent(pageId);
      pagesData.push(pageData);
      
      // Small delay to avoid rate limiting
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    console.log('\nüìä === ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ===');
    pagesData.forEach((page, index) => {
      if (page.error) {
        console.log(`${index + 1}. ‚ùå ${page.title}`);
        console.log(`   üìù ${page.errorDetails}`);
      } else {
        console.log(`${index + 1}. ‚úÖ ${page.title} (${page.content.length} characters)`);
        console.log(`   üìù Blocks: ${page.blocks.length}, Updated: ${page.metadata?.last_edited_time ? new Date(page.metadata.last_edited_time).toLocaleDateString('th-TH') : 'Unknown'}`);
      }
    });

    // AI Analysis
    const aiAnalysis = await this.analyzeSystemCapabilities(pagesData);

    // Generate comprehensive report
    const report = await this.generateReport(pagesData, aiAnalysis);

    console.log('\nüìã === ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ===');
    console.log('üìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: notion-pages-analysis-report.md');
    console.log('üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON: notion-pages-analysis-report.json');
    
    console.log('\nüéØ === ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ===');
    console.log(aiAnalysis);

    return report;
  }
}

// Export and run
export default NotionPagesFetcher;

if (import.meta.url === `file://${process.argv[1]}`) {
  const fetcher = new NotionPagesFetcher();
  fetcher.run().catch(console.error);
}
