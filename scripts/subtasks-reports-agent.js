import dotenv from 'dotenv';
dotenv.config();

/**
 * Subtasks Management Agent
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
 */
class SubtasksAgent {
  constructor() {
    this.notionHeaders = {
      'Authorization': `Bearer ${process.env.NOTION_TOKEN}`,
      'Notion-Version': '2022-06-28',
      'Content-Type': 'application/json'
    };
    this.subtasksDbId = process.env.NOTION_SUBTASKS_DB_ID;
    this.tasksDbId = process.env.NOTION_TASKS_DB_ID;
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏´‡∏°‡πà
   */
  async createSubtask(data) {
    try {
      const properties = {
        'Name': {
          title: [{ text: { content: data.name || '‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏´‡∏°‡πà' } }]
        },
        'Status': {
          status: { name: data.status || 'Not started' }
        }
      };

      // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (data.parentTaskId) {
        properties['üóìÔ∏è Task'] = {
          relation: [{ id: data.parentTaskId }]
        };
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
      if (data.description) {
        properties['‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô'] = {
          rich_text: [{ text: { content: data.description } }]
        };
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
      if (data.priority) {
        properties['Priority'] = {
          select: { name: data.priority }
        };
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤
      if (data.deadline) {
        properties['Deadline'] = {
          date: { start: data.deadline }
        };
      }

      const response = await fetch(`https://api.notion.com/v1/pages`, {
        method: 'POST',
        headers: this.notionHeaders,
        body: JSON.stringify({
          parent: { database_id: this.subtasksDbId },
          properties
        })
      });

      if (response.ok) {
        const result = await response.json();
        console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢ "${data.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        return result;
      } else {
        console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÑ‡∏î‡πâ: ${response.status}`);
        return null;
      }
    } catch (error) {
      console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢:', error.message);
      return null;
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
   */
  async getSubtasksByParentTask(parentTaskId) {
    try {
      const response = await fetch(`https://api.notion.com/v1/databases/${this.subtasksDbId}/query`, {
        method: 'POST',
        headers: this.notionHeaders,
        body: JSON.stringify({
          filter: {
            property: 'üóìÔ∏è Task',
            relation: {
              contains: parentTaskId
            }
          }
        })
      });

      if (response.ok) {
        const data = await response.json();
        return data.results.map(subtask => ({
          id: subtask.id,
          name: subtask.properties.Name?.title?.[0]?.text?.content || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠',
          status: subtask.properties.Status?.status?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
          priority: subtask.properties.Priority?.select?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
          deadline: subtask.properties.Deadline?.date?.start || null,
          description: subtask.properties['‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô']?.rich_text?.[0]?.text?.content || ''
        }));
      } else {
        console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÑ‡∏î‡πâ: ${response.status}`);
        return [];
      }
    } catch (error) {
      console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢:', error.message);
      return [];
    }
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢
   */
  async updateSubtaskStatus(subtaskId, status) {
    try {
      const response = await fetch(`https://api.notion.com/v1/pages/${subtaskId}`, {
        method: 'PATCH',
        headers: this.notionHeaders,
        body: JSON.stringify({
          properties: {
            'Status': {
              status: { name: status }
            }
          }
        })
      });

      if (response.ok) {
        console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô "${status}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        return true;
      } else {
        console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÑ‡∏î‡πâ: ${response.status}`);
        return false;
      }
    } catch (error) {
      console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢:', error.message);
      return false;
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
   */
  async createMultipleSubtasks(parentTaskId, subtasksList) {
    const results = [];
    
    console.log(`üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á ${subtasksList.length} ‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢...`);
    
    for (const subtaskData of subtasksList) {
      const subtask = await this.createSubtask({
        ...subtaskData,
        parentTaskId
      });
      
      if (subtask) {
        results.push(subtask);
      }
      
      // ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ API rate limit
      await new Promise(resolve => setTimeout(resolve, 300));
    }
    
    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${results.length}/${subtasksList.length} ‡∏á‡∏≤‡∏ô`);
    return results;
  }

  /**
   * ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢
   */
  async analyzeSubtaskProgress(parentTaskId) {
    const subtasks = await this.getSubtasksByParentTask(parentTaskId);
    
    if (subtasks.length === 0) {
      return {
        total: 0,
        completed: 0,
        inProgress: 0,
        notStarted: 0,
        overdue: 0,
        progressPercentage: 0
      };
    }

    const today = new Date().toISOString().split('T')[0];
    
    const analysis = {
      total: subtasks.length,
      completed: subtasks.filter(s => s.status === 'Done').length,
      inProgress: subtasks.filter(s => s.status === 'In progress').length,
      notStarted: subtasks.filter(s => s.status === 'Not started').length,
      overdue: subtasks.filter(s => s.deadline && s.deadline < today && s.status !== 'Done').length
    };

    analysis.progressPercentage = Math.round((analysis.completed / analysis.total) * 100);

    return analysis;
  }
}

/**
 * Reports Management Agent
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
class ReportsAgent {
  constructor() {
    this.notionHeaders = {
      'Authorization': `Bearer ${process.env.NOTION_TOKEN}`,
      'Notion-Version': '2022-06-28',
      'Content-Type': 'application/json'
    };
    this.reportsDbId = process.env.NOTION_REPORTS_DB_ID;
    this.projectsDbId = process.env.NOTION_PROJECTS_DB_ID;
    this.tasksDbId = process.env.NOTION_TASKS_DB_ID;
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÉ‡∏´‡∏°‡πà
   */
  async createReport(data) {
    try {
      const properties = {
        'Content': {
          title: [{ text: { content: data.title || '‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÉ‡∏´‡∏°‡πà' } }]
        },
        'Type': {
          select: { name: data.type || 'Progress Report' }
        }
      };

      // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
      if (data.projectIds && data.projectIds.length > 0) {
        properties['Projects'] = {
          relation: data.projectIds.map(id => ({ id }))
        };
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
      if (data.details) {
        properties['‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'] = {
          rich_text: [{ text: { content: data.details } }]
        };
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
      if (data.assigneeId) {
        properties['‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö'] = {
          people: [{ id: data.assigneeId }]
        };
      }

      const response = await fetch(`https://api.notion.com/v1/pages`, {
        method: 'POST',
        headers: this.notionHeaders,
        body: JSON.stringify({
          parent: { database_id: this.reportsDbId },
          properties
        })
      });

      if (response.ok) {
        const result = await response.json();
        console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï "${data.title}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Make.com webhook ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
        if (process.env.MAKE_WEBHOOK_URL) {
          await this.sendWebhookNotification('report_created', {
            reportId: result.id,
            title: data.title,
            type: data.type
          });
        }
        
        return result;
      } else {
        console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÑ‡∏î‡πâ: ${response.status}`);
        return null;
      }
    } catch (error) {
      console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï:', error.message);
      return null;
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
   */
  async generateProjectProgressReport(projectId) {
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
      const projectResponse = await fetch(`https://api.notion.com/v1/pages/${projectId}`, {
        headers: this.notionHeaders
      });

      if (!projectResponse.ok) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£');
      }

      const project = await projectResponse.json();
      const projectName = project.properties.Name?.title?.[0]?.text?.content || '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠';

      // ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
      const tasksResponse = await fetch(`https://api.notion.com/v1/databases/${this.tasksDbId}/query`, {
        method: 'POST',
        headers: this.notionHeaders,
        body: JSON.stringify({
          filter: {
            property: 'Project',
            relation: {
              contains: projectId
            }
          }
        })
      });

      let taskAnalysis = {
        total: 0,
        completed: 0,
        inProgress: 0,
        notStarted: 0,
        overdue: 0
      };

      if (tasksResponse.ok) {
        const tasksData = await tasksResponse.json();
        const today = new Date().toISOString().split('T')[0];
        
        taskAnalysis.total = tasksData.results.length;
        
        tasksData.results.forEach(task => {
          const status = task.properties.Status?.status?.name || 'Not started';
          const dueDate = task.properties['Due Date']?.date?.start || null;
          
          if (status === 'Done') {
            taskAnalysis.completed++;
          } else if (status === 'In progress') {
            taskAnalysis.inProgress++;
          } else {
            taskAnalysis.notStarted++;
          }
          
          if (dueDate && dueDate < today && status !== 'Done') {
            taskAnalysis.overdue++;
          }
        });
      }

      const progressPercentage = taskAnalysis.total > 0 
        ? Math.round((taskAnalysis.completed / taskAnalysis.total) * 100) 
        : 0;

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï
      const reportContent = `# ‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: ${projectName}

## üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°: ${progressPercentage}%
- ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${taskAnalysis.total} ‡∏á‡∏≤‡∏ô
- ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: ${taskAnalysis.completed} ‡∏á‡∏≤‡∏ô
- ‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: ${taskAnalysis.inProgress} ‡∏á‡∏≤‡∏ô
- ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°: ${taskAnalysis.notStarted} ‡∏á‡∏≤‡∏ô
- ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤: ${taskAnalysis.overdue} ‡∏á‡∏≤‡∏ô

## üéØ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
${progressPercentage >= 90 ? 'üü¢ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' : 
  progressPercentage >= 70 ? 'üü° ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏î‡∏µ' :
  progressPercentage >= 50 ? 'üü† ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' :
  'üî¥ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à'}

## ‚ö†Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
${taskAnalysis.overdue > 0 ? `- ‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤ ${taskAnalysis.overdue} ‡∏á‡∏≤‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡πà‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£` : '- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤'}
${taskAnalysis.notStarted > taskAnalysis.inProgress ? '- ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£' : ''}

‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï: ${new Date().toLocaleDateString('th-TH')}`;

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÉ‡∏ô Notion
      const report = await this.createReport({
        title: `‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: ${projectName} (${new Date().toLocaleDateString('th-TH')})`,
        type: 'Progress Report',
        details: reportContent,
        projectIds: [projectId]
      });

      return {
        report,
        analysis: taskAnalysis,
        progressPercentage
      };

    } catch (error) {
      console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï:', error.message);
      return null;
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô Webhook
   */
  async sendWebhookNotification(eventType, data) {
    if (!process.env.MAKE_WEBHOOK_URL) return;

    try {
      await fetch(process.env.MAKE_WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          eventType,
          timestamp: new Date().toISOString(),
          data
        })
      });
    } catch (error) {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á webhook notification ‡πÑ‡∏î‡πâ:', error.message);
    }
  }
}

export { SubtasksAgent, ReportsAgent };
