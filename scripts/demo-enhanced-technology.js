#!/usr/bin/env node

/**
 * Enhanced Technology Demo Script
 * ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Notion MCP Server
 */

import { vectorSearchService } from '../backend/src/services/vectorSearchService.js';

const colors = {
  green: '\x1b[32m',
  blue: '\x1b[34m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  reset: '\x1b[0m'
};

function print(text, color = 'reset') {
  console.log(`${colors[color]}${text}${colors.reset}`);
}

async function demoVectorSearch() {
  print('\nüß† Vector Search Demo', 'blue');
  print('='.repeat(50), 'blue');

  try {
    // Initialize vector service
    print('\nüîß Initializing Vector Search Service...', 'yellow');
    await vectorSearchService.initialize();
    
    // Health check
    print('\nüè• Health Check...', 'yellow');
    const health = await vectorSearchService.healthCheck();
    print(`Status: ${health.status}`, health.status === 'healthy' ? 'green' : 'red');
    print(`Collections: ${health.collections.join(', ')}`, 'green');

    // Demo semantic search
    print('\nüîç Demo Semantic Search...', 'yellow');
    const searchQueries = [
      '‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡∏°‡∏∑‡∏î',
      '‡∏â‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô',
      '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö‡∏ô‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ß'
    ];

    for (const query of searchQueries) {
      print(`\n‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: "${query}"`, 'blue');
      try {
        const results = await vectorSearchService.semanticSearch(query, ['characters', 'scenes', 'locations'], 3);
        
        if (results.length === 0) {
          print('  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå - ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô vector database', 'yellow');
        } else {
          results.forEach((result, index) => {
            const similarity = Math.round(result.similarity * 100);
            print(`  ${index + 1}. ${result.metadata.name || result.metadata.title || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'} (${similarity}%)`, 'green');
          });
        }
      } catch (error) {
        print(`  ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`, 'red');
      }
    }

    print('\n‚úÖ Vector Search Demo ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'green');

  } catch (error) {
    print(`\n‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ demo: ${error.message}`, 'red');
    print('üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CHROMADB_URL ‡πÉ‡∏ô .env', 'yellow');
  }
}

async function demoContentIndexing() {
  print('\nüìö Content Indexing Demo', 'blue');
  print('='.repeat(50), 'blue');

  try {
    // Example character data
    const exampleCharacter = {
      id: 'demo-character-001',
      properties: {
        Name: {
          title: [{ text: { content: '‡πÄ‡∏ã‡∏•‡∏≤‡∏£‡πå ‡∏ô‡∏±‡∏Å‡∏™‡∏π‡πâ‡πÅ‡∏´‡πà‡∏á‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á' } }]
        },
        Description: {
          rich_text: [{ text: { content: '‡∏ô‡∏±‡∏Å‡∏™‡∏π‡πâ‡∏ú‡∏π‡πâ‡∏Å‡∏•‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏£‡πâ‡∏≤‡∏¢ ‡∏°‡∏µ‡∏î‡∏≤‡∏ö‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏≥‡∏à‡∏±‡∏î‡∏õ‡∏µ‡∏®‡∏≤‡∏à‡πÑ‡∏î‡πâ' } }]
        },
        Personality: {
          rich_text: [{ text: { content: '‡∏Å‡∏•‡πâ‡∏≤‡∏´‡∏≤‡∏ç ‡∏¢‡∏∏‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏° ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏ï‡∏ï‡∏≤ ‡πÅ‡∏ï‡πà‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î' } }]
        },
        Role: {
          select: { name: '‡∏Æ‡∏µ‡πÇ‡∏£‡πà' }
        }
      }
    };

    print('\nüìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á index ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£...', 'yellow');
    await vectorSearchService.indexCharacter(exampleCharacter);
    print('‚úÖ Index ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'green');

    // Example scene data
    const exampleScene = {
      id: 'demo-scene-001',
      properties: {
        Title: {
          title: [{ text: { content: '‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó‡∏°‡∏∑‡∏î' } }]
        },
        Description: {
          rich_text: [{ text: { content: '‡∏â‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏•‡∏≤‡∏£‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ú‡∏ä‡∏¥‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏ß‡∏õ‡∏µ‡∏®‡∏≤‡∏à‡πÉ‡∏ô‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏°‡∏∑‡∏î‡∏°‡∏¥‡∏î ‡πÅ‡∏™‡∏á‡∏à‡∏≤‡∏Å‡∏î‡∏≤‡∏ö‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÅ‡∏™‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏™‡πà‡∏≠‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∑‡∏î‡∏°‡∏¥‡∏î' } }]
        },
        Characters: {
          multi_select: [
            { name: '‡πÄ‡∏ã‡∏•‡∏≤‡∏£‡πå' },
            { name: '‡∏à‡πâ‡∏≤‡∏ß‡∏õ‡∏µ‡∏®‡∏≤‡∏à' }
          ]
        },
        Location: {
          select: { name: '‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó‡∏°‡∏∑‡∏î' }
        },
        Mood: {
          select: { name: '‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô' }
        }
      }
    };

    print('\nüé¨ ‡∏Å‡∏≥‡∏•‡∏±‡∏á index ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏â‡∏≤‡∏Å...', 'yellow');
    await vectorSearchService.indexScene(exampleScene);
    print('‚úÖ Index ‡∏â‡∏≤‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'green');

    // Test search with new content
    print('\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°...', 'yellow');
    const searchResults = await vectorSearchService.semanticSearch('‡∏ô‡∏±‡∏Å‡∏™‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡∏≤‡∏ö', ['characters', 'scenes'], 5);
    
    if (searchResults.length > 0) {
      print(`‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ${searchResults.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:`, 'green');
      searchResults.forEach((result, index) => {
        const similarity = Math.round(result.similarity * 100);
        print(`  ${index + 1}. ${result.metadata.name || result.metadata.title} (${similarity}%)`, 'green');
      });
    }

    print('\n‚úÖ Content Indexing Demo ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'green');

  } catch (error) {
    print(`\n‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ demo indexing: ${error.message}`, 'red');
  }
}

async function showUsageInstructions() {
  print('\nüìñ Usage Instructions', 'blue');
  print('='.repeat(50), 'blue');

  print('\nüöÄ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡∏°‡πà:', 'yellow');
  print('1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies:', 'reset');
  print('   ./scripts/install-enhancements.sh', 'green');
  
  print('\n2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variables ‡πÉ‡∏ô .env:', 'reset');
  print('   CHROMADB_URL=http://localhost:8000', 'green');
  print('   PINECONE_API_KEY=your_pinecone_key', 'green');
  print('   REDIS_URL=redis://localhost:6379', 'green');

  print('\n3. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ MCP tools ‡πÉ‡∏´‡∏°‡πà:', 'reset');
  print('   - semantic_search: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö AI', 'green');
  print('   - find_similar_content: ‡∏´‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô', 'green');
  print('   - get_content_recommendations: ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤', 'green');
  print('   - detect_plot_holes: ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á', 'green');

  print('\n4. ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:', 'reset');
  print('   üìö docs/TECHNOLOGY-ENHANCEMENT-PROPOSAL.md', 'green');
  print('   üìö docs/MCP-USAGE-GUIDE.md', 'green');

  print('\nüí° Tips:', 'yellow');
  print('- ‡∏£‡∏±‡∏ô health check ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: vectorSearchService.healthCheck()', 'reset');
  print('- Index ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô: vectorSearchService.indexAllContent()', 'reset');
  print('- ‡πÉ‡∏ä‡πâ MCP Inspector ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö tools ‡πÉ‡∏´‡∏°‡πà', 'reset');
}

async function main() {
  print('\nüöÄ Enhanced Technology Demo for Notion MCP Server', 'blue');
  print('‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', 'blue');
  print('='.repeat(60), 'blue');

  try {
    await demoVectorSearch();
    await demoContentIndexing();
    await showUsageInstructions();

    print('\nüéâ Demo ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡∏°‡πà', 'green');
    print('üí¨ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞: ‡πÄ‡∏õ‡∏¥‡∏î GitHub Issue', 'blue');

  } catch (error) {
    print(`\nüí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô demo: ${error.message}`, 'red');
    print('\nüîß ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:', 'yellow');
    print('1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö .env configuration', 'reset');
    print('2. ‡∏£‡∏±‡∏ô: npm run build', 'reset');
    print('3. ‡πÄ‡∏£‡∏¥‡πà‡∏° ChromaDB: docker run -p 8000:8000 chromadb/chroma', 'reset');
    print('4. ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'reset');
  }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ demo
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}