import dotenv from 'dotenv';
dotenv.config();

/**
 * ‡∏•‡∏ö Project ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏Ñ‡πà Project ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
 */
async function cleanupDuplicateProjects() {
  console.log('üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Projects ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô');
  console.log('=====================================');

  try {
    // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Projects ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô
    const duplicateProjects = await findDuplicateProjects();
    
    if (duplicateProjects.length <= 1) {
      console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö Project ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô');
      return;
    }

    console.log(`üìã ‡∏û‡∏ö ${duplicateProjects.length} Projects ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô:`);
    duplicateProjects.forEach((project, index) => {
      console.log(`${index + 1}. ${project.name} (‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date(project.created_time).toLocaleString('th-TH')})`);
      console.log(`   ID: ${project.id}`);
    });

    // 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
    duplicateProjects.sort((a, b) => new Date(b.created_time) - new Date(a.created_time));
    
    const latestProject = duplicateProjects[0];
    const projectsToDelete = duplicateProjects.slice(1);

    console.log(`\n‚úÖ ‡πÄ‡∏Å‡πá‡∏ö Project ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: "${latestProject.name}"`);
    console.log(`   ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date(latestProject.created_time).toLocaleString('th-TH')}`);
    console.log(`   ID: ${latestProject.id}`);

    if (projectsToDelete.length > 0) {
      console.log(`\nüóëÔ∏è ‡∏à‡∏∞‡∏•‡∏ö ${projectsToDelete.length} Projects ‡πÄ‡∏Å‡πà‡∏≤:`);
      
      for (let i = 0; i < projectsToDelete.length; i++) {
        const project = projectsToDelete[i];
        console.log(`\n${i + 1}. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö: "${project.name}"`);
        
        try {
          // ‡∏•‡∏ö Tasks ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö Project ‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô
          await deleteProjectTasks(project.id);
          
          // ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏•‡∏ö Project
          await deleteProject(project.id);
          
          console.log(`   ‚úÖ ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
          
          // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
          await new Promise(resolve => setTimeout(resolve, 500));
          
        } catch (error) {
          console.log(`   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ: ${error.message}`);
        }
      }
    }

    console.log('\nüéØ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log(`üìä Project ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: 1 Project`);
    console.log(`üîó Project ID: ${latestProject.id}`);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  }
}

/**
 * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Projects ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
 */
async function findDuplicateProjects() {
  try {
    const response = await fetch(`https://api.notion.com/v1/databases/${process.env.NOTION_PROJECTS_DB_ID}/query`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.NOTION_TOKEN}`,
        'Notion-Version': '2022-06-28',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        filter: {
          property: "Name",
          title: {
            contains: "MCP Server v3.0"
          }
        },
        sorts: [
          {
            property: "Start Date",
            direction: "descending"
          }
        ]
      })
    });

    if (!response.ok) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Projects ‡πÑ‡∏î‡πâ: ${response.statusText}`);
    }

    const data = await response.json();
    return data.results.map(project => ({
      id: project.id,
      name: project.properties.Name?.title?.[0]?.text?.content || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠',
      created_time: project.created_time,
      status: project.properties.Status?.select?.name || 'Unknown'
    }));

  } catch (error) {
    console.error('‚ùå Error finding projects:', error.message);
    return [];
  }
}

/**
 * ‡∏•‡∏ö Tasks ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö Project
 */
async function deleteProjectTasks(projectId) {
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Tasks ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö Project ‡∏ô‡∏µ‡πâ
    const response = await fetch(`https://api.notion.com/v1/databases/${process.env.NOTION_TASKS_DB_ID}/query`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.NOTION_TOKEN}`,
        'Notion-Version': '2022-06-28',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        filter: {
          property: "Project",
          relation: {
            contains: projectId
          }
        }
      })
    });

    if (!response.ok) return;

    const data = await response.json();
    const tasks = data.results;

    if (tasks.length > 0) {
      console.log(`   üìù ‡∏û‡∏ö ${tasks.length} Tasks ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö...`);
      
      for (const task of tasks) {
        try {
          await fetch(`https://api.notion.com/v1/pages/${task.id}`, {
            method: 'PATCH',
            headers: {
              'Authorization': `Bearer ${process.env.NOTION_TOKEN}`,
              'Notion-Version': '2022-06-28',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              archived: true
            })
          });
        } catch (error) {
          console.log(`   ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö Task ${task.id}: ${error.message}`);
        }
      }
      console.log(`   ‚úÖ ‡∏•‡∏ö Tasks ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô`);
    }

  } catch (error) {
    console.error('‚ùå Error deleting tasks:', error.message);
  }
}

/**
 * ‡∏•‡∏ö Project
 */
async function deleteProject(projectId) {
  try {
    const response = await fetch(`https://api.notion.com/v1/pages/${projectId}`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${process.env.NOTION_TOKEN}`,
        'Notion-Version': '2022-06-28',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        archived: true
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

  } catch (error) {
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö Project ‡πÑ‡∏î‡πâ: ${error.message}`);
  }
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Projects ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
 */
async function showRemainingProjects() {
  try {
    console.log('\nüìä Projects ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà:');
    console.log('========================');
    
    const response = await fetch(`https://api.notion.com/v1/databases/${process.env.NOTION_PROJECTS_DB_ID}/query`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.NOTION_TOKEN}`,
        'Notion-Version': '2022-06-28',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        filter: {
          property: "Name",
          title: {
            contains: "MCP Server v3.0"
          }
        }
      })
    });

    if (response.ok) {
      const data = await response.json();
      if (data.results.length > 0) {
        data.results.forEach((project, index) => {
          const name = project.properties.Name?.title?.[0]?.text?.content || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠';
          const status = project.properties.Status?.select?.name || 'Unknown';
          const created = new Date(project.created_time).toLocaleString('th-TH');
          
          console.log(`${index + 1}. ${name}`);
          console.log(`   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${status}`);
          console.log(`   ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${created}`);
          console.log(`   ID: ${project.id}`);
        });
      } else {
        console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö Project ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç');
      }
    }
  } catch (error) {
    console.error('‚ùå Error showing projects:', error.message);
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
cleanupDuplicateProjects()
  .then(() => showRemainingProjects())
  .catch(console.error);
