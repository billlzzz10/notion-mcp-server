import { Client } from '@notionhq/client';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// Initialize Notion client
const notion = new Client({ auth: process.env.NOTION_TOKEN });

const YOUTUBE_DB_ID = '2325e81a91ff80c9a0dbc323e1683f5f';

async function checkYouTubeDbSchema() {
  try {
    console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• YouTube Analysis...');
    console.log(`üìä Database ID: ${YOUTUBE_DB_ID}\n`);

    // Get database schema
    const database = await notion.databases.retrieve({
      database_id: YOUTUBE_DB_ID
    });

    console.log(`üìã ‡∏ä‡∏∑‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${database.title[0]?.text?.content || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'}\n`);
    
    console.log('üèóÔ∏è  Properties ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:');
    console.log('=' .repeat(50));

    const properties = database.properties;
    
    for (const [propName, propConfig] of Object.entries(properties)) {
      console.log(`üìå ${propName}`);
      console.log(`   ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${propConfig.type}`);
      
      // Show additional details based on property type
      switch (propConfig.type) {
        case 'select':
          if (propConfig.select?.options?.length > 0) {
            console.log(`   ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${propConfig.select.options.map(opt => opt.name).join(', ')}`);
          }
          break;
        case 'multi_select':
          if (propConfig.multi_select?.options?.length > 0) {
            console.log(`   ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${propConfig.multi_select.options.map(opt => opt.name).join(', ')}`);
          }
          break;
        case 'relation':
          console.log(`   ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö: ${propConfig.relation?.database_id}`);
          break;
        case 'formula':
          console.log(`   ‡∏™‡∏π‡∏ï‡∏£: ${propConfig.formula?.expression}`);
          break;
      }
      console.log('');
    }

    // Get a few sample pages to see the data structure
    console.log('üìÑ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å):');
    console.log('=' .repeat(50));

    const pages = await notion.databases.query({
      database_id: YOUTUBE_DB_ID,
      page_size: 5
    });

    if (pages.results.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    } else {
      pages.results.forEach((page, index) => {
        console.log(`\nüìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà ${index + 1}:`);
        
        // Show title
        const titleProp = Object.entries(page.properties).find(([name, prop]) => prop.type === 'title');
        if (titleProp) {
          const titleText = titleProp[1].title?.[0]?.text?.content || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠';
          console.log(`   ‡∏ä‡∏∑‡πà‡∏≠: ${titleText}`);
        }

        // Show YouTube URL if exists
        for (const [propName, propValue] of Object.entries(page.properties)) {
          if (propName.toLowerCase().includes('url') || propName.toLowerCase().includes('link')) {
            if (propValue.type === 'url' && propValue.url) {
              console.log(`   ${propName}: ${propValue.url}`);
            } else if (propValue.type === 'rich_text' && propValue.rich_text?.[0]?.text?.content) {
              const text = propValue.rich_text[0].text.content;
              if (text.includes('youtube.com') || text.includes('youtu.be')) {
                console.log(`   ${propName}: ${text}`);
              }
            }
          }
        }
      });
    }

    console.log('\n‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    if (error.code === 'object_not_found') {
      console.error('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Database ID ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á');
    }
  }
}

// Run the check
checkYouTubeDbSchema();
