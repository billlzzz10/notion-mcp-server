import { Tool } from "@modelcontextprotocol/sdk/types.js";
import { notion } from "../services/notion.js";

export const dataCompletionAssistantTool: Tool = {
  name: "assist_data_completion",
  description: "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ AI ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞",
  inputSchema: {
    type: "object",
    properties: {
      targetDatabase: {
        type: "string",
        enum: [
          "characters", "scenes", "locations", "worlds", "power_systems", 
          "arcanas", "missions", "ai_prompts", "story_timeline", 
          "story_arcs", "world_rules"
        ],
        description: "‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
      },
      assistanceType: {
        type: "string",
        enum: ["suggest_missing_data", "generate_templates", "create_sample_data", "fill_specific_field", "bulk_complete"],
        description: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
        default: "suggest_missing_data"
      },
      specificField: {
        type: "string",
        description: "‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ï‡∏¥‡∏° (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fill_specific_field)"
      },
      recordLimit: {
        type: "number",
        description: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•",
        default: 10,
        minimum: 1,
        maximum: 50
      },
      generateSamples: {
        type: "boolean",
        description: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á",
        default: true
      },
      useAshvalContext: {
        type: "boolean",
        description: "‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å Ashval ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        default: true
      }
    },
    required: ["targetDatabase"]
  }
};

export async function handleDataCompletionAssistance(args: any) {
  try {
    const dbConfig = getDatabaseConfig(args.targetDatabase);
    if (!dbConfig) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${args.targetDatabase}`);
    }

    let result = "";

    switch (args.assistanceType) {
      case "suggest_missing_data":
        result = await suggestMissingData(dbConfig, args);
        break;
      case "generate_templates":
        result = await generateTemplates(dbConfig, args);
        break;
      case "create_sample_data":
        result = await createSampleData(dbConfig, args);
        break;
      case "fill_specific_field":
        result = await fillSpecificField(dbConfig, args);
        break;
      case "bulk_complete":
        result = await bulkComplete(dbConfig, args);
        break;
    }

    return {
      content: [
        {
          type: "text",
          text: result
        }
      ]
    };

  } catch (error) {
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${error}`);
  }
}

function getDatabaseConfig(dbName: string): any {
  const configs: { [key: string]: any } = {
    characters: {
      name: "characters",
      displayName: "‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£",
      envVar: "NOTION_CHARACTERS_DB_ID",
      fields: {
        "Name": { type: "title", required: true, examples: ["Kael Shadowmend", "Luna Brightwing", "Thorne Ironheart"] },
        "Role": { type: "select", required: true, options: ["Protagonist", "Antagonist", "Supporting", "Minor"] },
        "Arc Status": { type: "select", required: false, options: ["Not Started", "Developing", "Complete"] },
        "Screen Time": { type: "select", required: false, options: ["Major", "Medium", "Minor"] },
        "Goal": { type: "rich_text", required: true, examples: ["‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡∏û‡πà‡∏≠", "‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏≠‡∏≤‡∏ì‡∏≤‡∏à‡∏±‡∏Å‡∏£‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢"] },
        "Personality": { type: "rich_text", required: true, examples: ["‡∏Å‡∏•‡πâ‡∏≤‡∏´‡∏≤‡∏ç‡πÅ‡∏ï‡πà‡πÉ‡∏à‡∏£‡πâ‡∏≠‡∏ô ‡∏°‡∏±‡∏Å‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ", "‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏Ç‡∏£‡∏∂‡∏° ‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏¥‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"] }
      }
    },
    scenes: {
      name: "scenes",
      displayName: "‡∏â‡∏≤‡∏á",
      envVar: "NOTION_SCENES_DB_ID",
      fields: {
        "Title": { type: "title", required: true, examples: ["‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å", "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á", "‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢"] },
        "Chapter": { type: "number", required: true, examples: [1, 2, 3] },
        "Order": { type: "number", required: true, examples: [1, 2, 3] },
        "Summary": { type: "rich_text", required: true, examples: ["Kael ‡πÑ‡∏î‡πâ‡∏û‡∏ö‡∏Å‡∏±‡∏ö Luna ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏õ‡πà‡∏≤‡∏•‡∏∂‡∏Å"] },
        "Purpose": { type: "rich_text", required: false, examples: ["‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏´‡∏•‡∏±‡∏Å", "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î"] },
        "Conflict": { type: "rich_text", required: false, examples: ["‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£"] },
        "Tone": { type: "select", required: false, options: ["‡∏°‡∏∑‡∏î‡∏°‡∏±‡∏ß", "‡∏ô‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ß", "‡∏´‡∏ß‡∏±‡∏á‡πÉ‡∏à", "‡πÄ‡∏®‡∏£‡πâ‡∏≤", "‡∏™‡∏á‡∏ö"] },
        "Emotional Arc": { type: "select", required: false, options: ["Rising", "Climax", "Falling", "Resolution"] },
        "Pacing": { type: "select", required: false, options: ["Very Slow", "Slow", "Medium", "Fast", "Very Fast"] }
      }
    },
    locations: {
      name: "locations",
      displayName: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà",
      envVar: "NOTION_LOCATIONS_DB_ID",
      fields: {
        "Name": { type: "title", required: true, examples: ["‡∏õ‡πà‡∏≤‡πÄ‡∏á‡∏≤‡∏î‡∏≥", "‡∏ô‡∏Ñ‡∏£‡πÅ‡∏™‡∏á‡πÄ‡∏á‡∏¥‡∏ô", "‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó‡∏•‡∏≠‡∏¢‡∏ü‡πâ‡∏≤"] },
        "Description": { type: "rich_text", required: true, examples: ["‡∏õ‡πà‡∏≤‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏ô‡∏ï‡πå‡∏î‡∏≥"] },
        "Type": { type: "select", required: false, options: ["City", "Forest", "Castle", "Dungeon", "Sacred Site"] }
      }
    },
    power_systems: {
      name: "power_systems",
      displayName: "‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏•‡∏±‡∏á",
      envVar: "NOTION_POWER_SYSTEMS_DB_ID",
      fields: {
        "Name": { type: "title", required: true, examples: ["Etheria Magic", "Umbra Arts", "Elemental Control"] },
        "Type": { type: "select", required: true, options: ["Etheria", "Umbra", "Hybrid"] },
        "Description": { type: "rich_text", required: true, examples: ["‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏´‡πà‡∏á‡πÅ‡∏™‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤"] }
      }
    }
  };

  return configs[dbName] || null;
}

async function suggestMissingData(dbConfig: any, args: any): Promise<string> {
  const dbId = process.env[dbConfig.envVar];
  if (!dbId) {
    return `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${dbConfig.displayName} ‡πÉ‡∏ô environment variables`;
  }

  try {
    const response = await (async function fetchDataSourceQuery(databaseId: string, pageSize: number) {
      const dbResponse = await notion.databases.retrieve({ database_id: databaseId });
      const dataSource = dbResponse.data_sources?.[0];
      if (!dataSource) {
        throw new Error(`No data source found for database ID: ${databaseId}`);
      }
      return await notion.request({
        path: `data_sources/${dataSource.id}/query`,
        method: 'post',
        body: { page_size: pageSize }
      }) as any;
    })(dbId, args.recordLimit);

    let result = `üîç **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${dbConfig.displayName}**\n\n`;

    if (response.results.length === 0) {
      result += `üìù **‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤!**\n`;
      result += generateSampleDataSuggestions(dbConfig, args);
      return result;
    }

    const missingDataAnalysis = analyzeMissingData(response.results, dbConfig);
    
    result += `üìä **‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ:**\n`;
    Object.entries(missingDataAnalysis.fieldStats).forEach(([field, stats]: [string, any]) => {
      const percentage = ((stats.missing / response.results.length) * 100).toFixed(1);
      const icon = stats.missing > 0 ? "üî¥" : "‚úÖ";
      result += `  ${icon} ${field}: ${stats.missing}/${response.results.length} ‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ (${percentage}%)\n`;
    });

    result += `\nüéØ **‡πÄ‡∏£‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à:**\n`;
    missingDataAnalysis.incompleteRecords.slice(0, 5).forEach((record: any, index: number) => {
      const title = getRecordTitle(record);
      result += `\n${index + 1}. **${title}**\n`;
      record.missingFields.forEach((field: string) => {
        const suggestion = generateFieldSuggestion(field, dbConfig, args.useAshvalContext);
        result += `   ‚Ä¢ ${field}: ${suggestion}\n`;
      });
    });

    if (args.generateSamples) {
      result += generateCompletionSuggestions(dbConfig, missingDataAnalysis, args);
    }

    return result;

  } catch (error) {
    return `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: ${error}`;
  }
}

async function generateTemplates(dbConfig: any, args: any): Promise<string> {
  let result = `üìã **Templates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${dbConfig.displayName}**\n\n`;

  result += `üîß **Template ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:**\n`;
  Object.entries(dbConfig.fields).forEach(([fieldName, fieldConfig]: [string, any]) => {
    result += `\n**${fieldName}** (${fieldConfig.type}):\n`;
    
    if (fieldConfig.required) {
      result += `  ‚ö†Ô∏è *‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô*\n`;
    }

    if (fieldConfig.options) {
      result += `  üìù ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${fieldConfig.options.join(", ")}\n`;
    }

    if (fieldConfig.examples) {
      result += `  üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ${fieldConfig.examples.join(", ")}\n`;
    }

    result += generateFieldTemplate(fieldName, fieldConfig, args.useAshvalContext);
  });

  result += `\n\nüìù **‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**\n`;
  result += generateCompletionGuide(dbConfig, args.useAshvalContext);

  return result;
}

async function createSampleData(dbConfig: any, args: any): Promise<string> {
  let result = `üé≤ **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${dbConfig.displayName}**\n\n`;

  const sampleCount = Math.min(args.recordLimit, 5);
  
  for (let i = 1; i <= sampleCount; i++) {
    result += `üìÑ **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà ${i}:**\n`;
    
    Object.entries(dbConfig.fields).forEach(([fieldName, fieldConfig]: [string, any]) => {
      const sampleValue = generateSampleValue(fieldName, fieldConfig, i, args.useAshvalContext);
      result += `  ‚Ä¢ ${fieldName}: ${sampleValue}\n`;
    });
    
    result += `\n`;
  }

  result += `üí° **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:**\n`;
  result += `1. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£\n`;
  result += `2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n`;
  result += `3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£\n`;

  return result;
}

async function fillSpecificField(dbConfig: any, args: any): Promise<string> {
  if (!args.specificField) {
    return `‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`;
  }

  const fieldConfig = dbConfig.fields[args.specificField];
  if (!fieldConfig) {
    return `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå "${args.specificField}" ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${dbConfig.displayName}`;
  }

  const dbId = process.env[dbConfig.envVar];
  if (!dbId) {
    return `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${dbConfig.displayName}`;
  }

  try {
    const response = await (async function fetchDataSourceQuery(databaseId: string, pageSize: number) {
      const dbResponse = await notion.databases.retrieve({ database_id: databaseId });
      const dataSource = dbResponse.data_sources?.[0];
      if (!dataSource) {
        throw new Error(`No data source found for database ID: ${databaseId}`);
      }
      return await notion.request({
        path: `data_sources/${dataSource.id}/query`,
        method: 'post',
        body: { page_size: pageSize }
      }) as any;
    })(dbId, args.recordLimit);

    let result = `üéØ **‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏•‡∏î‡πå "${args.specificField}" ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${dbConfig.displayName}**\n\n`;

    const recordsNeedingField = response.results.filter(record => {
      if ('properties' in record) {
        return isFieldEmpty(record.properties[args.specificField], fieldConfig.type);
      }
      return false;
    });

    if (recordsNeedingField.length === 0) {
      result += `‚úÖ ‡∏ü‡∏¥‡∏•‡∏î‡πå "${args.specificField}" ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏£‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏•‡πâ‡∏ß\n`;
      return result;
    }

    result += `üìä **‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:** ${recordsNeedingField.length}/${response.results.length} ‡πÄ‡∏£‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ\n\n`;

    result += `üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**\n`;
    recordsNeedingField.slice(0, 10).forEach((record: any, index: number) => {
      const title = getRecordTitle(record);
      const suggestion = generateContextualSuggestion(args.specificField, fieldConfig, record, args.useAshvalContext);
      result += `\n${index + 1}. **${title}**\n`;
      result += `   üí≠ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ${suggestion}\n`;
    });

    return result;

  } catch (error) {
    return `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error}`;
  }
}

async function bulkComplete(dbConfig: any, args: any): Promise<string> {
  let result = `üöÄ **‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Bulk ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${dbConfig.displayName}**\n\n`;

  const dbId = process.env[dbConfig.envVar];
  if (!dbId) {
    return `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${dbConfig.displayName}`;
  }

  try {
    const dbResponse = await notion.databases.retrieve({ database_id: dbId });
    const dataSource = dbResponse.data_sources?.[0];
    if (!dataSource) {
      throw new Error(`No data source found for database ID: ${dbId}`);
    }
    const response = await notion.request({
        path: `data_sources/${dataSource.id}/query`,
        method: 'post',
        body: { page_size: args.recordLimit }
    }) as any;

    if (response.results.length === 0) {
      result += generateSampleDataSuggestions(dbConfig, args);
      return result;
    }

    const analysisResult = analyzeMissingData(response.results, dbConfig);
    
    result += `üìä **‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ:**\n`;
    result += `  ‚Ä¢ ‡πÄ‡∏£‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${response.results.length}\n`;
    result += `  ‚Ä¢ ‡πÄ‡∏£‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: ${analysisResult.incompleteRecords.length}\n`;
    result += `  ‚Ä¢ ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: ${analysisResult.mostMissingField}\n\n`;

    result += `üéØ **‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô:**\n\n`;

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const fieldPriority = Object.entries(analysisResult.fieldStats)
      .sort(([,a], [,b]) => (b as any).missing - (a as any).missing)
      .slice(0, 5);

    fieldPriority.forEach(([fieldName, stats]: [string, any], index: number) => {
      if (stats.missing > 0) {
        result += `**‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${index + 1}: ‡πÄ‡∏ï‡∏¥‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå "${fieldName}"**\n`;
        result += `  üìä ‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: ${stats.missing} ‡πÄ‡∏£‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏î\n`;
        result += `  üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£: ${generateBulkSuggestion(fieldName, dbConfig.fields[fieldName], args.useAshvalContext)}\n\n`;
      }
    });

    result += `üîß **‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:**\n`;
    result += `  ‚Ä¢ ‡πÉ‡∏ä‡πâ AI Prompt Generator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n`;
    result += `  ‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á Templates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô\n`;
    result += `  ‚Ä¢ ‡πÉ‡∏ä‡πâ Bulk Edit ‡πÉ‡∏ô Notion ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô\n`;

    return result;

  } catch (error) {
    return `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error}`;
  }
}

function analyzeMissingData(records: any[], dbConfig: any): any {
  const fieldStats: { [field: string]: { missing: number, total: number } } = {};
  const incompleteRecords: any[] = [];

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  Object.keys(dbConfig.fields).forEach(field => {
    fieldStats[field] = { missing: 0, total: records.length };
  });

  records.forEach(record => {
    const missingFields: string[] = [];

    if ('properties' in record) {
      Object.entries(dbConfig.fields).forEach(([fieldName, fieldConfig]: [string, any]) => {
        if (isFieldEmpty(record.properties[fieldName], fieldConfig.type)) {
          fieldStats[fieldName].missing++;
          missingFields.push(fieldName);
        }
      });
    }

    if (missingFields.length > 0) {
      incompleteRecords.push({
        record,
        missingFields,
        missingCount: missingFields.length
      });
    }
  });

  // ‡∏´‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  const mostMissingField = Object.entries(fieldStats)
    .sort(([,a], [,b]) => b.missing - a.missing)[0]?.[0] || "‡πÑ‡∏°‡πà‡∏°‡∏µ";

  return {
    fieldStats,
    incompleteRecords: incompleteRecords.sort((a, b) => b.missingCount - a.missingCount),
    mostMissingField
  };
}

function isFieldEmpty(property: any, fieldType: string): boolean {
  if (!property) return true;

  switch (fieldType) {
    case "title":
      return !property.title || property.title.length === 0 || !property.title[0]?.text?.content;
    case "rich_text":
      return !property.rich_text || property.rich_text.length === 0 || !property.rich_text[0]?.text?.content;
    case "select":
      return !property.select || !property.select.name;
    case "number":
      return property.number === null || property.number === undefined;
    default:
      return true;
  }
}

function getRecordTitle(record: any): string {
  // ‡∏•‡∏≠‡∏á‡∏´‡∏≤ title field
  if ('properties' in record) {
    for (const [key, prop] of Object.entries(record.properties)) {
      if ((prop as any).type === "title" && (prop as any).title?.[0]?.text?.content) {
        return (prop as any).title[0].text.content;
      }
    }
  }
  return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠";
}

function generateFieldSuggestion(fieldName: string, dbConfig: any, useAshvalContext: boolean): string {
  const fieldConfig = dbConfig.fields[fieldName];
  
  if (fieldConfig.examples) {
    return `‡πÄ‡∏ä‡πà‡∏ô "${fieldConfig.examples[0]}"`;
  }

  if (useAshvalContext) {
    return generateAshvalContextSuggestion(fieldName, dbConfig.name);
  }

  return `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•${fieldConfig.required ? " (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)" : ""}`;
}

function generateAshvalContextSuggestion(fieldName: string, dbType: string): string {
  const ashvalSuggestions: { [key: string]: { [field: string]: string } } = {
    characters: {
      "Goal": "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Etheria/Umbra magic",
      "Personality": "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Etheria ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏à‡πÄ‡∏°‡∏ï‡∏ï‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Umbra ‡∏ó‡∏µ‡πà‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö",
      "Role": "‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡πÇ‡∏•‡∏Å Ashval"
    },
    scenes: {
      "Summary": "‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Etheria ‡πÅ‡∏•‡∏∞ Umbra",
      "Purpose": "‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏™‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏≤",
      "Conflict": "‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å Ashval"
    },
    locations: {
      "Description": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏•‡∏±‡∏á Etheria ‡∏´‡∏£‡∏∑‡∏≠ Umbra",
      "Type": "Sacred Site ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏≤‡∏¢‡∏≤‡∏Å‡∏•"
    }
  };

  return ashvalSuggestions[dbType]?.[fieldName] || "‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡πÇ‡∏•‡∏Å Ashval";
}

function generateSampleValue(fieldName: string, fieldConfig: any, index: number, useAshvalContext: boolean): string {
  if (fieldConfig.examples && fieldConfig.examples[index - 1]) {
    return fieldConfig.examples[index - 1];
  }

  if (fieldConfig.options) {
    return fieldConfig.options[0];
  }

  if (fieldConfig.type === "number") {
    return `${index}`;
  }

  if (useAshvalContext) {
    return generateAshvalContextSuggestion(fieldName, "general");
  }

  return `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á${index}`;
}

function generateFieldTemplate(fieldName: string, fieldConfig: any, useAshvalContext: boolean): string {
  let template = "";

  switch (fieldConfig.type) {
    case "title":
      template = `  üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: [‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏î‡∏à‡∏≥‡∏á‡πà‡∏≤‡∏¢]\n`;
      break;
    case "rich_text":
      template = `  üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: [‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î 2-3 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ]\n`;
      break;
    case "select":
      template = `  üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î\n`;
      break;
    case "number":
      template = `  üìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: [‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç]\n`;
      break;
  }

  if (useAshvalContext) {
    template += `  üåü ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö Ashval: ${generateAshvalTip(fieldName)}\n`;
  }

  return template;
}

function generateAshvalTip(fieldName: string): string {
  const tips: { [key: string]: string } = {
    "Name": "‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏û‡∏•‡∏±‡∏á Etheria (‡πÅ‡∏™‡∏á) ‡∏´‡∏£‡∏∑‡∏≠ Umbra (‡πÄ‡∏á‡∏≤)",
    "Goal": "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏™‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏≤",
    "Personality": "‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏≠‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏•‡∏Ç‡∏≠‡∏á Etheria/Umbra ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£",
    "Summary": "‡∏£‡∏ß‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏≤‡∏¢‡∏≤‡∏Å‡∏•‡πÉ‡∏ô‡∏â‡∏≤‡∏á",
    "Description": "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÇ‡∏•‡∏Å Ashval ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£"
  };

  return tips[fieldName] || "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ò‡∏µ‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å Ashval";
}

function generateCompletionGuide(dbConfig: any, useAshvalContext: boolean): string {
  let guide = "";

  guide += `1. **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô**: `;
  const requiredFields = Object.entries(dbConfig.fields)
    .filter(([_, config]: [string, any]) => config.required)
    .map(([name, _]) => name);
  guide += requiredFields.join(", ") + "\n";

  guide += `2. **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î**: ‡πÄ‡∏ï‡∏¥‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå\n`;

  if (useAshvalContext) {
    guide += `3. **‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó Ashval**: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Etheria/Umbra\n`;
    guide += `4. **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á**: ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏•‡∏Å‡∏Ç‡∏≠‡∏á Ashval\n`;
  }

  return guide;
}

function generateContextualSuggestion(fieldName: string, fieldConfig: any, record: any, useAshvalContext: boolean): string {
  const recordTitle = getRecordTitle(record);
  
  if (useAshvalContext) {
    return `‡πÄ‡∏ï‡∏¥‡∏°${fieldName}‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö "${recordTitle}" ‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å Ashval`;
  }

  if (fieldConfig.examples) {
    return `‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ä‡πà‡∏ô "${fieldConfig.examples[0]}"`;
  }

  return `‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•${fieldName}‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö "${recordTitle}"`;
}

function generateBulkSuggestion(fieldName: string, fieldConfig: any, useAshvalContext: boolean): string {
  if (fieldConfig.options) {
    return `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${fieldConfig.options.join(", ")}`;
  }

  if (useAshvalContext) {
    return `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ò‡∏µ‡∏° Ashval`;
  }

  return `‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö batch ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô`;
}

function generateSampleDataSuggestions(dbConfig: any, args: any): string {
  let result = `üí° **‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏∞‡πÅ‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á:**\n\n`;

  result += `üìù **‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:**\n`;
  result += `1. ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠ "create_sample_data" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á\n`;
  result += `2. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏° 3-5 ‡πÄ‡∏£‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô\n`;
  result += `3. ‡πÉ‡∏ä‡πâ AI Prompt Generator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤\n\n`;

  if (args.useAshvalContext) {
    result += `üåü **‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏•‡∏Å Ashval:**\n`;
    result += generateAshvalStarterContent(dbConfig.name);
  }

  return result;
}

function generateAshvalStarterContent(dbType: string): string {
  const starterContent: { [key: string]: string } = {
    characters: `‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏´‡∏•‡∏±‡∏Å 1 ‡∏Ñ‡∏ô (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Etheria)
‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏£‡πâ‡∏≤‡∏¢ 1 ‡∏Ñ‡∏ô (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Umbra)  
‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢ 2-3 ‡∏Ñ‡∏ô
‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ù‡πà‡∏≤‡∏¢`,
    
    scenes: `‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏â‡∏≤‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÇ‡∏•‡∏Å Ashval)
‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏â‡∏≤‡∏Å‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å (Etheria vs Umbra)
‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏â‡∏≤‡∏Å‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏â‡∏≤‡∏Å‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢`,
    
    locations: `‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Etheria
‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏ô‡∏°‡∏∑‡∏î‡∏Ç‡∏≠‡∏á Umbra
‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á
‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö`
  };

  return starterContent[dbType] || "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏•‡∏Å Ashval";
}

function generateCompletionSuggestions(dbConfig: any, analysisResult: any, args: any): string {
  let suggestions = `\n\nüí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**\n\n`;

  // ‡∏´‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  const topMissingFields = Object.entries(analysisResult.fieldStats)
    .sort(([,a], [,b]) => (b as any).missing - (a as any).missing)
    .slice(0, 3);

  suggestions += `üéØ **‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:**\n`;
  topMissingFields.forEach(([field, stats]: [string, any], index: number) => {
    if (stats.missing > 0) {
      suggestions += `${index + 1}. ‡πÄ‡∏ï‡∏¥‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå "${field}" (‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ${stats.missing} ‡πÄ‡∏£‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏î)\n`;
    }
  });

  if (args.useAshvalContext) {
    suggestions += `\nüåü **‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö Ashval:**\n`;
    suggestions += `‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏ò‡∏µ‡∏°‡πÅ‡∏™‡∏á-‡πÄ‡∏á‡∏≤ ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n`;
    suggestions += `‚Ä¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Etheria/Umbra\n`;
    suggestions += `‚Ä¢ ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å\n`;
  }

  return suggestions;
}
