/**
 * Semantic Search MCP Tool
 * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏ö‡∏ö semantic ‡πÉ‡∏ô Ashval content
 */

import { Tool, CallToolResult } from "@modelcontextprotocol/sdk/types.js";
import { vectorSearchService } from "../services/vectorSearchService.js";

// Simple error handler for now
const handleNotionError = (error: any): CallToolResult => {
  return {
    content: [{
      type: "text",
      text: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message || error.toString()}`
    }]
  };
};

export const semanticSearchTool: Tool = {
  name: "semantic_search",
  description: "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏ö‡∏ö semantic ‡πÉ‡∏ô Ashval databases (‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£, ‡∏â‡∏≤‡∏Å, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢",
  inputSchema: {
    type: "object",
    properties: {
      query: {
        type: "string",
        description: "‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô '‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡∏°‡∏∑‡∏î', '‡∏â‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô')"
      },
      contentTypes: {
        type: "array",
        items: {
          type: "string",
          enum: ["characters", "scenes", "locations", "world_rules", "story_arcs"]
        },
        description: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
        default: ["characters", "scenes", "locations"]
      },
      limit: {
        type: "number",
        description: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
        default: 10,
        minimum: 1,
        maximum: 50
      },
      minSimilarity: {
        type: "number",
        description: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (0-1)",
        default: 0.5,
        minimum: 0,
        maximum: 1
      }
    },
    required: ["query"]
  }
};

export const findSimilarContentTool: Tool = {
  name: "find_similar_content",
  description: "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö character, scene ‡∏´‡∏£‡∏∑‡∏≠ location ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏",
  inputSchema: {
    type: "object",
    properties: {
      referenceId: {
        type: "string",
        description: "ID ‡∏Ç‡∏≠‡∏á page ‡πÉ‡∏ô Notion ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á"
      },
      contentType: {
        type: "string",
        enum: ["character", "scene", "location"],
        description: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á"
      },
      limit: {
        type: "number",
        description: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
        default: 5,
        minimum: 1,
        maximum: 20
      }
    },
    required: ["referenceId", "contentType"]
  }
};

export const getContentRecommendationsTool: Tool = {
  name: "get_content_recommendations",
  description: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô",
  inputSchema: {
    type: "object",
    properties: {
      currentContent: {
        type: "string",
        description: "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
      },
      recommendationType: {
        type: "string",
        enum: ["character", "scene", "location"],
        description: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
        default: "scene"
      },
      limit: {
        type: "number",
        description: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
        default: 5,
        minimum: 1,
        maximum: 15
      }
    },
    required: ["currentContent"]
  }
};

export const detectPlotHolesTool: Tool = {
  name: "detect_plot_holes",
  description: "‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤",
  inputSchema: {
    type: "object",
    properties: {
      projectId: {
        type: "string",
        description: "ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
        default: null
      },
      analysisDepth: {
        type: "string",
        enum: ["basic", "detailed", "comprehensive"],
        description: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå",
        default: "basic"
      }
    },
    required: []
  }
};

// Tool handlers
export async function handleSemanticSearch(args: any): Promise<CallToolResult> {
  try {
    const { query, contentTypes = ["characters", "scenes", "locations"], limit = 10, minSimilarity = 0.5 } = args;

    // Initialize vector service
    await vectorSearchService.initialize();

    // Perform semantic search
    const results = await vectorSearchService.semanticSearch(query, contentTypes, limit);

    // Check if this is a demo result (ChromaDB not installed)
    if (results.length === 1 && results[0].id === 'demo-result') {
      return {
        content: [{
          type: "text",
          text: `üîß **Vector Search Demo Mode**\n\n` +
                `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ \`semantic_search\` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: "${query}"\n\n` +
                `‚ö†Ô∏è **ChromaDB ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á** - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• demo\n\n` +
                `üöÄ **‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Vector Search**:\n` +
                `1. ‡∏£‡∏±‡∏ô: \`./scripts/install-enhancements.sh\`\n` +
                `2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: \`CHROMADB_URL=http://localhost:8000\` ‡πÉ‡∏ô .env\n` +
                `3. ‡πÄ‡∏£‡∏¥‡πà‡∏° ChromaDB: \`docker run -p 8000:8000 chromadb/chroma\`\n` +
                `4. ‡∏£‡∏±‡∏ô: \`npm run build && npm run dev-mcp-only\`\n\n` +
                `‚ú® **‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß** ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:\n` +
                `- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏ö‡∏ö semantic (‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢)\n` +
                `- ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£/‡∏â‡∏≤‡∏á/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô\n` +
                `- ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n` +
                `- ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á`
        }]
      };
    }

    // Filter by minimum similarity
    const filteredResults = results.filter(r => r.similarity >= minSimilarity);

    if (filteredResults.length === 0) {
      return {
        content: [{
          type: "text",
          text: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö "${query}" ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ >= ${minSimilarity}\n\n‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n- ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô\n- ‡∏•‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö minSimilarity\n- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà`
        }]
      };
    }

    // Format results (rest of the function remains the same)
    let response = `üîç **‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ semantic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö**: "${query}"\n`;
    response += `üìä **‡∏û‡∏ö ${filteredResults.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£** (‡∏à‡∏≤‡∏Å ${results.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)\n\n`;

    filteredResults.forEach((result, index) => {
      const similarityPercent = Math.round(result.similarity * 100);
      const typeEmoji = {
        characters: "üë§",
        scenes: "üé¨", 
        locations: "üìç",
        world_rules: "‚öñÔ∏è",
        story_arcs: "üìö"
      }[result.type] || "üìÑ";

      response += `${index + 1}. ${typeEmoji} **${result.metadata.name || result.metadata.title || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'}**\n`;
      response += `   üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢: ${similarityPercent}%\n`;
      response += `   üìù ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${result.type}\n`;
      response += `   üÜî ID: \`${result.id}\`\n`;
      
      // Show relevant metadata
      if (result.metadata.characters && result.metadata.characters.length > 0) {
        response += `   üë• ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: ${result.metadata.characters.join(', ')}\n`;
      }
      if (result.metadata.location) {
        response += `   üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${result.metadata.location}\n`;
      }
      
      // Show content preview (first 150 characters)
      const preview = result.content.length > 150 
        ? result.content.substring(0, 150) + "..." 
        : result.content;
      response += `   üìñ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: ${preview}\n\n`;
    });

    // Add usage tips
    response += `üí° **‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**:\n`;
    response += `- ‡πÉ‡∏ä‡πâ \`find_similar_content\` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö page ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà\n`;
    response += `- ‡πÉ‡∏ä‡πâ \`get_content_recommendations\` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô\n`;
    response += `- ‡∏õ‡∏£‡∏±‡∏ö \`minSimilarity\` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå`;

    return {
      content: [{
        type: "text",
        text: response
      }]
    };

  } catch (error) {
    return handleNotionError(error);
  }
}

export async function handleFindSimilarContent(args: any): Promise<CallToolResult> {
  try {
    const { referenceId, contentType, limit = 5 } = args;

    await vectorSearchService.initialize();

    let results;
    if (contentType === "character") {
      results = await vectorSearchService.findSimilarCharacters(referenceId, limit);
    } else {
      // For scenes and locations, use semantic search with the reference content
      const referenceContent = await vectorSearchService.semanticSearch(
        referenceId, 
        [contentType === "scene" ? "scenes" : "locations"], 
        1
      );
      
      if (referenceContent.length === 0) {
        return {
          content: [{
            type: "text",
            text: `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ ID: ${referenceId}`
          }]
        };
      }

      results = await vectorSearchService.semanticSearch(
        referenceContent[0].content,
        [contentType === "scene" ? "scenes" : "locations"],
        limit + 1
      );
      
      // Remove the reference item from results
      results = results.filter(r => r.id !== referenceId).slice(0, limit);
    }

    if (results.length === 0) {
      return {
        content: [{
          type: "text",
          text: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö ${contentType} ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏\n\n‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤:\n- ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß\n- ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ${contentType} ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n- ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ index ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°`
        }]
      };
    }

    const typeText = contentType === "character" ? "‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£" : 
                     contentType === "scene" ? "‡∏â‡∏≤‡∏Å" : "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà";

    let response = `üîó **${typeText}‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô** (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å ID: \`${referenceId}\`)\n\n`;

    results.forEach((result, index) => {
      const similarityPercent = Math.round(result.similarity * 100);
      response += `${index + 1}. **${result.metadata.name || result.metadata.title || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'}**\n`;
      response += `   üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢: ${similarityPercent}%\n`;
      response += `   üÜî ID: \`${result.id}\`\n`;
      
      const preview = result.content.length > 100 
        ? result.content.substring(0, 100) + "..." 
        : result.content;
      response += `   üìù ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: ${preview}\n\n`;
    });

    return {
      content: [{
        type: "text",
        text: response
      }]
    };

  } catch (error) {
    return handleNotionError(error);
  }
}

export async function handleGetContentRecommendations(args: any): Promise<CallToolResult> {
  try {
    const { currentContent, recommendationType = "scene", limit = 5 } = args;

    await vectorSearchService.initialize();

    const recommendations = await vectorSearchService.getContentRecommendations(
      currentContent, 
      recommendationType, 
      limit
    );

    if (recommendations.length === 0) {
      return {
        content: [{
          type: "text",
          text: `üí° **‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á**\n\n‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤:\n- ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏™‡∏π‡∏á\n- ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ${recommendationType === "character" ? "‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£" : recommendationType === "scene" ? "‡∏â‡∏≤‡∏Å" : "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"}‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n- ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô`
        }]
      };
    }

    const typeText = recommendationType === "character" ? "‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£" : 
                     recommendationType === "scene" ? "‡∏â‡∏≤‡∏Å" : "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà";

    let response = `üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥${typeText}** ‡∏ï‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:\n\n`;
    response += `üìù **‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á**: ${currentContent.substring(0, 200)}${currentContent.length > 200 ? "..." : ""}\n\n`;

    recommendations.forEach((rec, index) => {
      const similarityPercent = Math.round(rec.similarity * 100);
      response += `${index + 1}. **${rec.metadata.name || rec.metadata.title || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'}**\n`;
      response += `   üéØ ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á: ${similarityPercent}%\n`;
      response += `   üÜî ID: \`${rec.id}\`\n`;
      
      if (rec.metadata.characters && rec.metadata.characters.length > 0) {
        response += `   üë• ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£: ${rec.metadata.characters.join(', ')}\n`;
      }
      
      const preview = rec.content.length > 120 
        ? rec.content.substring(0, 120) + "..." 
        : rec.content;
      response += `   üìù ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: ${preview}\n\n`;
    });

    response += `üí° **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**:\n`;
    response += `- ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏ô Notion\n`;
    response += `- ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà\n`;
    response += `- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å`;

    return {
      content: [{
        type: "text",
        text: response
      }]
    };

  } catch (error) {
    return handleNotionError(error);
  }
}

export async function handleDetectPlotHoles(args: any): Promise<CallToolResult> {
  try {
    const { projectId, analysisDepth = "basic" } = args;

    await vectorSearchService.initialize();

    const potentialIssues = await vectorSearchService.findPotentialPlotHoles(projectId);

    if (potentialIssues.length === 0) {
      return {
        content: [{
          type: "text",
          text: `‚úÖ **‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô**\n\n‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö ${analysisDepth} ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î\n\nüí° **‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**:\n- ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ \`analysisDepth: "detailed"\` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô\n- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö timeline ‡πÅ‡∏•‡∏∞ character development ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å\n- ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏ä‡πâ \`timeline_analyzer\` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå`
        }]
      };
    }

    let response = `üîç **‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á** (‡∏£‡∏∞‡∏î‡∏±‡∏ö: ${analysisDepth})\n\n`;
    response += `‚ö†Ô∏è **‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤**: ${potentialIssues.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n`;

    potentialIssues.forEach((issue, index) => {
      const confidencePercent = Math.round(issue.similarity * 100);
      response += `${index + 1}. **${issue.metadata.title || '‡∏â‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'}**\n`;
      response += `   üéØ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ${confidencePercent}%\n`;
      response += `   üÜî ID: \`${issue.id}\`\n`;
      
      if (issue.metadata.characters && issue.metadata.characters.length > 0) {
        response += `   üë• ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á: ${issue.metadata.characters.join(', ')}\n`;
      }
      
      if (issue.metadata.location) {
        response += `   üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${issue.metadata.location}\n`;
      }
      
      const preview = issue.content.length > 100 
        ? issue.content.substring(0, 100) + "..." 
        : issue.content;
      response += `   üìù ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: ${preview}\n\n`;
    });

    response += `üîß **‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç**:\n`;
    response += `- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö scenes ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà\n`;
    response += `- ‡πÉ‡∏ä‡πâ \`timeline_analyzer\` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå\n`;
    response += `- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö character consistency ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ scene\n`;
    response += `- ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏ä‡πâ \`story_arc_analyzer\` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á`;

    return {
      content: [{
        type: "text",
        text: response
      }]
    };

  } catch (error) {
    return handleNotionError(error);
  }
}