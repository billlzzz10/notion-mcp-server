import { Tool } from "@modelcontextprotocol/sdk/types.js";
import { notion } from "../services/notion.js";

export const advancedPromptGeneratorTool: Tool = {
  name: "generate_advanced_prompt",
  description: "‡∏™‡∏£‡πâ‡∏≤‡∏á AI Prompt ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô Ashval",
  inputSchema: {
    type: "object",
    properties: {
      promptType: {
        type: "string",
        enum: ["combat_scene", "dialogue", "location_description", "character_introspection", "world_building", "plot_advancement", "emotional_scene", "mystery_revelation"],
        description: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Prompt ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
      },
      sceneContext: {
        type: "string",
        description: "‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á‡∏â‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á"
      },
      charactersInvolved: {
        type: "array",
        items: { type: "string" },
        description: "‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á"
      },
      location: {
        type: "string",
        description: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏"
      },
      moodTone: {
        type: "string",
        enum: ["‡∏°‡∏∑‡∏î‡∏°‡∏±‡∏ß", "‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö", "‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î", "‡πÄ‡∏®‡∏£‡πâ‡∏≤", "‡∏´‡∏ß‡∏±‡∏á‡πÉ‡∏à", "‡∏ô‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ß", "‡∏™‡∏á‡∏ö"],
        description: "‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ó‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏≤‡∏Å"
      },
      complexity: {
        type: "string",
        enum: ["simple", "medium", "complex", "very_complex"],
        description: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô"
      },
      targetLength: {
        type: "string",
        enum: ["short", "medium", "long", "very_long"],
        description: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
      },
      includeWorldRules: {
        type: "boolean",
        description: "‡∏£‡∏ß‡∏°‡∏Å‡∏é‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å‡πÉ‡∏ô Prompt",
        default: true
      },
      customInstructions: {
        type: "string",
        description: "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"
      }
    },
    required: ["promptType", "sceneContext", "moodTone"]
  }
};

export async function handleAdvancedPromptGeneration(args: any) {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const contextData = await gatherContextData(args);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á
    const prompt = await generateSpecializedPrompt(args, contextData);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Prompt ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await saveAdvancedPrompt(prompt, args);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    const additionalTips = generatePromptTips(args.promptType);

    return {
      content: [
        {
          type: "text",
          text: `üéØ **Advanced AI Prompt - ${args.promptType}:**\n\n\`\`\`\n${prompt}\n\`\`\`\n\n${additionalTips}\n\nüí° **‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:** ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å prompt ‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Gemini AI ‡∏´‡∏£‡∏∑‡∏≠ AI ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á`
        }
      ]
    };

  } catch (error) {
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Advanced Prompt ‡πÑ‡∏î‡πâ: ${error}`);
  }
}

async function gatherContextData(args: any) {
  const contextData: any = {
    characters: [],
    location: null,
    worldRules: [],
    relatedScenes: []
  };

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
  if (args.charactersInvolved && args.charactersInvolved.length > 0) {
    const charactersDb = process.env.NOTION_CHARACTERS_DB_ID;
    if (charactersDb) {
      const dbResponse = await notion.databases.retrieve({ database_id: charactersDb });
      const dataSource = dbResponse.data_sources?.[0];
      if (!dataSource) {
        throw new Error(`No data source found for Characters DB: ${charactersDb}`);
      }
      for (const charName of args.charactersInvolved) {
        try {
          const response = await notion.dataSources.query({
            data_source_id: dataSource.id,
            filter: {
              property: "Name",
              title: {
                contains: charName
              }
            }
          });

          if (response.results.length > 0) {
            const char = response.results[0] as any;
            const props = char.properties;
            
            contextData.characters.push({
              name: props.Name?.title?.[0]?.text?.content || charName,
              nickname: props.Nickname?.rich_text?.[0]?.text?.content || "",
              personality: props.Personality?.rich_text?.[0]?.text?.content || "",
              abilities: props.Abilities?.rich_text?.[0]?.text?.content || "",
              goal: props.Goal?.rich_text?.[0]?.text?.content || "",
              background: props.Background?.rich_text?.[0]?.text?.content || ""
            });
          }
        } catch (error) {
          console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ ${charName}:`, error);
        }
      }
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
  if (args.location) {
    const locationsDb = process.env.NOTION_LOCATIONS_DB_ID;
    if (locationsDb) {
      try {
        const dbResponse = await notion.databases.retrieve({ database_id: locationsDb });
        const dataSource = dbResponse.data_sources?.[0];
        if (!dataSource) {
          throw new Error(`No data source found for Locations DB: ${locationsDb}`);
        }
        const response = await notion.dataSources.query({
          data_source_id: dataSource.id,
          filter: {
            property: "Name",
            title: {
              contains: args.location
            }
          }
        });

        if (response.results.length > 0) {
          const loc = response.results[0] as any;
          const props = loc.properties;
          
          contextData.location = {
            name: props.Name?.title?.[0]?.text?.content || args.location,
            description: props.Description?.rich_text?.[0]?.text?.content || "",
            atmosphere: props.Atmosphere?.select?.name || "",
            type: props.Type?.select?.name || "",
            importance: props.Importance?.number || 5
          };
        }
      } catch (error) {
        console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ${args.location}:`, error);
      }
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Å‡∏é‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
  if (args.includeWorldRules) {
    const worldRulesDb = process.env.NOTION_WORLD_RULES_DB_ID;
    if (worldRulesDb) {
      try {
        const dbResponse = await notion.databases.retrieve({ database_id: worldRulesDb });
        const dataSource = dbResponse.data_sources?.[0];
        if (!dataSource) {
          throw new Error(`No data source found for World Rules DB: ${worldRulesDb}`);
        }
        const response = await notion.dataSources.query({
          data_source_id: dataSource.id,
          filter: {
            and: [
              {
                property: "Status",
                select: {
                  equals: "Active"
                }
              },
              {
                or: [
                  {
                    property: "Priority",
                    select: {
                      equals: "Core"
                    }
                  },
                  {
                    property: "Priority",
                    select: {
                      equals: "Important"
                    }
                  }
                ]
              }
            ]
          }
        });

        response.results.forEach((rule: any) => {
          const props = rule.properties;
          contextData.worldRules.push({
            name: props["Rule Name"]?.title?.[0]?.text?.content || "",
            description: props.Description?.rich_text?.[0]?.text?.content || "",
            category: props.Category?.select?.name || ""
          });
        });
      } catch (error) {
        console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Å‡∏é‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å:", error);
      }
    }
  }

  return contextData;
}

async function generateSpecializedPrompt(args: any, contextData: any): Promise<string> {
  let prompt = "";

  // Header ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å Prompt
  prompt += `‡∏™‡∏£‡πâ‡∏≤‡∏á${getPromptTypeInThai(args.promptType)}‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏•‡∏Å Ashval ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:\n\n`;
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏ö‡∏ó
  prompt += `**‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏â‡∏≤‡∏á:** ${args.sceneContext}\n`;
  prompt += `**‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ó‡∏ô:** ${args.moodTone}\n`;
  prompt += `**‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô:** ${translateComplexity(args.complexity)}\n`;
  prompt += `**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:** ${translateLength(args.targetLength)}\n\n`;

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
  if (contextData.characters.length > 0) {
    prompt += `**‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:**\n`;
    contextData.characters.forEach((char: any, index: number) => {
      prompt += `${index + 1}. **${char.name}**${char.nickname ? ` (${char.nickname})` : ""}\n`;
      if (char.personality) prompt += `   - ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å: ${char.personality}\n`;
      if (char.abilities) prompt += `   - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ: ${char.abilities}\n`;
      if (char.goal) prompt += `   - ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${char.goal}\n`;
    });
    prompt += "\n";
  }

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
  if (contextData.location) {
    prompt += `**‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:** ${contextData.location.name}\n`;
    if (contextData.location.description) prompt += `**‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:** ${contextData.location.description}\n`;
    if (contextData.location.atmosphere) prompt += `**‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®:** ${contextData.location.atmosphere}\n`;
    prompt += "\n";
  }

  // ‡∏Å‡∏é‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å
  if (contextData.worldRules.length > 0) {
    prompt += `**‡∏Å‡∏é‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å Ashval:**\n`;
    contextData.worldRules.forEach((rule: any, index: number) => {
      prompt += `${index + 1}. ${rule.name}: ${rule.description}\n`;
    });
    prompt += "\n";
  }

  // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  prompt += getSpecificInstructions(args.promptType);

  // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ashval
  prompt += `\n**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:**\n`;
  prompt += `- ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÅ‡∏ô‡∏ß Dark Fantasy\n`;
  prompt += `- ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏•‡∏Å Ashval ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏≤‡∏ô‡∏≤\n`;
  prompt += `- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®${args.moodTone}‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô\n`;
  prompt += `- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Arcana ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏°‡∏≤\n`;
  prompt += `- ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ\n`;
  
  if (args.customInstructions) {
    prompt += `\n**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:** ${args.customInstructions}\n`;
  }

  return prompt;
}

function getPromptTypeInThai(type: string): string {
  const typeMap = {
    "combat_scene": "‡∏â‡∏≤‡∏Å‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ",
    "dialogue": "‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤",
    "location_description": "‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà",
    "character_introspection": "‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏∏‡πà‡∏ô‡∏Ñ‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£",
    "world_building": "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏•‡∏Å",
    "plot_advancement": "‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á",
    "emotional_scene": "‡∏â‡∏≤‡∏Å‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå",
    "mystery_revelation": "‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö"
  };
  return typeMap[type as keyof typeof typeMap] || type;
}

function translateComplexity(complexity: string): string {
  const complexityMap = {
    "simple": "‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏´‡∏•‡∏±‡∏Å‡πÜ)",
    "medium": "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏≠‡∏™‡∏°‡∏Ñ‡∏ß‡∏£)",
    "complex": "‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô (‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏±‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢)",
    "very_complex": "‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å (‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏±‡∏¢‡∏¢‡∏∞)"
  };
  return complexityMap[complexity as keyof typeof complexityMap] || complexity;
}

function translateLength(length: string): string {
  const lengthMap = {
    "short": "‡∏™‡∏±‡πâ‡∏ô (100-200 ‡∏Ñ‡∏≥)",
    "medium": "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (300-500 ‡∏Ñ‡∏≥)",
    "long": "‡∏¢‡∏≤‡∏ß (600-1000 ‡∏Ñ‡∏≥)",
    "very_long": "‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å (1000+ ‡∏Ñ‡∏≥)"
  };
  return lengthMap[length as keyof typeof lengthMap] || length;
}

function getSpecificInstructions(promptType: string): string {
  let instructions = `**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö${getPromptTypeInThai(promptType)}:**\n`;

  switch (promptType) {
    case "combat_scene":
      instructions += `1. ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏û‡∏•‡∏±‡∏á Arcana ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢\n`;
      instructions += `2. ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ñ‡∏±‡∏ö‡∏Ç‡∏±‡∏ô\n`;
      instructions += `3. ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ\n`;
      instructions += `4. ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏à‡πá‡∏ö‡∏õ‡∏ß‡∏î‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏à‡∏¥‡∏ï‡πÉ‡∏à\n`;
      instructions += `5. ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏ô‡∏≤‡∏ï‡πà‡∏≠‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°\n`;
      break;

    case "dialogue":
      instructions += `1. ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏û‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£\n`;
      instructions += `2. ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥\n`;
      instructions += `3. ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏•‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤\n`;
      instructions += `4. ‡πÉ‡∏ä‡πâ subtext ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏û‡∏π‡∏î‡∏≠‡∏≠‡∏Å‡∏°‡∏≤\n`;
      instructions += `5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥\n`;
      break;

    case "location_description":
      instructions += `1. ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á‡∏°‡∏≤‡∏ô‡∏≤‡∏ï‡πà‡∏≠‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°\n`;
      instructions += `2. ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡∏ó‡∏±‡πâ‡∏á 5 ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢\n`;
      instructions += `3. ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î\n`;
      instructions += `4. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç\n`;
      instructions += `5. ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°\n`;
      break;

    case "character_introspection":
      instructions += `1. ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÉ‡∏à\n`;
      instructions += `2. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏≠‡∏î‡∏µ‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£\n`;
      instructions += `3. ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á Arcana ‡∏ï‡πà‡∏≠‡∏à‡∏¥‡∏ï‡πÉ‡∏à\n`;
      instructions += `4. ‡πÉ‡∏ä‡πâ stream of consciousness ‡∏´‡∏£‡∏∑‡∏≠ internal monologue\n`;
      instructions += `5. ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏∞‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏π‡πâ\n`;
      break;

    case "world_building":
      instructions += `1. ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏≤‡∏ô‡∏≤‡πÅ‡∏•‡∏∞ Arcana ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î\n`;
      instructions += `2. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°\n`;
      instructions += `3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡∏ô‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ô\n`;
      instructions += `4. ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡∏£‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï\n`;
      instructions += `5. ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å\n`;
      break;

    case "plot_advancement":
      instructions += `1. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏ç‡πà\n`;
      instructions += `2. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏∑‡πà‡∏ô\n`;
      instructions += `3. ‡∏™‡∏£‡πâ‡∏≤‡∏á foreshadowing ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡πà‡∏≠‡πÑ‡∏õ\n`;
      instructions += `4. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà\n`;
      instructions += `5. ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥\n`;
      break;

    case "emotional_scene":
      instructions += `1. ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå\n`;
      instructions += `2. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå\n`;
      instructions += `3. ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏•‡∏∞ metaphor ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°\n`;
      instructions += `4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå\n`;
      instructions += `5. ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏∞‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏π‡πâ\n`;
      break;

    case "mystery_revelation":
      instructions += `1. ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÑ‡∏õ\n`;
      instructions += `2. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ö‡∏≤‡∏∞‡πÅ‡∏™‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤\n`;
      instructions += `3. ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á\n`;
      instructions += `4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°\n`;
      instructions += `5. ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á\n`;
      break;
  }

  return instructions;
}

function generatePromptTips(promptType: string): string {
  let tips = `üìö **‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö${getPromptTypeInThai(promptType)}:**\n\n`;

  switch (promptType) {
    case "combat_scene":
      tips += `‚Ä¢ **‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞:** ‡∏™‡∏•‡∏±‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏Å\n`;
      tips += `‚Ä¢ **‡∏†‡∏≤‡∏©‡∏≤‡∏Å‡∏≤‡∏¢:** ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡∏Å‡∏©‡∏∞\n`;
      tips += `‚Ä¢ **‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°:** ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ\n`;
      tips += `‚Ä¢ **‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö:** ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏à\n`;
      break;

    case "dialogue":
      tips += `‚Ä¢ **‡πÄ‡∏™‡∏µ‡∏¢‡∏á:** ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏°‡∏µ‡∏•‡∏µ‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß\n`;
      tips += `‚Ä¢ **‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏î‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞:** ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î\n`;
      tips += `‚Ä¢ **‡∏†‡∏≤‡∏©‡∏≤‡∏Å‡∏≤‡∏¢:** ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏û‡∏π‡∏î\n`;
      tips += `‚Ä¢ **‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå:** ‡πÅ‡∏ù‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤\n`;
      break;

    case "location_description":
      tips += `‚Ä¢ **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô:** ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á\n`;
      tips += `‚Ä¢ **‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥:** ‡πÅ‡∏™‡∏î‡∏á‡∏£‡πà‡∏≠‡∏á‡∏£‡∏≠‡∏¢‡∏Ç‡∏≠‡∏á‡∏≠‡∏î‡∏µ‡∏ï\n`;
      tips += `‚Ä¢ **‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢:** ‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°\n`;
      tips += `‚Ä¢ **‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï:** ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ\n`;
      break;

    default:
      tips += `‚Ä¢ **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á:** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏•‡∏Å Ashval\n`;
      tips += `‚Ä¢ **‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:** ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á\n`;
      tips += `‚Ä¢ **‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå:** ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≠‡∏î\n`;
      tips += `‚Ä¢ **‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á:** ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á\n`;
  }

  return tips;
}

async function saveAdvancedPrompt(prompt: string, args: any): Promise<void> {
  const aiPromptsDb = process.env.NOTION_AI_PROMPTS_DB_ID;
  if (!aiPromptsDb) return;

  try {
    // Get data source ID
    const dbResponse = await notion.databases.retrieve({ database_id: aiPromptsDb });
    const dataSource = dbResponse.data_sources?.[0];
    if (!dataSource) {
      console.error(`No data source found for AI Prompts DB: ${aiPromptsDb}`);
      return;
    }

    await notion.pages.create({
      parent: { data_source_id: dataSource.id },
      properties: {
        "Prompt Type": {
          select: {
            name: `Advanced ${getPromptTypeInThai(args.promptType)}`
          }
        },
        "Content": {
          rich_text: [
            {
              text: {
                content: prompt.substring(0, 2000) // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
              }
            }
          ]
        },
        "Parameters": {
          rich_text: [
            {
              text: {
                content: `Type: ${args.promptType}, Mood: ${args.moodTone}, Complexity: ${args.complexity}, Characters: ${args.charactersInvolved?.join(", ") || "None"}`
              }
            }
          ]
        }
      }
    });
  } catch (error) {
    console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Advanced Prompt:", error);
  }
}
