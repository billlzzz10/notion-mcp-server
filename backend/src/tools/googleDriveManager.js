import { google } from 'googleapis';
import { notionFetch } from '../services/notion.js';

/**
 * Google Drive Integration Tool
 * ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Drive ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
 */
export const googleDriveManager = {
  name: 'manageGoogleDrive',
  description: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô Google Drive ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï link ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Notion',
  inputSchema: {
    type: 'object',
    properties: {
      action: {
        type: 'string',
        enum: ['upload', 'create_folder', 'share', 'get_link', 'list_files'],
        description: '‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: upload=‡∏≠‡∏±‡∏û‡πÇ‡∏•‡∏î, create_folder=‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå, share=‡πÅ‡∏ä‡∏£‡πå, get_link=‡∏î‡∏∂‡∏á link, list_files=‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå'
      },
      content: {
        type: 'string',
        description: '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà)'
      },
      fileName: {
        type: 'string',
        description: '‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤'
      },
      fileType: {
        type: 'string',
        enum: ['document', 'spreadsheet', 'presentation', 'text', 'pdf'],
        description: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á'
      },
      folderId: {
        type: 'string',
        description: 'ID ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô root)'
      },
      notionPageId: {
        type: 'string',
        description: 'ID ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ Notion ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï link'
      },
      shareSettings: {
        type: 'object',
        properties: {
          type: {
            type: 'string',
            enum: ['anyone', 'domain', 'user'],
            description: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå'
          },
          role: {
            type: 'string',
            enum: ['reader', 'writer', 'commenter'],
            description: '‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á'
          }
        }
      }
    },
    required: ['action']
  }
};

export async function manageGoogleDrive(args) {
  try {
    const { action, content, fileName, fileType, folderId, notionPageId, shareSettings } = args;
    
    console.log(`üìÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Google Drive: ${action}`);
    
    // Initialize Google Drive API
    const drive = await initializeDriveAPI();
    
    let result;
    
    switch (action) {
      case 'upload':
      case 'create_folder':
        result = await createDriveFile(drive, { content, fileName, fileType, folderId });
        break;
      case 'share':
        result = await shareFile(drive, args);
        break;
      case 'get_link':
        result = await getFileLink(drive, args);
        break;
      case 'list_files':
        result = await listFiles(drive, folderId);
        break;
      default:
        throw new Error(`‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: ${action}`);
    }
    
    // Update Notion with Drive link if requested
    if (notionPageId && result.fileId) {
      await updateNotionWithDriveLink(notionPageId, result);
    }
    
    return {
      success: true,
      action,
      result,
      message: `‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Google Drive ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô${notionPageId ? ' ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï Notion ‡πÅ‡∏•‡πâ‡∏ß' : ''}`
    };
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Google Drive:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

async function initializeDriveAPI() {
  // Check for service account credentials or OAuth tokens
  const credentials = process.env.GOOGLE_SERVICE_ACCOUNT_KEY 
    ? JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_KEY)
    : null;
  
  if (!credentials && !process.env.GOOGLE_ACCESS_TOKEN) {
    throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö Google API credentials ‡πÉ‡∏ô environment variables');
  }
  
  let auth;
  
  if (credentials) {
    // Use service account
    auth = new google.auth.GoogleAuth({
      credentials,
      scopes: ['https://www.googleapis.com/auth/drive']
    });
  } else {
    // Use OAuth token
    auth = new google.auth.OAuth2();
    auth.setCredentials({
      access_token: process.env.GOOGLE_ACCESS_TOKEN,
      refresh_token: process.env.GOOGLE_REFRESH_TOKEN
    });
  }
  
  return google.drive({ version: 'v3', auth });
}

async function createDriveFile(drive, { content, fileName, fileType, folderId }) {
  try {
    const mimeTypes = {
      document: 'application/vnd.google-apps.document',
      spreadsheet: 'application/vnd.google-apps.spreadsheet',
      presentation: 'application/vnd.google-apps.presentation',
      text: 'text/plain',
      pdf: 'application/pdf'
    };
    
    const fileMetadata = {
      name: fileName,
      parents: folderId ? [folderId] : undefined
    };
    
    let media = null;
    
    if (content) {
      media = {
        mimeType: mimeTypes[fileType] || 'text/plain',
        body: content
      };
    }
    
    const response = await drive.files.create({
      resource: fileMetadata,
      media,
      fields: 'id, name, webViewLink, webContentLink'
    });
    
    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô Google Drive ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    
    return {
      fileId: response.data.id,
      fileName: response.data.name,
      webViewLink: response.data.webViewLink,
      webContentLink: response.data.webContentLink
    };
    
  } catch (error) {
    throw new Error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå: ${error.message}`);
  }
}

async function shareFile(drive, { fileId, shareSettings }) {
  try {
    const { type = 'anyone', role = 'reader' } = shareSettings || {};
    
    await drive.permissions.create({
      fileId,
      resource: {
        role,
        type
      }
    });
    
    // Get the shareable link
    const file = await drive.files.get({
      fileId,
      fields: 'webViewLink, webContentLink'
    });
    
    console.log('‚úÖ ‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏ü‡∏•‡πå Google Drive ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    
    return {
      fileId,
      shareSettings: { type, role },
      webViewLink: file.data.webViewLink,
      webContentLink: file.data.webContentLink
    };
    
  } catch (error) {
    throw new Error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏ü‡∏•‡πå: ${error.message}`);
  }
}

async function getFileLink(drive, { fileId }) {
  try {
    const response = await drive.files.get({
      fileId,
      fields: 'id, name, webViewLink, webContentLink, permissions'
    });
    
    return {
      fileId: response.data.id,
      fileName: response.data.name,
      webViewLink: response.data.webViewLink,
      webContentLink: response.data.webContentLink,
      isShared: response.data.permissions?.some(p => p.type === 'anyone') || false
    };
    
  } catch (error) {
    throw new Error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á link: ${error.message}`);
  }
}

async function listFiles(drive, folderId) {
  try {
    const query = folderId ? `'${folderId}' in parents` : undefined;
    
    const response = await drive.files.list({
      q: query,
      fields: 'files(id, name, mimeType, webViewLink, createdTime, modifiedTime)',
      orderBy: 'modifiedTime desc'
    });
    
    return {
      files: response.data.files,
      count: response.data.files.length
    };
    
  } catch (error) {
    throw new Error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå: ${error.message}`);
  }
}

async function updateNotionWithDriveLink(pageId, driveResult) {
  try {
    const updateData = {
      properties: {
        'Google Drive Link': {
          url: driveResult.webViewLink
        },
        'Drive File ID': {
          rich_text: [{
            text: {
              content: driveResult.fileId
            }
          }]
        }
      }
    };
    
    await notionFetch(`/pages/${pageId}`, {
      method: 'PATCH',
      body: JSON.stringify(updateData)
    });
    
    console.log('‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï Notion ‡∏î‡πâ‡∏ß‡∏¢ Google Drive link ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï Notion:', error);
    throw error;
  }
}
