import dotenv from 'dotenv';
import { GoogleGenerativeAI } from '@google/generative-ai';
dotenv.config();

/**
 * Planner Agent - ‡πÅ‡∏¢‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
 */
class PlannerAgent {
  constructor() {
    this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    this.model = this.genAI.getGenerativeModel({ model: process.env.GEMINI_MODEL || 'gemini-1.5-flash' });
    this.notionHeaders = {
      'Authorization': `Bearer ${process.env.NOTION_TOKEN}`,
      'Notion-Version': '2022-06-28',
      'Content-Type': 'application/json'
    };
  }

  /**
   * ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢
   */
  async analyzeAndBreakdownTask(taskId) {
    console.log(`ü§ñ Planner Agent: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏á‡∏≤‡∏ô ${taskId}`);
    
    try {
      // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏≤‡∏Å Notion
      const taskData = await this.getTaskFromNotion(taskId);
      if (!taskData) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô');
      }

      console.log(`üìã ‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å: ${taskData.name}`);
      console.log(`üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${taskData.description}`);

      // 2. ‡πÉ‡∏ä‡πâ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡∏á‡∏≤‡∏ô
      const breakdown = await this.aiBreakdownTask(taskData);
      
      // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Sub-tasks ‡πÉ‡∏ô Notion
      const createdSubtasks = await this.createSubtasks(taskId, breakdown.subtasks);
      
      // 4. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö Sub-tasks
      await this.updateMainTaskWithSubtasks(taskId, createdSubtasks);

      return {
        mainTask: taskData,
        breakdown: breakdown,
        subtasks: createdSubtasks,
        summary: `‡∏™‡∏£‡πâ‡∏≤‡∏á ${createdSubtasks.length} ‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      };

    } catch (error) {
      console.error('‚ùå Planner Agent Error:', error.message);
      throw error;
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Notion
   */
  async getTaskFromNotion(taskId) {
    try {
      const response = await fetch(`https://api.notion.com/v1/pages/${taskId}`, {
        headers: this.notionHeaders
      });

      if (!response.ok) {
        throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${response.statusText}`);
      }

      const page = await response.json();
      
      return {
        id: page.id,
        name: page.properties.Name?.title?.[0]?.text?.content || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠',
        description: page.properties.Description?.rich_text?.[0]?.text?.content || 
                    page.properties.‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô?.rich_text?.[0]?.text?.content || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
        priority: page.properties.Priority?.select?.name || 'P3',
        type: page.properties.Type?.select?.name || 'management',
        dueDate: page.properties['Due Date']?.date?.start || null,
        project: page.properties.Project?.relation?.[0]?.id || null
      };
    } catch (error) {
      console.error('‚ùå Error fetching task:', error.message);
      return null;
    }
  }

  /**
   * ‡πÉ‡∏ä‡πâ AI ‡πÅ‡∏¢‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏¢‡πà‡∏≠‡∏¢
   */
  async aiBreakdownTask(taskData) {
    const prompt = `
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI Planner Agent ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏á‡∏≤‡∏ô‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ

‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å: "${taskData.name}"
‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: "${taskData.description}"
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ${taskData.priority}
‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${taskData.type}
‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${taskData.dueDate || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}

‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏¢‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢ 3-7 ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á:
1. ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
2. ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
3. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡πà‡∏á‡∏û‡∏¥‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô
4. ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô

‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON:
{
  "analysis": "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å",
  "estimatedTotalDays": ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ,
  "riskLevel": "Low/Medium/High",
  "subtasks": [
    {
      "name": "‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢",
      "description": "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢", 
      "estimatedDays": ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ,
      "priority": "P1 üî•/P2/P3/P4",
      "dependencies": ["‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡πà‡∏≠‡∏ô"], 
      "risks": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î"
    }
  ],
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"]
}`;

    try {
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      // ‡∏î‡∏∂‡∏á JSON ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á AI
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('AI ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }

      const breakdown = JSON.parse(jsonMatch[0]);
      console.log(`üß† AI Analysis: ${breakdown.analysis}`);
      console.log(`‚è±Ô∏è ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${breakdown.estimatedTotalDays} ‡∏ß‡∏±‡∏ô`);
      console.log(`‚ö†Ô∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ${breakdown.riskLevel}`);
      
      return breakdown;
    } catch (error) {
      console.error('‚ùå AI Breakdown Error:', error.message);
      // Fallback: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      return this.createFallbackBreakdown(taskData);
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏ô Notion
   */
  async createSubtasks(mainTaskId, subtasks) {
    console.log(`üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á ${subtasks.length} ‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢...`);
    const createdTasks = [];

    for (let i = 0; i < subtasks.length; i++) {
      const subtask = subtasks[i];
      console.log(`${i + 1}. ‡∏™‡∏£‡πâ‡∏≤‡∏á: ${subtask.name}`);

      try {
        const response = await fetch(`https://api.notion.com/v1/pages`, {
          method: 'POST',
          headers: this.notionHeaders,
          body: JSON.stringify({
            parent: {
              database_id: process.env.NOTION_TASKS_DB_ID
            },
            properties: {
              "Name": {
                title: [{ text: { content: subtask.name } }]
              },
              "Description": {
                rich_text: [{ text: { content: subtask.description } }]
              },
              "Priority": {
                select: { name: subtask.priority }
              },
              "Type": {
                select: { name: "management" }
              },
              "Status": {
                status: { name: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°" }
              },
              "Due Date": {
                date: subtask.dueDate ? { start: subtask.dueDate } : null
              },
              "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°": {
                rich_text: [{ text: { content: `‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ${subtask.risks}\n‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ß‡∏•‡∏≤: ${subtask.estimatedDays} ‡∏ß‡∏±‡∏ô` } }]
              }
            }
          })
        });

        if (response.ok) {
          const created = await response.json();
          createdTasks.push({
            id: created.id,
            name: subtask.name,
            estimatedDays: subtask.estimatedDays
          });
          console.log(`   ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ID: ${created.id}`);
        } else {
          console.log(`   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ: ${response.statusText}`);
        }

        // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        await new Promise(resolve => setTimeout(resolve, 300));

      } catch (error) {
        console.error(`   ‚ùå Error creating subtask: ${error.message}`);
      }
    }

    return createdTasks;
  }

  /**
   * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢
   */
  async updateMainTaskWithSubtasks(mainTaskId, subtasks) {
    try {
      const subtaskIds = subtasks.map(task => ({ id: task.id }));
      const summary = `‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô ${subtasks.length} ‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢:\n${subtasks.map(t => `‚Ä¢ ${t.name} (${t.estimatedDays} ‡∏ß‡∏±‡∏ô)`).join('\n')}`;

      const response = await fetch(`https://api.notion.com/v1/pages/${mainTaskId}`, {
        method: 'PATCH',
        headers: this.notionHeaders,
        body: JSON.stringify({
          properties: {
            "Sub-tasks": {
              relation: subtaskIds
            },
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°": {
              rich_text: [{ text: { content: summary } }]
            },
            "Status": {
              status: { name: "‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô" }
            }
          }
        })
      });

      if (response.ok) {
        console.log('‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } catch (error) {
      console.error('‚ùå Error updating main task:', error.message);
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ AI ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
   */
  createFallbackBreakdown(taskData) {
    return {
      analysis: "‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (Fallback)",
      estimatedTotalDays: 7,
      riskLevel: "Medium",
      subtasks: [
        {
          name: `üìã ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô: ${taskData.name}`,
          description: "‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
          estimatedDays: 1,
          priority: "P2",
          dependencies: [],
          risks: "‡∏≠‡∏≤‡∏à‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"
        },
        {
          name: `üî® ‡∏û‡∏±‡∏í‡∏ô‡∏≤: ${taskData.name}`,
          description: "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô",
          estimatedDays: 4,
          priority: "P1 üî•",
          dependencies: ["‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô"],
          risks: "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ"
        },
        {
          name: `‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${taskData.name}`,
          description: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
          estimatedDays: 2,
          priority: "P2",
          dependencies: ["‡∏û‡∏±‡∏í‡∏ô‡∏≤"],
          risks: "‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á"
        }
      ],
      recommendations: ["‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î", "‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÅ‡∏ú‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ß‡πâ"]
    };
  }
}

export default PlannerAgent;
