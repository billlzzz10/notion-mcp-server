import dotenv from 'dotenv';
import { GoogleGenerativeAI } from '@google/generative-ai';
dotenv.config();

/**
 * Forecast Agent - ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
 */
class ForecastAgent {
  constructor() {
    this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    this.model = this.genAI.getGenerativeModel({ model: process.env.GEMINI_MODEL || 'gemini-1.5-flash' });
    this.notionHeaders = {
      'Authorization': `Bearer ${process.env.NOTION_TOKEN}`,
      'Notion-Version': '2022-06-28',
      'Content-Type': 'application/json'
    };
  }

  /**
   * ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏≠‡∏á Project ‡πÅ‡∏•‡∏∞ Tasks
   */
  async forecastProject(projectId) {
    console.log(`üîÆ Forecast Agent: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° Project ${projectId}`);
    
    try {
      // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Project ‡πÅ‡∏•‡∏∞ Tasks
      const projectData = await this.getProjectData(projectId);
      const tasksData = await this.getProjectTasks(projectId);
      
      if (!projectData || !tasksData.length) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Project ‡∏´‡∏£‡∏∑‡∏≠ Tasks');
      }

      console.log(`üìä Project: ${projectData.name}`);
      console.log(`üìã Tasks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${tasksData.length} ‡∏á‡∏≤‡∏ô`);

      // 2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const currentStatus = this.analyzeCurrentStatus(tasksData);
      
      // 3. ‡πÉ‡∏ä‡πâ AI ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°
      const forecast = await this.aiForecastAnalysis(projectData, tasksData, currentStatus);
      
      // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Risk Assessment
      const riskAssessment = await this.assessRisks(tasksData, forecast);
      
      // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
      const recommendations = await this.generateRecommendations(forecast, riskAssessment);

      const result = {
        project: projectData,
        currentStatus,
        forecast,
        riskAssessment,
        recommendations,
        analysisDate: new Date().toISOString()
      };

      // 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
      await this.saveForecastResults(projectId, result);

      return result;

    } catch (error) {
      console.error('‚ùå Forecast Agent Error:', error.message);
      throw error;
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Project
   */
  async getProjectData(projectId) {
    try {
      const response = await fetch(`https://api.notion.com/v1/pages/${projectId}`, {
        headers: this.notionHeaders
      });

      if (!response.ok) return null;

      const page = await response.json();
      return {
        id: page.id,
        name: page.properties.Name?.title?.[0]?.text?.content || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠',
        description: page.properties.Text?.rich_text?.[0]?.text?.content || '',
        status: page.properties.Status?.select?.name || 'Unknown',
        priority: page.properties.Priority?.select?.name || 'Medium',
        dueDate: page.properties['‡∏ß‡∏±‡∏ô‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö']?.date?.start || null,
        startDate: page.properties['Start Date']?.created_time || null
      };
    } catch (error) {
      console.error('‚ùå Error fetching project:', error.message);
      return null;
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Tasks ‡∏Ç‡∏≠‡∏á Project
   */
  async getProjectTasks(projectId) {
    try {
      const response = await fetch(`https://api.notion.com/v1/databases/${process.env.NOTION_TASKS_DB_ID}/query`, {
        method: 'POST',
        headers: this.notionHeaders,
        body: JSON.stringify({
          filter: {
            property: "Project",
            relation: {
              contains: projectId
            }
          }
        })
      });

      if (!response.ok) return [];

      const data = await response.json();
      return data.results.map(task => ({
        id: task.id,
        name: task.properties.Name?.title?.[0]?.text?.content || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠',
        status: task.properties.Status?.status?.name || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°',
        priority: task.properties.Priority?.select?.name || 'P3',
        dueDate: task.properties['Due Date']?.date?.start || null,
        createdAt: task.created_time,
        lastModified: task.last_edited_time,
        progress: task.properties.Progress?.formula?.number || 0,
        isOverdue: task.properties['Is Overdue']?.formula?.boolean || false
      }));
    } catch (error) {
      console.error('‚ùå Error fetching tasks:', error.message);
      return [];
    }
  }

  /**
   * ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   */
  analyzeCurrentStatus(tasks) {
    const total = tasks.length;
    const statusCounts = {};
    const priorityCounts = {};
    let overdueTasks = 0;
    let totalProgress = 0;

    tasks.forEach(task => {
      // ‡∏ô‡∏±‡∏ö Status
      statusCounts[task.status] = (statusCounts[task.status] || 0) + 1;
      
      // ‡∏ô‡∏±‡∏ö Priority
      priorityCounts[task.priority] = (priorityCounts[task.priority] || 0) + 1;
      
      // ‡∏ô‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á
      if (task.isOverdue) overdueTasks++;
      
      // ‡∏£‡∏ß‡∏° Progress
      totalProgress += task.progress || 0;
    });

    const avgProgress = total > 0 ? totalProgress / total : 0;

    return {
      totalTasks: total,
      statusBreakdown: statusCounts,
      priorityBreakdown: priorityCounts,
      overdueTasks,
      avgProgress: Math.round(avgProgress * 100) / 100,
      completionRate: statusCounts['‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô'] ? (statusCounts['‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô'] / total * 100).toFixed(1) : 0
    };
  }

  /**
   * ‡πÉ‡∏ä‡πâ AI ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°
   */
  async aiForecastAnalysis(project, tasks, currentStatus) {
    const prompt = `
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI Forecast Agent ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Project:
- ‡∏ä‡∏∑‡πà‡∏≠: ${project.name}
- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${project.status}
- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${project.dueDate || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô: ${project.startDate || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}

‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
- ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${currentStatus.totalTasks}
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${currentStatus.avgProgress}%
- ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß: ${currentStatus.completionRate}%
- ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á: ${currentStatus.overdueTasks}
- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô: ${JSON.stringify(currentStatus.statusBreakdown)}

‡πÇ‡∏õ‡∏£‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON:
{
  "projectHealthScore": ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (0-100),
  "onTimeDeliveryProbability": ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (0-100),
  "estimatedCompletionDate": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à (YYYY-MM-DD)",
  "bottlenecks": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î"],
  "trendAnalysis": {
    "velocity": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (High/Medium/Low)",
    "momentum": "‡πÅ‡∏£‡∏á‡∏ú‡∏•‡∏±‡∏Å‡∏î‡∏±‡∏ô (Increasing/Stable/Declining)",
    "riskTrend": "‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (Improving/Stable/Worsening)"
  },
  "predictions": {
    "nextWeekProgress": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤ (%)",
    "criticalTasks": ["‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"],
    "resourceNeeds": ["‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°"]
  }
}`;

    try {
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('AI ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }

      const forecast = JSON.parse(jsonMatch[0]);
      console.log(`üìà Health Score: ${forecast.projectHealthScore}/100`);
      console.log(`‚è∞ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏á‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤: ${forecast.onTimeDeliveryProbability}%`);
      
      return forecast;
    } catch (error) {
      console.error('‚ùå AI Forecast Error:', error.message);
      return this.createFallbackForecast(currentStatus);
    }
  }

  /**
   * ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
   */
  async assessRisks(tasks, forecast) {
    const risks = [];
    
    // ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á
    const overdueTasks = tasks.filter(t => t.isOverdue);
    if (overdueTasks.length > 0) {
      risks.push({
        type: "Schedule Risk",
        level: overdueTasks.length > 3 ? "High" : "Medium",
        description: `‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á ${overdueTasks.length} ‡∏á‡∏≤‡∏ô`,
        impact: "‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°",
        mitigation: "‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£"
      });
    }

    // ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å Health Score
    if (forecast.projectHealthScore < 70) {
      risks.push({
        type: "Project Health Risk",
        level: forecast.projectHealthScore < 50 ? "High" : "Medium",
        description: `‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≥ (${forecast.projectHealthScore}/100)`,
        impact: "‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤",
        mitigation: "‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"
      });
    }

    return risks;
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
   */
  async generateRecommendations(forecast, risks) {
    const recommendations = [];

    // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å Health Score
    if (forecast.projectHealthScore >= 80) {
      recommendations.push("‚úÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏î‡∏µ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô");
    } else if (forecast.projectHealthScore >= 60) {
      recommendations.push("‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢");
    } else {
      recommendations.push("üö® ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏£‡∏Å‡πÅ‡∏ã‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô");
    }

    // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    if (risks.length > 0) {
      recommendations.push(`üõ°Ô∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ${risks.length} ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô`);
      risks.forEach(risk => {
        recommendations.push(`- ${risk.mitigation}`);
      });
    }

    // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å Velocity
    if (forecast.trendAnalysis?.momentum === 'Declining') {
      recommendations.push("üìà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏£‡∏á‡∏à‡∏π‡∏á‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ");
    }

    return recommendations;
  }

  /**
   * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
   */
  async saveForecastResults(projectId, results) {
    try {
      const summary = `üîÆ Forecast Analysis (${new Date().toLocaleDateString('th-TH')})

üìä Health Score: ${results.forecast.projectHealthScore}/100
‚è∞ ‡∏™‡πà‡∏á‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤: ${results.forecast.onTimeDeliveryProbability}%
üìÖ ‡∏Ñ‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à: ${results.forecast.estimatedCompletionDate}

üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°:
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: ${results.forecast.trendAnalysis?.velocity}
- ‡πÅ‡∏£‡∏á‡∏ú‡∏•‡∏±‡∏Å‡∏î‡∏±‡∏ô: ${results.forecast.trendAnalysis?.momentum}
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ${results.forecast.trendAnalysis?.riskTrend}

‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ${results.riskAssessment.length} ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô
üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ${results.recommendations.length} ‡∏Ç‡πâ‡∏≠`;

      const response = await fetch(`https://api.notion.com/v1/pages/${projectId}`, {
        method: 'PATCH',
        headers: this.notionHeaders,
        body: JSON.stringify({
          properties: {
            "Tasks Summary": {
              rich_text: [{ text: { content: summary } }]
            }
          }
        })
      });

      if (response.ok) {
        console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } catch (error) {
      console.error('‚ùå Error saving forecast:', error.message);
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ AI ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
   */
  createFallbackForecast(currentStatus) {
    const healthScore = Math.max(10, Math.min(90, currentStatus.avgProgress * 0.8 + (100 - currentStatus.overdueTasks * 10)));
    
    return {
      projectHealthScore: Math.round(healthScore),
      onTimeDeliveryProbability: Math.max(20, Math.min(90, healthScore - 10)),
      estimatedCompletionDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      bottlenecks: ["‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"],
      trendAnalysis: {
        velocity: "Medium",
        momentum: "Stable", 
        riskTrend: currentStatus.overdueTasks > 2 ? "Worsening" : "Stable"
      },
      predictions: {
        nextWeekProgress: `${Math.round(currentStatus.avgProgress + 10)}%`,
        criticalTasks: ["‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î"],
        resourceNeeds: ["‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"]
      }
    };
  }
}

export default ForecastAgent;
