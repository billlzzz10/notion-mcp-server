import { Tool } from "@modelcontextprotocol/sdk/types.js";
import { notion } from "../services/notion.js";

export const consistencyCheckerTool: Tool = {
  name: "check_consistency",
  description: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
  inputSchema: {
    type: "object",
    properties: {
      checkType: {
        type: "string",
        enum: ["character_abilities", "location_references", "timeline_events", "power_system_usage", "relationship_consistency", "full_check"],
        description: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
      },
      entityName: {
        type: "string",
        description: "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"
      },
      autoFix: {
        type: "boolean",
        description: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
        default: false
      },
      generateReport: {
        type: "boolean", 
        description: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô",
        default: true
      }
    },
    required: ["checkType"]
  }
};

export async function handleConsistencyCheck(args: any) {
  try {
    let checkResults: any[] = [];

    switch (args.checkType) {
      case "character_abilities":
        checkResults = await checkCharacterAbilities(args.entityName);
        break;
      case "location_references":
        checkResults = await checkLocationReferences(args.entityName);
        break;
      case "timeline_events":
        checkResults = await checkTimelineEvents();
        break;
      case "power_system_usage":
        checkResults = await checkPowerSystemUsage();
        break;
      case "relationship_consistency":
        checkResults = await checkRelationshipConsistency();
        break;
      case "full_check":
        const charCheck = await checkCharacterAbilities();
        const locCheck = await checkLocationReferences();
        const timeCheck = await checkTimelineEvents();
        const powerCheck = await checkPowerSystemUsage();
        const relCheck = await checkRelationshipConsistency();
        
        checkResults = [
          ...charCheck,
          ...locCheck, 
          ...timeCheck,
          ...powerCheck,
          ...relCheck
        ];
        break;
    }

    if (args.autoFix) {
      await performAutoFixes(checkResults);
    }

    const report = generateConsistencyReport(checkResults, args.checkType);
    
    if (args.generateReport) {
      await saveConsistencyReport(report, args.checkType);
    }

    return {
      content: [
        {
          type: "text",
          text: `üîç **Consistency Check Results:**\n\n${report}`
        }
      ]
    };

  } catch (error) {
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ: ${error}`);
  }
}

async function checkCharacterAbilities(entityName?: string): Promise<any[]> {
  const charactersDb = process.env.NOTION_CHARACTERS_DB_ID;
  const powerSystemsDb = process.env.NOTION_POWER_SYSTEMS_DB_ID;
  const arcanasDb = process.env.NOTION_ARCANAS_DB_ID;
  
  if (!charactersDb || !powerSystemsDb || !arcanasDb) {
    throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö Database IDs ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô");
  }

  const issues: any[] = [];

  let characterFilter: any = {};
  if (entityName) {
    characterFilter = {
      property: "Name",
      title: {
        contains: entityName
      }
    };
  }

  const dbResponseChars = await notion.databases.retrieve({ database_id: charactersDb });
  const dataSourceChars = dbResponseChars.data_sources?.[0];
  if (!dataSourceChars) throw new Error(`No data source found for Characters DB: ${charactersDb}`);
  const charactersResponse = await notion.dataSources.query({
    data_source_id: dataSourceChars.id,
    filter: Object.keys(characterFilter).length > 0 ? characterFilter : undefined
  });

  const dbResponsePower = await notion.databases.retrieve({ database_id: powerSystemsDb });
  const dataSourcePower = dbResponsePower.data_sources?.[0];
  if (!dataSourcePower) throw new Error(`No data source found for Power Systems DB: ${powerSystemsDb}`);
  const powerSystemsResponse = await notion.dataSources.query({
    data_source_id: dataSourcePower.id
  });

  const dbResponseArcanas = await notion.databases.retrieve({ database_id: arcanasDb });
  const dataSourceArcanas = dbResponseArcanas.data_sources?.[0];
  if (!dataSourceArcanas) throw new Error(`No data source found for Arcanas DB: ${arcanasDb}`);
  const arcanasResponse = await notion.dataSources.query({
    data_source_id: dataSourceArcanas.id
  });

  const powerSystemsMap = new Map();
  powerSystemsResponse.results.forEach((ps: any) => {
    const name = ps.properties["System Name"]?.title?.[0]?.text?.content;
    if (name) {
      powerSystemsMap.set(ps.id, name);
    }
  });

  const arcanasMap = new Map();
  arcanasResponse.results.forEach((arcana: any) => {
    const name = arcana.properties.Name?.title?.[0]?.text?.content;
    if (name) {
      arcanasMap.set(arcana.id, name);
    }
  });

  for (const character of charactersResponse.results) {
    const charProps = (character as any).properties;
    const charName = charProps.Name?.title?.[0]?.text?.content || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠";
    const abilities = charProps.Abilities?.rich_text?.[0]?.text?.content || "";
    const powerSystemRefs = charProps["Power System"]?.relation || [];

    for (const psRef of powerSystemRefs) {
      const psName = powerSystemsMap.get(psRef.id);
      if (!psName) {
        issues.push({
          type: "missing_power_system",
          severity: "high",
          character: charName,
          description: `‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ ${charName} ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á Power System ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (ID: ${psRef.id})`,
          suggestion: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Power System reference",
          autoFixable: false
        });
      } else {
        if (abilities && !abilities.toLowerCase().includes(psName.toLowerCase())) {
          issues.push({
            type: "ability_power_mismatch",
            severity: "medium",
            character: charName,
            description: `Abilities ‡∏Ç‡∏≠‡∏á ${charName} ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Power System "${psName}"`,
            suggestion: `‡πÄ‡∏û‡∏¥‡πà‡∏° "${psName}" ‡πÉ‡∏ô Abilities ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`,
            autoFixable: true,
            fixData: { characterId: (character as any).id, powerSystem: psName }
          });
        }
      }
    }

    if (abilities) {
      const mentionedArcanas = extractArcanaNames(abilities);
      for (const arcanaName of mentionedArcanas) {
        const arcanaExists = Array.from(arcanasMap.values()).some(
          name => name.toLowerCase().includes(arcanaName.toLowerCase())
        );
        
        if (!arcanaExists) {
          issues.push({
            type: "undefined_arcana",
            severity: "medium",
            character: charName,
            description: `‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ ${charName} ‡∏°‡∏µ Arcana "${arcanaName}" ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`,
            suggestion: `‡∏™‡∏£‡πâ‡∏≤‡∏á Arcana "${arcanaName}" ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Arcanas`,
            autoFixable: true,
            fixData: { arcanaName: arcanaName }
          });
        }
      }
    }
  }

  return issues;
}

async function checkLocationReferences(entityName?: string): Promise<any[]> {
  const locationsDb = process.env.NOTION_LOCATIONS_DB_ID;
  const scenesDb = process.env.NOTION_SCENES_DB_ID;
  
  if (!locationsDb || !scenesDb) {
    throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö Database IDs ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô");
  }

  const issues: any[] = [];

  const dbResponseLocs = await notion.databases.retrieve({ database_id: locationsDb });
  const dataSourceLocs = dbResponseLocs.data_sources?.[0];
  if (!dataSourceLocs) throw new Error(`No data source found for Locations DB: ${locationsDb}`);
  const locationsResponse = await notion.dataSources.query({
    data_source_id: dataSourceLocs.id
  });

  const dbResponseScenes = await notion.databases.retrieve({ database_id: scenesDb });
  const dataSourceScenes = dbResponseScenes.data_sources?.[0];
  if (!dataSourceScenes) throw new Error(`No data source found for Scenes DB: ${scenesDb}`);
  const scenesResponse = await notion.dataSources.query({
    data_source_id: dataSourceScenes.id
  });

  const locationsMap = new Map();
  locationsResponse.results.forEach((loc: any) => {
    const name = loc.properties.Name?.title?.[0]?.text?.content;
    if (name) {
      locationsMap.set(loc.id, name);
    }
  });

  for (const scene of scenesResponse.results) {
    const sceneProps = (scene as any).properties;
    const sceneTitle = sceneProps.Title?.title?.[0]?.text?.content || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠";
    const locationRefs = sceneProps.Location?.relation || [];
    const sceneSummary = sceneProps.Summary?.rich_text?.[0]?.text?.content || "";

    for (const locRef of locationRefs) {
      const locName = locationsMap.get(locRef.id);
      if (!locName) {
        issues.push({
          type: "missing_location",
          severity: "high",
          scene: sceneTitle,
          description: `‡∏â‡∏≤‡∏Å "${sceneTitle}" ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (ID: ${locRef.id})`,
          suggestion: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Location reference",
          autoFixable: false
        });
      }
    }

    if (sceneSummary) {
      const mentionedLocations = extractLocationNames(sceneSummary);
      for (const locName of mentionedLocations) {
        const locationExists = Array.from(locationsMap.values()).some(
          name => name.toLowerCase().includes(locName.toLowerCase())
        );
        
        const isReferenced = locationRefs.some((ref: any) => {
          const refName = locationsMap.get(ref.id);
          return refName?.toLowerCase().includes(locName.toLowerCase());
        });

        if (locationExists && !isReferenced) {
          issues.push({
            type: "unreferenced_location",
            severity: "low",
            scene: sceneTitle,
            description: `‡∏â‡∏≤‡∏á "${sceneTitle}" ‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á "${locName}" ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÉ‡∏ô Location field`,
            suggestion: `‡πÄ‡∏û‡∏¥‡πà‡∏° "${locName}" ‡πÉ‡∏ô Location field ‡∏Ç‡∏≠‡∏á‡∏â‡∏≤‡∏Å`,
            autoFixable: true,
            fixData: { sceneId: (scene as any).id, locationName: locName }
          });
        }
      }
    }
  }

  return issues;
}

async function checkTimelineEvents(): Promise<any[]> {
  const timelineDb = process.env.NOTION_TIMELINE_DB_ID;
  const scenesDb = process.env.NOTION_SCENES_DB_ID;
  
  if (!timelineDb || !scenesDb) {
    return [];
  }

  const issues: any[] = [];

  const dbResponseTimeline = await notion.databases.retrieve({ database_id: timelineDb });
  const dataSourceTimeline = dbResponseTimeline.data_sources?.[0];
  if (!dataSourceTimeline) throw new Error(`No data source found for Timeline DB: ${timelineDb}`);
  const timelineResponse = await notion.dataSources.query({
    data_source_id: dataSourceTimeline.id,
    sorts: [{ property: "Timeline Order", direction: "ascending" }]
  });

  const dbResponseScenes = await notion.databases.retrieve({ database_id: scenesDb });
  const dataSourceScenes = dbResponseScenes.data_sources?.[0];
  if (!dataSourceScenes) throw new Error(`No data source found for Scenes DB: ${scenesDb}`);
  const scenesResponse = await notion.dataSources.query({
    data_source_id: dataSourceScenes.id,
    sorts: [{ property: "Chapter", direction: "ascending" }, { property: "Order", direction: "ascending" }]
  });

  for (let i = 0; i < timelineResponse.results.length - 1; i++) {
    const currentEvent = timelineResponse.results[i] as any;
    const nextEvent = timelineResponse.results[i + 1] as any;
    
    const currentOrder = currentEvent.properties["Timeline Order"]?.number || 0;
    const nextOrder = nextEvent.properties["Timeline Order"]?.number || 0;
    const currentChapter = currentEvent.properties["Real Chapter"]?.number || 0;
    const nextChapter = nextEvent.properties["Real Chapter"]?.number || 0;

    if (currentChapter > nextChapter && currentOrder < nextOrder) {
      issues.push({
        type: "timeline_order_mismatch",
        severity: "medium",
        description: `Timeline Order ‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö Chapter: Order ${currentOrder} (Chapter ${currentChapter}) ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô Order ${nextOrder} (Chapter ${nextChapter})`,
        suggestion: "‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Timeline Order ‡∏´‡∏£‡∏∑‡∏≠ Real Chapter ‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏ô",
        autoFixable: false
      });
    }
  }

  return issues;
}

async function checkPowerSystemUsage(): Promise<any[]> {
  const powerSystemsDb = process.env.NOTION_POWER_SYSTEMS_DB_ID;
  const arcanasDb = process.env.NOTION_ARCANAS_DB_ID;
  const charactersDb = process.env.NOTION_CHARACTERS_DB_ID;
  
  if (!powerSystemsDb || !arcanasDb || !charactersDb) {
    throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö Database IDs ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô");
  }

  const issues: any[] = [];

  const dbResponsePower = await notion.databases.retrieve({ database_id: powerSystemsDb });
  const dataSourcePower = dbResponsePower.data_sources?.[0];
  if (!dataSourcePower) throw new Error(`No data source found for Power Systems DB: ${powerSystemsDb}`);
  const powerSystems = await notion.dataSources.query({ data_source_id: dataSourcePower.id });

  const dbResponseArcanas = await notion.databases.retrieve({ database_id: arcanasDb });
  const dataSourceArcanas = dbResponseArcanas.data_sources?.[0];
  if (!dataSourceArcanas) throw new Error(`No data source found for Arcanas DB: ${arcanasDb}`);
  const arcanas = await notion.dataSources.query({ data_source_id: dataSourceArcanas.id });

  const dbResponseChars = await notion.databases.retrieve({ database_id: charactersDb });
  const dataSourceChars = dbResponseChars.data_sources?.[0];
  if (!dataSourceChars) throw new Error(`No data source found for Characters DB: ${charactersDb}`);
  const characters = await notion.dataSources.query({ data_source_id: dataSourceChars.id });

  for (const ps of powerSystems.results) {
    const psProps = (ps as any).properties;
    const psName = psProps["System Name"]?.title?.[0]?.text?.content;
    
    if (psName) {
      const usedByCharacters = characters.results.some((char: any) => {
        const charPowerSystems = char.properties["Power System"]?.relation || [];
        return charPowerSystems.some((ref: any) => ref.id === ps.id);
      });

      if (!usedByCharacters) {
        issues.push({
          type: "unused_power_system",
          severity: "low",
          description: `Power System "${psName}" ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÉ‡∏î‡πÉ‡∏ä‡πâ`,
          suggestion: `‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏•‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ "${psName}"`,
          autoFixable: false
        });
      }
    }
  }

  for (const arcana of arcanas.results) {
    const arcanaProps = (arcana as any).properties;
    const arcanaName = arcanaProps.Name?.title?.[0]?.text?.content;
    
    if (arcanaName) {
      const usedByCharacters = characters.results.some((char: any) => {
        const abilities = char.properties.Abilities?.rich_text?.[0]?.text?.content || "";
        return abilities.toLowerCase().includes(arcanaName.toLowerCase());
      });

      if (!usedByCharacters) {
        issues.push({
          type: "unused_arcana",
          severity: "low",
          description: `Arcana "${arcanaName}" ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÉ‡∏î‡πÉ‡∏ä‡πâ`,
          suggestion: `‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏•‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ "${arcanaName}"`,
          autoFixable: false
        });
      }
    }
  }

  return issues;
}

async function checkRelationshipConsistency(): Promise<any[]> {
  const charactersDb = process.env.NOTION_CHARACTERS_DB_ID;
  
  if (!charactersDb) {
    throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö NOTION_CHARACTERS_DB_ID");
  }

  const issues: any[] = [];

  const dbResponse = await notion.databases.retrieve({ database_id: charactersDb });
  const dataSource = dbResponse.data_sources?.[0];
  if (!dataSource) throw new Error(`No data source found for Characters DB: ${charactersDb}`);

  const charactersResponse = await notion.dataSources.query({
    data_source_id: dataSource.id,
  });

  for (const character of charactersResponse.results) {
    const charProps = (character as any).properties;
    const charName = charProps.Name?.title?.[0]?.text?.content || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠";
    const relationships = charProps.Relationships?.rich_text?.[0]?.text?.content || "";
    const background = charProps.Background?.rich_text?.[0]?.text?.content || "";

    if (relationships) {
      const relationshipConflicts = findRelationshipConflicts(relationships);
      
      for (const conflict of relationshipConflicts) {
        issues.push({
          type: "relationship_conflict",
          severity: "medium",
          character: charName,
          description: `‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ ${charName} ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á: ${conflict}`,
          suggestion: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏ô",
          autoFixable: false
        });
      }
    }

    if (relationships && background) {
      const backgroundMentions = extractCharacterMentions(background);
      const relationshipMentions = extractCharacterMentions(relationships);
      
      for (const mention of backgroundMentions) {
        if (!relationshipMentions.includes(mention)) {
          issues.push({
            type: "missing_relationship",
            severity: "low",
            character: charName,
            description: `‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ ${charName} ‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á "${mention}" ‡πÉ‡∏ô Background ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Relationships`,
            suggestion: `‡πÄ‡∏û‡∏¥‡πà‡∏° "${mention}" ‡πÉ‡∏ô Relationships field`,
            autoFixable: true,
            fixData: { characterId: (character as any).id, relationshipToAdd: mention }
          });
        }
      }
    }
  }

  return issues;
}

// ... (Rest of the file is unchanged and correct)
async function performAutoFixes(issues: any[]): Promise<void> {
  for (const issue of issues) {
    if (issue.autoFixable && issue.fixData) {
      try {
        switch (issue.type) {
          case "ability_power_mismatch":
            await fixAbilityPowerMismatch(issue.fixData);
            break;
          case "undefined_arcana":
            await createMissingArcana(issue.fixData);
            break;
          case "unreferenced_location":
            await addLocationReference(issue.fixData);
            break;
          case "missing_relationship":
            await addMissingRelationship(issue.fixData);
            break;
        }
        
        issue.fixed = true;
      } catch (error) {
        console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ${issue.type}:`, error);
        issue.fixed = false;
        issue.fixError = error;
      }
    }
  }
}

async function fixAbilityPowerMismatch(fixData: any): Promise<void> {
  const { characterId, powerSystem } = fixData;
  
  const character = await notion.pages.retrieve({ page_id: characterId }) as any;
  const currentAbilities = character.properties.Abilities?.rich_text?.[0]?.text?.content || "";
  
  const updatedAbilities = currentAbilities 
    ? `${currentAbilities}. ‡πÉ‡∏ä‡πâ‡∏û‡∏•‡∏±‡∏á ${powerSystem}`
    : `‡πÉ‡∏ä‡πâ‡∏û‡∏•‡∏±‡∏á ${powerSystem}`;

  await notion.pages.update({
    page_id: characterId,
    properties: {
      "Abilities": {
        rich_text: [
          {
            text: {
              content: updatedAbilities
            }
          }
        ]
      }
    }
  });
}

async function createMissingArcana(fixData: any): Promise<void> {
  const arcanasDb = process.env.NOTION_ARCANAS_DB_ID;
  if (!arcanasDb) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö NOTION_ARCANAS_DB_ID");

  const { arcanaName } = fixData;

  const dbResponse = await notion.databases.retrieve({ database_id: arcanasDb });
  const dataSource = dbResponse.data_sources?.[0];
  if (!dataSource) {
    console.error(`No data source found for Arcanas DB: ${arcanasDb}`);
    return;
  }

  await notion.pages.create({
    parent: { data_source_id: dataSource.id },
    properties: {
      "Name": {
        title: [
          {
            text: {
              content: arcanaName
            }
          }
        ]
      },
      "Type": {
        select: {
          name: "Unknown"
        }
      },
      "Description": {
        rich_text: [
          {
            text: {
              content: `Arcana ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á`
            }
          }
        ]
      }
    }
  });
}

async function addLocationReference(fixData: any): Promise<void> {
  console.log("Adding location reference:", fixData);
}

async function addMissingRelationship(fixData: any): Promise<void> {
  const { characterId, relationshipToAdd } = fixData;
  
  const character = await notion.pages.retrieve({ page_id: characterId }) as any;
  const currentRelationships = character.properties.Relationships?.rich_text?.[0]?.text?.content || "";
  
  const updatedRelationships = currentRelationships 
    ? `${currentRelationships}. ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö ${relationshipToAdd}`
    : `‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö ${relationshipToAdd}`;

  await notion.pages.update({
    page_id: characterId,
    properties: {
      "Relationships": {
        rich_text: [
          {
            text: {
              content: updatedRelationships
            }
          }
        ]
      }
    }
  });
}

function generateConsistencyReport(issues: any[], checkType: string): string {
  let report = `üìã **Consistency Check Report - ${checkType}**\n\n`;
  
  if (issues.length === 0) {
    report += "‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á";
    return report;
  }

  const severityGroups = {
    high: issues.filter(i => i.severity === "high"),
    medium: issues.filter(i => i.severity === "medium"), 
    low: issues.filter(i => i.severity === "low")
  };

  report += `üîç **‡∏™‡∏£‡∏∏‡∏õ:** ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ${issues.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`;
  report += `‚Ä¢ High Severity: ${severityGroups.high.length}\n`;
  report += `‚Ä¢ Medium Severity: ${severityGroups.medium.length}\n`;
  report += `‚Ä¢ Low Severity: ${severityGroups.low.length}\n\n`;

  Object.entries(severityGroups).forEach(([severity, severityIssues]) => {
    if (severityIssues.length > 0) {
      const icon = severity === "high" ? "üö®" : severity === "medium" ? "‚ö†Ô∏è" : "üí°";
      report += `${icon} **${severity.toUpperCase()} SEVERITY ISSUES:**\n\n`;
      
      severityIssues.forEach((issue, index) => {
        report += `**${index + 1}. ${issue.type}**\n`;
        if (issue.character) report += `   üë§ Character: ${issue.character}\n`;
        if (issue.scene) report += `   üé¨ Scene: ${issue.scene}\n`;
        report += `   üìù Issue: ${issue.description}\n`;
        report += `   üí° Suggestion: ${issue.suggestion}\n`;
        if (issue.fixed !== undefined) {
          report += `   üîß Auto-fix: ${issue.fixed ? "‚úÖ ‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" : "‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"}\n`;
        }
        report += "\n";
      });
    }
  });

  const fixableIssues = issues.filter(i => i.autoFixable);
  const fixedIssues = issues.filter(i => i.fixed === true);
  
  if (fixableIssues.length > 0) {
    report += `üîß **Auto-fix Status:**\n`;
    report += `‚Ä¢ Fixable Issues: ${fixableIssues.length}\n`;
    report += `‚Ä¢ Successfully Fixed: ${fixedIssues.length}\n`;
    report += `‚Ä¢ Failed to Fix: ${fixableIssues.length - fixedIssues.length}\n`;
  }

  return report;
}

async function saveConsistencyReport(report: string, checkType: string): Promise<void> {
  const versionsDb = process.env.NOTION_VERSION_HISTORY_DB_ID;
  if (!versionsDb) return;

  try {
    const dbResponse = await notion.databases.retrieve({ database_id: versionsDb });
    const dataSource = dbResponse.data_sources?.[0];
    if (!dataSource) {
      console.error(`No data source found for Version History DB: ${versionsDb}`);
      return;
    }

    await notion.pages.create({
      parent: { data_source_id: dataSource.id },
      properties: {
        "Title": {
          title: [
            {
              text: {
                content: `Consistency Check: ${checkType}`
              }
            }
          ]
        },
        "Entity Type": {
          select: {
            name: "System"
          }
        },
        "Change Type": {
          select: {
            name: "Check"
          }
        },
        "New Value": {
          rich_text: [
            {
              text: {
                content: report.substring(0, 2000)
              }
            }
          ]
        },
        "Reason": {
          rich_text: [
            {
              text: {
                content: "Automated consistency check"
              }
            }
          ]
        },
        "AI Generated": {
          checkbox: true
        }
      }
    });
  } catch (error) {
    console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:", error);
  }
}

function extractArcanaNames(text: string): string[] {
  const patterns = [
    /The\s+[A-Z][a-z]+/g,
    /‡∏≠‡∏≤‡∏£‡πå‡∏Ñ‡∏≤‡∏ô‡∏≤\s*([‡∏Å-‡πô\s]+)/g
  ];
  
  const found: string[] = [];
  patterns.forEach(pattern => {
    const matches = text.match(pattern);
    if (matches) {
      found.push(...matches);
    }
  });
  
  return [...new Set(found)];
}

function extractLocationNames(text: string): string[] {
  const locationPatterns = [
    /‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏á[‡∏Å-‡πô]+/g,
    /‡∏õ‡πà‡∏≤[‡∏Å-‡πô]+/g,
    /‡πÄ‡∏°‡∏∑‡∏≠‡∏á[‡∏Å-‡πô]+/g,
    /‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô[‡∏Å-‡πô]+/g,
    /‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó[‡∏Å-‡πô]+/g,
    /‡∏ñ‡πâ‡∏≥[‡∏Å-‡πô]+/g
  ];
  
  const found: string[] = [];
  locationPatterns.forEach(pattern => {
    const matches = text.match(pattern);
    if (matches) {
      found.push(...matches);
    }
  });
  
  return [...new Set(found)];
}

function extractCharacterMentions(text: string): string[] {
  const characterPatterns = [
    /‡∏Å‡∏±‡∏ö\s+([‡∏Å-‡πôA-Za-z]+)/g,
    /‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô\s*([‡∏Å-‡πôA-Za-z]+)/g,
    /‡∏®‡∏±‡∏ï‡∏£‡∏π\s*([‡∏Å-‡πôA-Za-z]+)/g
  ];
  
  const found: string[] = [];
  characterPatterns.forEach(pattern => {
    const matches = text.match(pattern);
    if (matches) {
      found.push(...matches.map(m => m.replace(/^(‡∏Å‡∏±‡∏ö|‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô|‡∏®‡∏±‡∏ï‡∏£‡∏π)\s*/, "")));
    }
  });
  
  return [...new Set(found)];
}

function findRelationshipConflicts(relationships: string): string[] {
  const conflicts: string[] = [];
  const text = relationships.toLowerCase();
  
  if (text.includes("‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô") && text.includes("‡∏®‡∏±‡∏ï‡∏£‡∏π")) {
    conflicts.push("‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÉ‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏ô");
  }
  
  if (text.includes("‡∏£‡∏±‡∏Å") && text.includes("‡πÄ‡∏Å‡∏•‡∏µ‡∏¢‡∏î")) {
    conflicts.push("‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏•‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏ô");
  }
  
  return conflicts;
}