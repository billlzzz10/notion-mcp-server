import dotenv from 'dotenv';
import { GoogleGenerativeAI } from '@google/generative-ai';
dotenv.config();

/**
 * Data Quality Agent - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Project ‡πÅ‡∏•‡∏∞ Tasks
 */
class DataQualityAgent {
  constructor() {
    this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    this.model = this.genAI.getGenerativeModel({ model: process.env.GEMINI_MODEL || 'gemini-1.5-flash' });
    this.notionHeaders = {
      'Authorization': `Bearer ${process.env.NOTION_TOKEN}`,
      'Notion-Version': '2022-06-28',
      'Content-Type': 'application/json'
    };
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏Ç‡∏≠‡∏á Projects ‡πÅ‡∏•‡∏∞ Tasks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  async analyzeDataQuality() {
    console.log('üîç Data Quality Agent: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    console.log('=====================================================');

    try {
      // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Projects ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const projects = await this.getAllProjects();
      console.log(`üìä ‡∏û‡∏ö ${projects.length} Projects`);

      // 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Tasks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const tasks = await this.getAllTasks();
      console.log(`üìã ‡∏û‡∏ö ${tasks.length} Tasks`);

      // 3. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞ Project
      const projectAnalysis = [];
      for (const project of projects) {
        console.log(`\nüîé ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Project: "${project.name}"`);
        const analysis = await this.analyzeProject(project);
        projectAnalysis.push(analysis);
      }

      // 4. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Tasks ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö Projects
      const taskAnalysis = [];
      for (const project of projects) {
        const projectTasks = tasks.filter(task => 
          task.project && task.project.includes(project.id)
        );
        
        if (projectTasks.length > 0) {
          console.log(`\nüìù ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ${projectTasks.length} Tasks ‡∏Ç‡∏≠‡∏á Project: "${project.name}"`);
          const analysis = await this.analyzeTasks(projectTasks, project);
          taskAnalysis.push(analysis);
        }
      }

      // 5. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
      const summary = await this.generateQualitySummary(projectAnalysis, taskAnalysis);
      
      // 6. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      this.displayResults(projectAnalysis, taskAnalysis, summary);

      return {
        projects: projectAnalysis,
        tasks: taskAnalysis,
        summary
      };

    } catch (error) {
      console.error('‚ùå Data Quality Agent Error:', error.message);
      throw error;
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Projects ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  async getAllProjects() {
    try {
      const response = await fetch(`https://api.notion.com/v1/databases/${process.env.NOTION_PROJECTS_DB_ID}/query`, {
        method: 'POST',
        headers: this.notionHeaders,
        body: JSON.stringify({
          page_size: 100
        })
      });

      if (!response.ok) return [];

      const data = await response.json();
      return data.results.map(project => ({
        id: project.id,
        name: project.properties.Name?.title?.[0]?.text?.content || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠',
        status: project.properties.Status?.select?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        priority: project.properties.Priority?.select?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        type: project.properties.Type?.select?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        dueDate: project.properties['‡∏ß‡∏±‡∏ô‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö']?.date?.start || null,
        startDate: project.properties['Start Date']?.created_time || null,
        progress: project.properties.Progress?.rollup?.number || 0,
        description: project.properties.Text?.rich_text?.[0]?.text?.content || '',
        tags: project.properties.Tag?.multi_select?.map(tag => tag.name) || [],
        created_time: project.created_time,
        last_edited_time: project.last_edited_time
      }));
    } catch (error) {
      console.error('‚ùå Error fetching projects:', error.message);
      return [];
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Tasks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  async getAllTasks() {
    try {
      const response = await fetch(`https://api.notion.com/v1/databases/${process.env.NOTION_TASKS_DB_ID}/query`, {
        method: 'POST',
        headers: this.notionHeaders,
        body: JSON.stringify({
          page_size: 100
        })
      });

      if (!response.ok) return [];

      const data = await response.json();
      return data.results.map(task => ({
        id: task.id,
        name: task.properties.Name?.title?.[0]?.text?.content || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠',
        status: task.properties.Status?.status?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        priority: task.properties.Priority?.select?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        type: task.properties.Type?.select?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        dueDate: task.properties['Due Date']?.date?.start || null,
        deadline: task.properties.Deadline?.date?.start || null,
        owner: task.properties.Owner?.people?.[0]?.name || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö',
        project: task.properties.Project?.relation?.map(rel => rel.id) || [],
        description: task.properties.Description?.rich_text?.[0]?.text?.content || 
                    task.properties.‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô?.rich_text?.[0]?.text?.content || '',
        isOverdue: task.properties['Is Overdue']?.formula?.boolean || false,
        progress: task.properties.Progress?.formula?.number || 0,
        created_time: task.created_time,
        last_edited_time: task.last_edited_time
      }));
    } catch (error) {
      console.error('‚ùå Error fetching tasks:', error.message);
      return [];
    }
  }

  /**
   * ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Project ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
   */
  async analyzeProject(project) {
    const prompt = `
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô Data Quality Expert ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Project:
- ‡∏ä‡∏∑‡πà‡∏≠: "${project.name}"
- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${project.status}
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ${project.priority}
- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${project.type}
- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${project.dueDate || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: ${project.progress}%
- ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: "${project.description}"
- ‡πÅ‡∏ó‡πá‡∏Å: ${project.tags.join(', ') || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}
- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date(project.created_time).toLocaleDateString('th-TH')}
- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${new Date(project.last_edited_time).toLocaleDateString('th-TH')}

‡πÇ‡∏õ‡∏£‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON:
{
  "qualityScore": ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (0-100),
  "issues": [
    {
      "field": "‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
      "issue": "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö",
      "severity": "High/Medium/Low",
      "suggestion": "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
    }
  ],
  "positives": ["‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"],
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"],
  "dataConsistency": "High/Medium/Low",
  "completeness": "High/Medium/Low"
}`;

    try {
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        return this.createFallbackAnalysis(project);
      }

      const analysis = JSON.parse(jsonMatch[0]);
      analysis.projectId = project.id;
      analysis.projectName = project.name;
      
      return analysis;
    } catch (error) {
      console.error(`‚ùå Error analyzing project ${project.name}:`, error.message);
      return this.createFallbackAnalysis(project);
    }
  }

  /**
   * ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Tasks ‡∏Ç‡∏≠‡∏á Project
   */
  async analyzeTasks(tasks, project) {
    const tasksData = tasks.map(task => `
- ${task.name} | ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${task.status} | ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ${task.priority} | ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${task.dueDate || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} | ‡∏Ñ‡πâ‡∏≤‡∏á: ${task.isOverdue ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`).join('\n');

    const prompt = `
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô Data Quality Expert ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô

Project: "${project.name}" (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${project.status}, ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: ${project.dueDate || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'})

Tasks (${tasks.length} ‡∏á‡∏≤‡∏ô):
${tasksData}

‡πÇ‡∏õ‡∏£‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏Ç‡∏≠‡∏á Tasks ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON:
{
  "overallQuality": ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° (0-100),
  "taskIssues": [
    {
      "taskName": "‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô",
      "issues": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö"],
      "severity": "High/Medium/Low"
    }
  ],
  "patternIssues": ["‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"],
  "timelineConsistency": "High/Medium/Low",
  "priorityAlignment": "High/Medium/Low",
  "statusLogic": "High/Medium/Low",
  "recommendations": ["‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"]
}`;

    try {
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        return this.createFallbackTaskAnalysis(tasks, project);
      }

      const analysis = JSON.parse(jsonMatch[0]);
      analysis.projectId = project.id;
      analysis.projectName = project.name;
      analysis.taskCount = tasks.length;
      
      return analysis;
    } catch (error) {
      console.error(`‚ùå Error analyzing tasks for ${project.name}:`, error.message);
      return this.createFallbackTaskAnalysis(tasks, project);
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
   */
  async generateQualitySummary(projectAnalysis, taskAnalysis) {
    const avgProjectQuality = projectAnalysis.reduce((sum, p) => sum + p.qualityScore, 0) / projectAnalysis.length;
    const avgTaskQuality = taskAnalysis.reduce((sum, t) => sum + t.overallQuality, 0) / (taskAnalysis.length || 1);
    
    const totalIssues = [
      ...projectAnalysis.flatMap(p => p.issues),
      ...taskAnalysis.flatMap(t => t.taskIssues || [])
    ];

    const highSeverityIssues = totalIssues.filter(issue => issue.severity === 'High').length;
    const mediumSeverityIssues = totalIssues.filter(issue => issue.severity === 'Medium').length;

    return {
      overallScore: Math.round((avgProjectQuality + avgTaskQuality) / 2),
      projectQuality: Math.round(avgProjectQuality),
      taskQuality: Math.round(avgTaskQuality),
      totalIssues: totalIssues.length,
      highSeverityIssues,
      mediumSeverityIssues,
      status: this.getQualityStatus(Math.round((avgProjectQuality + avgTaskQuality) / 2))
    };
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
   */
  displayResults(projectAnalysis, taskAnalysis, summary) {
    console.log('\nüéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    console.log('===================================');
    
    console.log(`üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: ${summary.overallScore}/100 (${summary.status})`);
    console.log(`üìÅ ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û Projects: ${summary.projectQuality}/100`);
    console.log(`üìã ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û Tasks: ${summary.taskQuality}/100`);
    console.log(`‚ö†Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${summary.totalIssues} (‡∏£‡πâ‡∏≠‡∏ô‡πÅ‡∏£‡∏á: ${summary.highSeverityIssues}, ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á: ${summary.mediumSeverityIssues})`);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    console.log('\nüö® ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πà‡∏ß‡∏ô:');
    projectAnalysis.forEach(project => {
      const highIssues = project.issues.filter(issue => issue.severity === 'High');
      if (highIssues.length > 0) {
        console.log(`\nüìÅ Project: ${project.projectName}`);
        highIssues.forEach(issue => {
          console.log(`   ‚ùå ${issue.field}: ${issue.issue}`);
          console.log(`      üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ${issue.suggestion}`);
        });
      }
    });

    taskAnalysis.forEach(taskGroup => {
      const issues = taskGroup.taskIssues?.filter(issue => issue.severity === 'High') || [];
      if (issues.length > 0) {
        console.log(`\nüìã Tasks ‡πÉ‡∏ô Project: ${taskGroup.projectName}`);
        issues.forEach(issue => {
          console.log(`   ‚ùå ${issue.taskName}: ${issue.issues.join(', ')}`);
        });
      }
    });

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    console.log('\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:');
    projectAnalysis.forEach(project => {
      if (project.recommendations.length > 0) {
        console.log(`\nüìÅ ${project.projectName}:`);
        project.recommendations.forEach(rec => console.log(`   ‚Ä¢ ${rec}`));
      }
    });
  }

  /**
   * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
   */
  getQualityStatus(score) {
    if (score >= 80) return '‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°';
    if (score >= 60) return '‡∏î‡∏µ';
    if (score >= 40) return '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
    return '‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á';
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ AI ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
   */
  createFallbackAnalysis(project) {
    const issues = [];
    
    if (!project.dueDate) {
      issues.push({
        field: "‡∏ß‡∏±‡∏ô‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö",
        issue: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô",
        severity: "Medium",
        suggestion: "‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"
      });
    }
    
    if (!project.description || project.description.length < 10) {
      issues.push({
        field: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
        issue: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠",
        severity: "Medium",
        suggestion: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô"
      });
    }

    return {
      projectId: project.id,
      projectName: project.name,
      qualityScore: 70,
      issues,
      positives: ["‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"],
      recommendations: ["‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤"],
      dataConsistency: "Medium",
      completeness: "Medium"
    };
  }

  createFallbackTaskAnalysis(tasks, project) {
    return {
      projectId: project.id,
      projectName: project.name,
      taskCount: tasks.length,
      overallQuality: 65,
      taskIssues: [],
      patternIssues: ["‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"],
      timelineConsistency: "Medium",
      priorityAlignment: "Medium",
      statusLogic: "Medium",
      recommendations: ["‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"]
    };
  }
}

export default DataQualityAgent;
