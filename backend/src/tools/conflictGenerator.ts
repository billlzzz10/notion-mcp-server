import { Tool } from "@modelcontextprotocol/sdk/types.js";
import { notion } from "../services/notion.js";

export const conflictGeneratorTool: Tool = {
  name: "generate_conflicts",
  description: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£",
  inputSchema: {
    type: "object",
    properties: {
      conflictType: {
        type: "string",
        enum: ["character_vs_character", "character_vs_world", "character_vs_self", "ideological", "resource", "romantic"],
        description: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á"
      },
      intensity: {
        type: "string",
        enum: ["low", "medium", "high", "critical"],
        description: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á"
      },
      charactersInvolved: {
        type: "array",
        items: { type: "string" },
        description: "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á"
      },
      settingContext: {
        type: "string",
        description: "‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"
      },
      timeframe: {
        type: "string",
        enum: ["immediate", "short_term", "long_term", "arc_spanning"],
        description: "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÑ‡∏õ"
      }
    },
    required: ["conflictType", "intensity", "charactersInvolved"]
  }
};

export async function handleConflictGeneration(args: any) {
  const charactersDb = process.env.NOTION_CHARACTERS_DB_ID;
  const locationsDb = process.env.NOTION_LOCATIONS_DB_ID;
  
  if (!charactersDb) {
    throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö NOTION_CHARACTERS_DB_ID");
  }

  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const characterData = await getCharacterDetails(charactersDb, args.charactersInvolved);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á AI Prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gemini
    const conflictPrompt = generateConflictPrompt(args, characterData);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI Prompts (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const aiPromptsDb = process.env.NOTION_AI_PROMPTS_DB_ID;
    if (aiPromptsDb) {
      await saveConflictPrompt(aiPromptsDb, conflictPrompt, args);
    }

    return {
      content: [
        {
          type: "text",
          text: `üé≠ **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô:**\n\n${conflictPrompt}\n\nüí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡πÉ‡∏ä‡πâ prompt ‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ö Gemini AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°`
        }
      ]
    };

  } catch (error) {
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡πÑ‡∏î‡πâ: ${error}`);
  }
}

async function getCharacterDetails(charactersDb: string, characterNames: string[]) {
  const characters = [];
  
  // Get data source ID for Characters DB
  const dbResponse = await notion.databases.retrieve({ database_id: charactersDb });
  const dataSource = dbResponse.data_sources?.[0];
  if (!dataSource) {
    throw new Error(`No data source found for Characters DB: ${charactersDb}`);
  }

  for (const name of characterNames) {
    try {
      const response = await notion.request({
        path: `data_sources/${dataSource.id}/query`,
        method: 'post',
        body: {
          filter: {
            property: "Name",
            title: {
              contains: name
            }
          }
        }
      }) as any;

      if (response.results.length > 0) {
        const char = response.results[0] as any;
        const properties = char.properties;
        
        characters.push({
          name: properties.Name?.title?.[0]?.text?.content || name,
          nickname: properties.Nickname?.rich_text?.[0]?.text?.content || "",
          role: properties.Role?.select?.name || "",
          personality: properties.Personality?.rich_text?.[0]?.text?.content || "",
          goal: properties.Goal?.rich_text?.[0]?.text?.content || "",
          background: properties.Background?.rich_text?.[0]?.text?.content || "",
          abilities: properties.Abilities?.rich_text?.[0]?.text?.content || ""
        });
      }
    } catch (error) {
      console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ ${name}:`, error);
    }
  }
  
  return characters;
}

function generateConflictPrompt(args: any, characters: any[]): string {
  let prompt = `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡πÉ‡∏ô‡πÇ‡∏•‡∏Å Ashval ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:\n\n`;
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  prompt += `**‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á:** ${translateConflictType(args.conflictType)}\n`;
  prompt += `**‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á:** ${translateIntensity(args.intensity)}\n`;
  prompt += `**‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:** ${translateTimeframe(args.timeframe)}\n\n`;
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
  prompt += `**‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:**\n`;
  characters.forEach((char, index) => {
    prompt += `${index + 1}. **${char.name}** (${char.nickname || char.role})\n`;
    if (char.personality) prompt += `   - ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å: ${char.personality}\n`;
    if (char.goal) prompt += `   - ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${char.goal}\n`;
    if (char.abilities) prompt += `   - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ: ${char.abilities}\n`;
    prompt += `\n`;
  });
  
  // ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
  if (args.settingContext) {
    prompt += `**‡∏ö‡∏£‡∏¥‡∏ö‡∏ó:** ${args.settingContext}\n\n`;
  }
  
  // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞
  prompt += `**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:**\n`;
  prompt += `1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡πÇ‡∏•‡∏Å Ashval (Dark Fantasy)\n`;
  prompt += `2. ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö:\n`;
  
  switch (args.conflictType) {
    case "character_vs_character":
      prompt += `   - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ô‡∏¥‡∏¢‡∏°\n`;
      prompt += `   - ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡πà‡∏á‡∏ä‡∏¥‡∏á\n`;
      break;
    case "character_vs_world":
      prompt += `   - ‡∏Å‡∏é‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£\n`;
      prompt += `   - ‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡∏á‡∏Ñ‡∏°\n`;
      break;
    case "character_vs_self":
      prompt += `   - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÉ‡∏à\n`;
      prompt += `   - ‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Å‡∏±‡∏ö‡∏≠‡∏î‡∏µ‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ß\n`;
      break;
    case "ideological":
      prompt += `   - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏≠‡∏∏‡∏î‡∏°‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠\n`;
      prompt += `   - ‡∏ó‡∏±‡∏®‡∏ô‡∏Ñ‡∏ï‡∏¥‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏û‡∏•‡∏±‡∏á Arcana\n`;
      break;
    case "resource":
      prompt += `   - ‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡πà‡∏á‡∏ä‡∏¥‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡∏≤‡∏Å\n`;
      prompt += `   - ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≥‡∏ô‡∏≤‡∏à\n`;
      break;
    case "romantic":
      prompt += `   - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°\n`;
      prompt += `   - ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà\n`;
      break;
  }
  
  prompt += `3. ‡πÄ‡∏™‡∏ô‡∏≠ 3 ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á\n`;
  prompt += `4. ‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å\n`;
  prompt += `5. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏≤‡∏ô‡∏≤‡πÅ‡∏•‡∏∞ Arcana ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏•‡∏Å\n\n`;
  
  prompt += `**‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô:** ‡∏°‡∏∑‡∏î‡∏°‡∏±‡∏ß, complex, psychological depth\n`;
  prompt += `**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß:** 300-500 ‡∏Ñ‡∏≥`;
  
  return prompt;
}

async function saveConflictPrompt(aiPromptsDb: string, prompt: string, args: any) {
  try {
    // Get data source ID
    const dbResponse = await notion.databases.retrieve({ database_id: aiPromptsDb });
    const dataSource = dbResponse.data_sources?.[0];
    if (!dataSource) {
      console.error(`No data source found for AI Prompts DB: ${aiPromptsDb}`);
      return;
    }

    await notion.pages.create({
      parent: { data_source_id: dataSource.id },
      properties: {
        "Prompt Type": {
          select: {
            name: "Conflict Generation"
          }
        },
        "Content": {
          rich_text: [
            {
              text: {
                content: prompt
              }
            }
          ]
        },
        "Parameters": {
          rich_text: [
            {
              text: {
                content: `Type: ${args.conflictType}, Intensity: ${args.intensity}, Characters: ${args.charactersInvolved.join(", ")}`
              }
            }
          ]
        }
      }
    });
  } catch (error) {
    console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Conflict Prompt:", error);
  }
}

function translateConflictType(type: string): string {
  const translations = {
    "character_vs_character": "‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ vs ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£",
    "character_vs_world": "‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ vs ‡πÇ‡∏•‡∏Å",
    "character_vs_self": "‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ vs ‡∏ï‡∏ô‡πÄ‡∏≠‡∏á",
    "ideological": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏ó‡∏≤‡∏á‡∏≠‡∏∏‡∏î‡∏°‡∏Å‡∏≤‡∏£‡∏ì‡πå",
    "resource": "‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡πà‡∏á‡∏ä‡∏¥‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£",
    "romantic": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å"
  };
  return translations[type as keyof typeof translations] || type;
}

function translateIntensity(intensity: string): string {
  const translations = {
    "low": "‡∏ï‡πà‡∏≥ (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)",
    "medium": "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î)",
    "high": "‡∏™‡∏π‡∏á (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á)",
    "critical": "‡∏ß‡∏¥‡∏Å‡∏§‡∏ï (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á)"
  };
  return translations[intensity as keyof typeof translations] || intensity;
}

function translateTimeframe(timeframe: string): string {
  const translations = {
    "immediate": "‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡∏â‡∏≤‡∏Å‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)",
    "short_term": "‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô (2-3 ‡∏ï‡∏≠‡∏ô)",
    "long_term": "‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß (5+ ‡∏ï‡∏≠‡∏ô)",
    "arc_spanning": "‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢ Arc"
  };
  return translations[timeframe as keyof typeof translations] || timeframe;
}
