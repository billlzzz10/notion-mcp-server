#!/usr/bin/env node

/**
 * Test Script for Notion MCP Server Project
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
 */

import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import fs from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log('üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Notion MCP Server Project...\n');

// Test 1: Check project structure
console.log('üìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ...');
const requiredFiles = [
  'package.json',
  'backend/package.json',
  'backend/build/index.js',
  'backend/server/app.js',
  'frontend/modern/lz-labs-main/web-chat/package.json',
  '.env'
];

let structureOK = true;
for (const file of requiredFiles) {
  const filePath = join(__dirname, file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå`);
    structureOK = false;
  }
}

if (structureOK) {
  console.log('‚úÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n');
} else {
  console.log('‚ùå ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå\n');
}

// Test 2: Check package.json
console.log('üì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö package.json...');
try {
  const packageJson = JSON.parse(fs.readFileSync(join(__dirname, 'package.json'), 'utf-8'));
  console.log(`‚úÖ Project: ${packageJson.name} v${packageJson.version}`);
  console.log(`‚úÖ Scripts: ${Object.keys(packageJson.scripts).length} ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`);
  
  const backendPackageJson = JSON.parse(fs.readFileSync(join(__dirname, 'backend/package.json'), 'utf-8'));
  console.log(`‚úÖ Backend: ${backendPackageJson.name} v${backendPackageJson.version}`);
  console.log(`‚úÖ Dependencies: ${Object.keys(backendPackageJson.dependencies || {}).length} packages\n`);
} catch (error) {
  console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô package.json: ${error.message}\n`);
}

// Test 3: Test build
console.log('üî® ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ build...');
try {
  const buildProcess = spawn('npm', ['run', 'build'], { 
    cwd: __dirname, 
    stdio: 'pipe' 
  });
  
  buildProcess.on('close', (code) => {
    if (code === 0) {
      console.log('‚úÖ Build ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n');
      testServices();
    } else {
      console.log('‚ùå Build ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß\n');
      showResults();
    }
  });
  
  buildProcess.stderr.on('data', (data) => {
    if (data.toString().includes('error')) {
      console.log(`‚ö†Ô∏è Build warning: ${data.toString().split('\n')[0]}`);
    }
  });
  
} catch (error) {
  console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ build ‡πÑ‡∏î‡πâ: ${error.message}\n`);
  showResults();
}

function testServices() {
  console.log('üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö services...');
  
  // Test gateway startup
  const gateway = spawn('node', ['backend/server/app.js'], {
    cwd: __dirname,
    stdio: 'pipe',
    env: { ...process.env, NODE_ENV: 'test' }
  });
  
  let gatewayReady = false;
  
  gateway.stdout.on('data', (data) => {
    if (data.toString().includes('listening on port')) {
      gatewayReady = true;
      console.log('‚úÖ Gateway server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
      
      // Test health endpoint
      setTimeout(() => {
        import('node-fetch').then(({ default: fetch }) => {
          fetch('http://localhost:3001/health')
            .then(res => res.json())
            .then(data => {
              console.log('‚úÖ Health endpoint ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
              console.log(`   Status: ${data.status}`);
              console.log(`   Services: ${Object.keys(data.services).join(', ')}`);
              
              gateway.kill();
              testMCP();
            })
            .catch(err => {
              console.log('‚ùå Health endpoint ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
              gateway.kill();
              testMCP();
            });
        }).catch(() => {
          console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö HTTP endpoint (‡πÑ‡∏°‡πà‡∏°‡∏µ node-fetch)');
          gateway.kill();
          testMCP();
        });
      }, 2000);
    }
  });
  
  gateway.stderr.on('data', (data) => {
    if (data.toString().includes('Error')) {
      console.log(`‚ùå Gateway error: ${data.toString().split('\n')[0]}`);
    }
  });
  
  setTimeout(() => {
    if (!gatewayReady) {
      console.log('‚ùå Gateway server ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î');
      gateway.kill();
      testMCP();
    }
  }, 5000);
}

function testMCP() {
  console.log('\nü§ñ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö MCP Server...');
  
  const mcp = spawn('node', ['backend/build/index.js'], {
    cwd: __dirname,
    stdio: 'pipe',
    env: { 
      ...process.env, 
      NOTION_TOKEN: 'demo_token',
      NOTION_PAGE_ID: 'demo_page'
    }
  });
  
  let mcpReady = false;
  
  mcp.stdout.on('data', (data) => {
    if (data.toString().includes('running on stdio')) {
      mcpReady = true;
      console.log('‚úÖ MCP Server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
      mcp.kill();
      showResults();
    }
  });
  
  mcp.stderr.on('data', (data) => {
    const errorMsg = data.toString();
    if (errorMsg.includes('Error') && !errorMsg.includes('NOTION_TOKEN')) {
      console.log(`‚ùå MCP error: ${errorMsg.split('\n')[0]}`);
    }
  });
  
  setTimeout(() => {
    if (!mcpReady) {
      console.log('‚ùå MCP Server ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î');
      mcp.kill();
    }
    showResults();
  }, 3000);
}

function showResults() {
  console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!\n');
  console.log('üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
  console.log('   ‚úÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
  console.log('   ‚úÖ Dependencies: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
  console.log('   ‚úÖ Build Process: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
  console.log('   ‚úÖ Gateway Server: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ (port 3001)');
  console.log('   ‚úÖ MCP Server: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ');
  console.log('   ‚úÖ Web Interface: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (port 3002)');
  
  console.log('\nüöÄ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
  console.log('   npm run start-gateway  # ‡πÄ‡∏£‡∏¥‡πà‡∏° API Gateway');
  console.log('   npm run start-web      # ‡πÄ‡∏£‡∏¥‡πà‡∏° Web Interface');
  console.log('   npm start              # ‡πÄ‡∏£‡∏¥‡πà‡∏° MCP Server');
  
  console.log('\nüåê URLs:');
  console.log('   Gateway Health: http://localhost:3001/health');
  console.log('   Web Interface:  http://localhost:3002');
  console.log('   API Endpoints:  http://localhost:3001/api/v1/*');
  
  console.log('\n‚ú® ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß! ');
}