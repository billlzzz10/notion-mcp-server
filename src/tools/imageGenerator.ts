import { Tool } from "@modelcontextprotocol/sdk/types.js";
import { notion } from "../services/notion.js";

export const imageGeneratorTool: Tool = {
  name: "generate_character_image",
  description: "‡∏™‡∏£‡πâ‡∏≤‡∏á AI Prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà",
  inputSchema: {
    type: "object",
    properties: {
      entityType: {
        type: "string",
        enum: ["character", "location", "scene"],
        description: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û"
      },
      entityName: {
        type: "string",
        description: "‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡∏â‡∏≤‡∏Å"
      },
      imageStyle: {
        type: "string",
        enum: ["realistic", "anime", "dark_fantasy", "concept_art", "detailed_illustration"],
        description: "‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏†‡∏≤‡∏û"
      },
      imageService: {
        type: "string",
        enum: ["midjourney", "dalle", "stable_diffusion", "leonardo"],
        description: "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û AI"
      },
      aspectRatio: {
        type: "string",
        enum: ["1:1", "16:9", "9:16", "3:4", "4:3"],
        description: "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏†‡∏≤‡∏û",
        default: "1:1"
      },
      includeDetails: {
        type: "boolean",
        description: "‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
        default: true
      }
    },
    required: ["entityType", "entityName", "imageStyle", "imageService"]
  }
};

export async function handleImageGeneration(args: any) {
  try {
    let entityData: any = {};
    
    if (args.includeDetails) {
      entityData = await getEntityData(args.entityType, args.entityName);
    }

    const imagePrompt = generateImagePrompt(args, entityData);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Prompt ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI Prompts
    const aiPromptsDb = process.env.NOTION_AI_PROMPTS_DB_ID;
    if (aiPromptsDb) {
      await saveImagePrompt(aiPromptsDb, imagePrompt, args);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Make.com Webhook URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û
    const webhookInstructions = generateWebhookInstructions(args.imageService, imagePrompt);

    return {
      content: [
        {
          type: "text",
          text: `üé® **AI Image Generation Prompt:**\n\n**‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${args.imageService}:**\n\`\`\`\n${imagePrompt}\n\`\`\`\n\n${webhookInstructions}\n\nüí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å prompt ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö ${args.imageService} ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ Make.com Webhook ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥`
        }
      ]
    };

  } catch (error) {
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Image Prompt ‡πÑ‡∏î‡πâ: ${error}`);
  }
}

async function getEntityData(entityType: string, entityName: string) {
  let dbId = "";
  let nameProperty = "Name";

  switch (entityType) {
    case "character":
      dbId = process.env.NOTION_CHARACTERS_DB_ID || "";
      nameProperty = "Name";
      break;
    case "location":
      dbId = process.env.NOTION_LOCATIONS_DB_ID || "";
      nameProperty = "Name";
      break;
    case "scene":
      dbId = process.env.NOTION_SCENES_DB_ID || "";
      nameProperty = "Title";
      break;
  }

  if (!dbId) {
    throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö Database ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${entityType}`);
  }

  try {
    const response = await notion.databases.query({
      database_id: dbId,
      filter: {
        property: nameProperty,
        title: {
          contains: entityName
        }
      }
    });

    if (response.results.length > 0) {
      const entity = response.results[0] as any;
      return entity.properties;
    }

    return {};
  } catch (error) {
    console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${entityType}:`, error);
    return {};
  }
}

function generateImagePrompt(args: any, entityData: any): string {
  let basePrompt = "";
  
  switch (args.entityType) {
    case "character":
      basePrompt = generateCharacterPrompt(args, entityData);
      break;
    case "location":
      basePrompt = generateLocationPrompt(args, entityData);
      break;
    case "scene":
      basePrompt = generateScenePrompt(args, entityData);
      break;
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
  let styleModifiers = getStyleModifiers(args.imageStyle);
  let serviceSpecificTags = getServiceSpecificTags(args.imageService);
  
  // ‡∏£‡∏ß‡∏° prompt ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  let finalPrompt = `${basePrompt}, ${styleModifiers}, ${serviceSpecificTags}`;
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° negative prompts ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ashval theme
  if (args.imageService === "stable_diffusion" || args.imageService === "leonardo") {
    finalPrompt += `\n\nNegative Prompt: bright colors, cheerful, cartoon, low quality, blurry, modern clothing, technology, vehicles, guns`;
  }

  return finalPrompt;
}

function generateCharacterPrompt(args: any, entityData: any): string {
  let prompt = "";
  
  const name = entityData.Name?.title?.[0]?.text?.content || args.entityName;
  const nickname = entityData.Nickname?.rich_text?.[0]?.text?.content || "";
  const appearance = entityData.Appearance?.rich_text?.[0]?.text?.content || "";
  const personality = entityData.Personality?.rich_text?.[0]?.text?.content || "";
  const abilities = entityData.Abilities?.rich_text?.[0]?.text?.content || "";
  const role = entityData.Role?.select?.name || "";
  const gender = entityData.Gender?.select?.name || "";
  const age = entityData.Age?.number || "";

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á base prompt
  prompt = `Portrait of ${name}`;
  if (nickname) prompt += ` (${nickname})`;
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  if (age) prompt += `, ${age} years old`;
  if (gender) prompt += `, ${gender === "‡∏ä‡∏≤‡∏¢" ? "male" : "female"}`;
  if (role) prompt += `, ${translateRole(role)}`;
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
  if (appearance) {
    prompt += `, ${translateAppearance(appearance)}`;
  } else {
    // ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å Ashval
    prompt += `, dark fantasy character, medieval fantasy clothing`;
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏±‡∏á
  if (personality) {
    const personalityEng = translatePersonality(personality);
    prompt += `, ${personalityEng} expression`;
  }
  
  if (abilities && abilities.includes("Arcana")) {
    prompt += `, mystical aura, magical energy emanating`;
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏® Ashval
  prompt += `, dark fantasy setting, mana crystal ambiance, ethereal and umbra energy background`;
  
  return prompt;
}

function generateLocationPrompt(args: any, entityData: any): string {
  let prompt = "";
  
  const name = entityData.Name?.title?.[0]?.text?.content || args.entityName;
  const type = entityData.Type?.select?.name || "";
  const description = entityData.Description?.rich_text?.[0]?.text?.content || "";
  const atmosphere = entityData.Atmosphere?.select?.name || "";
  const importance = entityData.Importance?.number || 5;
  
  prompt = `${name}`;
  if (type) prompt += `, ${translateLocationType(type)}`;
  
  if (description) {
    prompt += `, ${description}`;
  }
  
  if (atmosphere) {
    prompt += `, ${translateAtmosphere(atmosphere)} atmosphere`;
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
  if (importance >= 8) {
    prompt += `, highly detailed, epic scale, dramatic lighting`;
  } else if (importance >= 5) {
    prompt += `, detailed environment, atmospheric lighting`;
  } else {
    prompt += `, ambient environment`;
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ò‡∏µ‡∏° Ashval
  prompt += `, dark fantasy world, mana-infused environment, mystical elements`;
  
  return prompt;
}

function generateScenePrompt(args: any, entityData: any): string {
  let prompt = "";
  
  const title = entityData.Title?.title?.[0]?.text?.content || args.entityName;
  const summary = entityData.Summary?.rich_text?.[0]?.text?.content || "";
  const tone = entityData.Tone?.select?.name || "";
  const conflict = entityData.Conflict?.rich_text?.[0]?.text?.content || "";
  const purpose = entityData.Purpose?.rich_text?.[0]?.text?.content || "";
  
  prompt = `Scene: ${title}`;
  
  if (summary) {
    prompt += `, ${summary}`;
  }
  
  if (tone) {
    prompt += `, ${translateTone(tone)} mood`;
  }
  
  if (conflict) {
    prompt += `, tension and conflict, ${conflict}`;
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÇ‡∏•‡∏Å Ashval
  prompt += `, dark fantasy scene, Ashval world setting, mana energy effects`;
  
  return prompt;
}

function getStyleModifiers(style: string): string {
  const styleMap = {
    realistic: "photorealistic, high quality, detailed, cinematic lighting",
    anime: "anime style, detailed anime art, vibrant colors, studio quality",
    dark_fantasy: "dark fantasy art, gothic, atmospheric, dramatic shadows",
    concept_art: "concept art, digital painting, professional illustration",
    detailed_illustration: "highly detailed illustration, digital art, fantasy art"
  };
  
  return styleMap[style as keyof typeof styleMap] || styleMap.dark_fantasy;
}

function getServiceSpecificTags(service: string): string {
  const serviceMap = {
    midjourney: "--ar 1:1 --v 6 --style raw",
    dalle: "high quality, detailed, artistic",
    stable_diffusion: "masterpiece, best quality, ultra detailed, 8k",
    leonardo: "high quality, professional, artistic rendering"
  };
  
  return serviceMap[service as keyof typeof serviceMap] || "";
}

async function saveImagePrompt(aiPromptsDb: string, prompt: string, args: any) {
  try {
    await notion.pages.create({
      parent: { database_id: aiPromptsDb },
      properties: {
        "Prompt Type": {
          select: {
            name: "Image Generation"
          }
        },
        "Content": {
          rich_text: [
            {
              text: {
                content: prompt
              }
            }
          ]
        },
        "Parameters": {
          rich_text: [
            {
              text: {
                content: `Entity: ${args.entityName}, Type: ${args.entityType}, Style: ${args.imageStyle}, Service: ${args.imageService}`
              }
            }
          ]
        }
      }
    });
  } catch (error) {
    console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Image Prompt:", error);
  }
}

function generateWebhookInstructions(service: string, prompt: string): string {
  let instructions = `\nüîó **‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Make.com:**\n\n`;
  
  instructions += `**‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ${service} Webhook:**\n`;
  instructions += `1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Scenario ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Make.com\n`;
  instructions += `2. ‡πÄ‡∏û‡∏¥‡πà‡∏° Webhook Module ‡πÄ‡∏õ‡πá‡∏ô Trigger\n`;
  instructions += `3. ‡πÄ‡∏û‡∏¥‡πà‡∏° ${service} Module ‡πÄ‡∏õ‡πá‡∏ô Action\n`;
  instructions += `4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Prompt: \`{{webhook.prompt}}\`\n`;
  
  switch (service) {
    case "midjourney":
      instructions += `5. ‡πÉ‡∏ä‡πâ Midjourney Bot API ‡∏´‡∏£‡∏∑‡∏≠ Discord Webhook\n`;
      instructions += `6. ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: \`/imagine prompt: {{webhook.prompt}}\`\n`;
      break;
    case "dalle":
      instructions += `5. ‡πÉ‡∏ä‡πâ OpenAI API Key\n`;
      instructions += `6. Endpoint: https://api.openai.com/v1/images/generations\n`;
      break;
    case "stable_diffusion":
      instructions += `5. ‡πÉ‡∏ä‡πâ Stability AI API ‡∏´‡∏£‡∏∑‡∏≠ RunPod\n`;
      instructions += `6. ‡∏™‡πà‡∏á POST request ‡∏û‡∏£‡πâ‡∏≠‡∏° prompt ‡πÅ‡∏•‡∏∞ negative_prompt\n`;
      break;
    case "leonardo":
      instructions += `5. ‡πÉ‡∏ä‡πâ Leonardo AI API\n`;
      instructions += `6. Endpoint: https://cloud.leonardo.ai/api/rest/v1/generations\n`;
      break;
  }
  
  instructions += `\n**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Webhook Payload:**\n`;
  instructions += `\`\`\`json\n`;
  instructions += `{\n`;
  instructions += `  "prompt": "${prompt}",\n`;
  instructions += `  "entity_name": "${service}",\n`;
  instructions += `  "callback_url": "YOUR_NOTION_WEBHOOK_URL"\n`;
  instructions += `}\n`;
  instructions += `\`\`\``;
  
  return instructions;
}

// Helper functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤
function translateRole(role: string): string {
  const roleMap: { [key: string]: string } = {
    "‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢": "adventurer",
    "‡∏ô‡∏±‡∏Å‡∏£‡∏ö": "warrior", 
    "‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏¢‡∏≤‡∏Å‡∏•": "mage",
    "‡∏ô‡∏±‡∏Å‡∏•‡πà‡∏≤": "hunter",
    "‡∏û‡πà‡∏≠‡∏Ñ‡πâ‡∏≤": "merchant",
    "‡∏ô‡∏±‡∏Å‡∏õ‡∏£‡∏≤‡∏ä‡∏ç‡πå": "scholar"
  };
  return roleMap[role] || role;
}

function translateAppearance(appearance: string): string {
  // ‡πÅ‡∏õ‡∏•‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  return appearance
    .replace(/‡∏ú‡∏°‡∏î‡∏≥/g, "black hair")
    .replace(/‡∏ú‡∏°‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•/g, "brown hair") 
    .replace(/‡∏ú‡∏°‡∏ö‡∏•‡∏≠‡∏ô‡∏î‡πå/g, "blonde hair")
    .replace(/‡∏ï‡∏≤‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô/g, "blue eyes")
    .replace(/‡∏ï‡∏≤‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á/g, "golden eyes")
    .replace(/‡∏ï‡∏≤‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•/g, "brown eyes")
    .replace(/‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÄ‡∏´‡∏•‡πá‡∏Å/g, "metal armor")
    .replace(/‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤/g, "clothing")
    .replace(/‡∏™‡∏π‡∏á/g, "tall")
    .replace(/‡πÄ‡∏ï‡∏µ‡πâ‡∏¢/g, "short");
}

function translatePersonality(personality: string): string {
  const personalityMap: { [key: string]: string } = {
    "‡πÄ‡∏á‡∏µ‡∏¢‡∏ö": "calm and serious",
    "‡πÅ‡∏ï‡πà‡∏Ñ‡∏¥‡∏î‡∏°‡∏≤‡∏Å": "thoughtful and contemplative", 
    "‡∏£‡πà‡∏≤‡πÄ‡∏£‡∏¥‡∏á": "cheerful",
    "‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à": "confident",
    "‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á": "cautious",
    "‡∏Å‡∏•‡πâ‡∏≤‡∏´‡∏≤‡∏ç": "brave"
  };
  
  let result = personality;
  Object.entries(personalityMap).forEach(([thai, english]) => {
    result = result.replace(new RegExp(thai, 'g'), english);
  });
  
  return result;
}

function translateLocationType(type: string): string {
  const typeMap: { [key: string]: string } = {
    "‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏á": "mine",
    "‡∏õ‡πà‡∏≤": "forest", 
    "‡πÄ‡∏°‡∏∑‡∏≠‡∏á": "city",
    "‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô": "village",
    "‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó": "castle",
    "‡∏ñ‡πâ‡∏≥": "cave",
    "‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏£‡∏≤‡∏¢": "desert",
    "‡∏†‡∏π‡πÄ‡∏Ç‡∏≤": "mountain"
  };
  return typeMap[type] || type;
}

function translateAtmosphere(atmosphere: string): string {
  const atmosphereMap: { [key: string]: string } = {
    "‡∏™‡∏á‡∏ö": "peaceful",
    "‡∏ô‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ß": "ominous",
    "‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö": "mysterious", 
    "‡∏°‡∏∑‡∏î‡∏°‡∏±‡∏ß": "dark and foreboding",
    "‡∏ß‡∏¥‡πÄ‡∏®‡∏©": "magical",
    "‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢": "dangerous"
  };
  return atmosphereMap[atmosphere] || atmosphere;
}

function translateTone(tone: string): string {
  const toneMap: { [key: string]: string } = {
    "‡∏°‡∏∑‡∏î‡∏°‡∏±‡∏ß": "dark and grim",
    "‡∏™‡∏ß‡πà‡∏≤‡∏á": "bright and hopeful",
    "‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î": "tense",
    "‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢": "relaxed",
    "‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö": "mysterious"
  };
  return toneMap[tone] || tone;
}
