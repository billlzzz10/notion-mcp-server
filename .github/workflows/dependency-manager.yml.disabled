name: Smart Dependency Manager

on:
  schedule:
    - cron: '0 2 * * 1'  # ทุกวันจันทร์เวลา 02:00
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - security

jobs:
  dependency-analysis:
    runs-on: ubuntu-latest
    
    outputs:
      has-updates: ${{ steps.check-updates.outputs.has-updates }}
      security-issues: ${{ steps.security-check.outputs.security-issues }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    # === ตรวจสอบ Dependencies ===
    - name: Check for Updates
      id: check-updates
      run: |
        echo "🔍 Checking for dependency updates..."
        
        # ติดตั้ง npm-check-updates
        npm install -g npm-check-updates
        
        # ตรวจสอบ updates
        ncu --jsonUpgraded > .github/dependency-updates.json || echo "{}" > .github/dependency-updates.json
        
        # ตรวจสอบว่ามี updates หรือไม่
        if [ -s .github/dependency-updates.json ] && [ "$(cat .github/dependency-updates.json)" != "{}" ]; then
          echo "has-updates=true" >> $GITHUB_OUTPUT
          echo "✅ Updates found"
        else
          echo "has-updates=false" >> $GITHUB_OUTPUT
          echo "✨ All dependencies up to date"
        fi

    # === ตรวจสอบ Security ===
    - name: Security Audit
      id: security-check
      run: |
        echo "🔒 Running security audit..."
        
        # ตรวจสอบ vulnerabilities
        npm audit --json > .github/security-audit.json || true
        
        # วิเคราะห์ผลลัพธ์
        node -e "
        const fs = require('fs');
        
        try {
          const auditResult = JSON.parse(fs.readFileSync('.github/security-audit.json', 'utf8'));
          
          const report = {
            timestamp: new Date().toISOString(),
            totalVulnerabilities: auditResult.metadata?.vulnerabilities?.total || 0,
            critical: auditResult.metadata?.vulnerabilities?.critical || 0,
            high: auditResult.metadata?.vulnerabilities?.high || 0,
            moderate: auditResult.metadata?.vulnerabilities?.moderate || 0,
            low: auditResult.metadata?.vulnerabilities?.low || 0,
            info: auditResult.metadata?.vulnerabilities?.info || 0
          };
          
          fs.writeFileSync('.github/security-report.json', JSON.stringify(report, null, 2));
          
          if (report.totalVulnerabilities > 0) {
            console.log('🚨 Security issues found:', report.totalVulnerabilities);
            console.log('security-issues=true');
          } else {
            console.log('✅ No security vulnerabilities found');
            console.log('security-issues=false');
          }
          
        } catch (e) {
          console.log('⚠️ Could not parse audit results');
          console.log('security-issues=false');
        }
        " >> $GITHUB_OUTPUT

    # === สร้าง Dependency Report ===
    - name: Generate Dependency Report
      run: |
        echo "📊 Generating dependency report..."
        
        node -e "
        const fs = require('fs');
        
        let report = '# 📦 Dependency Analysis Report\n\n';
        report += \`Generated: \${new Date().toLocaleString('th-TH')}\n\n\`;
        
        // อ่าน package.json
        try {
          const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
          
          const deps = Object.keys(pkg.dependencies || {});
          const devDeps = Object.keys(pkg.devDependencies || {});
          
          report += '## 📈 Dependency Summary\n\n';
          report += \`- **Production Dependencies**: \${deps.length}\n\`;
          report += \`- **Development Dependencies**: \${devDeps.length}\n\`;
          report += \`- **Total**: \${deps.length + devDeps.length}\n\n\`;
          
          // รายการ dependencies
          if (deps.length > 0) {
            report += '## 🚀 Production Dependencies\n\n';
            deps.forEach(dep => {
              const version = pkg.dependencies[dep];
              report += \`- **\${dep}**: \${version}\n\`;
            });
            report += '\n';
          }
          
        } catch (e) {
          report += '❌ Could not read package.json\n\n';
        }
        
        // อ่าน security report
        try {
          const security = JSON.parse(fs.readFileSync('.github/security-report.json', 'utf8'));
          
          report += '## 🔒 Security Status\n\n';
          if (security.totalVulnerabilities === 0) {
            report += '✅ No security vulnerabilities found\n\n';
          } else {
            report += \`⚠️ **Total Vulnerabilities**: \${security.totalVulnerabilities}\n\`;
            if (security.critical > 0) report += \`- 🔴 Critical: \${security.critical}\n\`;
            if (security.high > 0) report += \`- 🟠 High: \${security.high}\n\`;
            if (security.moderate > 0) report += \`- 🟡 Moderate: \${security.moderate}\n\`;
            if (security.low > 0) report += \`- 🟢 Low: \${security.low}\n\`;
            report += '\n';
          }
        } catch (e) {
          report += '❌ Could not read security report\n\n';
        }
        
        // อ่าน available updates
        try {
          const updates = JSON.parse(fs.readFileSync('.github/dependency-updates.json', 'utf8'));
          
          if (Object.keys(updates).length > 0) {
            report += '## 🔄 Available Updates\n\n';
            Object.entries(updates).forEach(([pkg, version]) => {
              report += \`- **\${pkg}**: \${version}\n\`;
            });
            report += '\n';
          } else {
            report += '## ✅ All Dependencies Up to Date\n\n';
          }
        } catch (e) {
          report += '❌ Could not read update information\n\n';
        }
        
        fs.writeFileSync('.github/dependency-report.md', report);
        console.log('📊 Dependency report generated');
        "

    # === Upload Reports as Artifacts ===
    - name: Upload Reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: .github/*-report.*

  # === Auto-Update Dependencies (ถ้าปลอดภัย) ===
  auto-update:
    runs-on: ubuntu-latest
    needs: dependency-analysis
    if: needs.dependency-analysis.outputs.has-updates == 'true' && needs.dependency-analysis.outputs.security-issues == 'false'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Update Dependencies
      run: |
        echo "🔄 Updating dependencies..."
        
        # ติดตั้ง tools
        npm install -g npm-check-updates
        
        # อัปเดตตาม input type
        UPDATE_TYPE="${{ github.event.inputs.update_type || 'patch' }}"
        
        case $UPDATE_TYPE in
          "patch")
            echo "🔧 Updating patch versions only..."
            ncu -u --target patch
            ;;
          "minor")
            echo "🔧 Updating minor versions..."
            ncu -u --target minor
            ;;
          "major")
            echo "🔧 Updating all versions (careful!)..."
            ncu -u
            ;;
          "security")
            echo "🔒 Updating security vulnerabilities only..."
            npm audit fix --force
            ;;
        esac

    - name: Install Updated Dependencies
      run: npm install

    - name: Run Tests
      run: |
        echo "🧪 Running tests after updates..."
        npm test || echo "⚠️ Tests failed, but continuing..."

    - name: Build Project
      run: |
        echo "🏗️ Building project after updates..."
        npm run build

    - name: Commit Updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Dependency Update Bot"
        
        if ! git diff --quiet package.json package-lock.json; then
          echo "📝 Committing dependency updates..."
          git add package.json package-lock.json
          git commit -m "🔄 Auto-update dependencies [${{ github.event.inputs.update_type || 'patch' }}] [skip ci]"
          git push
          echo "✅ Dependencies updated and committed"
        else
          echo "✨ No dependency changes to commit"
        fi
