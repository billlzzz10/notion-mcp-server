name: Security & Performance Monitor

on:
  push:
    branches: [ main, master ]
  schedule:
    - cron: '0 2 * * 1'  # ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå 2:00 AM
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Security Audit
      run: |
        echo "üîí Running security audit..."
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        npm audit --json > .github/security-audit.json || true
        
        node -e "
        const fs = require('fs');
        
        try {
          const auditData = JSON.parse(fs.readFileSync('.github/security-audit.json', 'utf8'));
          
          const report = {
            timestamp: new Date().toISOString(),
            summary: {
              vulnerabilities: auditData.metadata?.vulnerabilities || {},
              total: 0,
              critical: 0,
              high: 0,
              moderate: 0,
              low: 0
            },
            details: []
          };
          
          // ‡∏ô‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà
          if (auditData.metadata?.vulnerabilities) {
            const vulns = auditData.metadata.vulnerabilities;
            report.summary.critical = vulns.critical || 0;
            report.summary.high = vulns.high || 0;
            report.summary.moderate = vulns.moderate || 0;
            report.summary.low = vulns.low || 0;
            report.summary.total = Object.values(vulns).reduce((a, b) => a + b, 0);
          }
          
          // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà
          if (auditData.advisories) {
            Object.values(auditData.advisories).forEach(advisory => {
              report.details.push({
                title: advisory.title,
                severity: advisory.severity,
                package: advisory.module_name,
                patched_in: advisory.patched_versions,
                recommendation: advisory.recommendation
              });
            });
          }
          
          fs.writeFileSync('.github/security-report.json', JSON.stringify(report, null, 2));
          
          console.log('üîí Security Audit Results:');
          console.log('Total vulnerabilities:', report.summary.total);
          console.log('Critical:', report.summary.critical);
          console.log('High:', report.summary.high);
          console.log('Moderate:', report.summary.moderate);
          console.log('Low:', report.summary.low);
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á
          if (report.summary.critical > 0) {
            console.log('‚ùå CRITICAL vulnerabilities found!');
            process.exit(1);
          } else if (report.summary.high > 5) {
            console.log('‚ö†Ô∏è Too many HIGH severity vulnerabilities');
            process.exit(1);
          } else {
            console.log('‚úÖ Security check passed');
          }
          
        } catch (e) {
          console.log('‚ö†Ô∏è Security audit parse error:', e.message);
        }
        "

    - name: Check for Secrets
      run: |
        echo "üîç Scanning for potential secrets..."
        
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        const secretPatterns = [
          { name: 'API Key', pattern: /api[_-]?key[s]?\s*[:=]\s*['\"][a-zA-Z0-9_-]{20,}['\"]/gi },
          { name: 'Password', pattern: /password\s*[:=]\s*['\"][^'\"]{8,}['\"]/gi },
          { name: 'Token', pattern: /token\s*[:=]\s*['\"][a-zA-Z0-9_-]{20,}['\"]/gi },
          { name: 'Secret', pattern: /secret\s*[:=]\s*['\"][a-zA-Z0-9_-]{20,}['\"]/gi },
          { name: 'Private Key', pattern: /-----BEGIN\s+(RSA\s+)?PRIVATE\s+KEY-----/gi }
        ];
        
        const results = {
          timestamp: new Date().toISOString(),
          files_scanned: 0,
          potential_secrets: []
        };
        
        function scanDirectory(dir) {
          const items = fs.readdirSync(dir);
          
          items.forEach(item => {
            const itemPath = path.join(dir, item);
            const stat = fs.statSync(itemPath);
            
            if (stat.isDirectory()) {
              if (!item.match(/^(node_modules|\.git|build|dist)$/)) {
                scanDirectory(itemPath);
              }
            } else if (item.match(/\.(js|ts|json|md|env|txt)$/)) {
              try {
                const content = fs.readFileSync(itemPath, 'utf8');
                results.files_scanned++;
                
                secretPatterns.forEach(({ name, pattern }) => {
                  const matches = content.match(pattern);
                  if (matches) {
                    matches.forEach(match => {
                      results.potential_secrets.push({
                        file: itemPath,
                        type: name,
                        line: content.substr(0, content.indexOf(match)).split('\n').length,
                        preview: match.substr(0, 50) + '...'
                      });
                    });
                  }
                });
                
              } catch (e) {
                // ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
              }
            }
          });
        }
        
        scanDirectory('.');
        
        fs.writeFileSync('.github/secrets-scan.json', JSON.stringify(results, null, 2));
        
        console.log('üîç Secret Scan Results:');
        console.log('Files scanned:', results.files_scanned);
        console.log('Potential secrets found:', results.potential_secrets.length);
        
        if (results.potential_secrets.length > 0) {
          console.log('‚ö†Ô∏è WARNING: Potential secrets detected!');
          results.potential_secrets.forEach(secret => {
            console.log(\`  - \${secret.type} in \${secret.file}:\${secret.line}\`);
          });
          
          // ‡πÑ‡∏°‡πà fail build ‡πÅ‡∏ï‡πà‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
          console.log('Please review these findings manually.');
        } else {
          console.log('‚úÖ No obvious secrets detected');
        }
        "

  performance-test:
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Performance Benchmark
      run: |
        echo "‚ö° Running performance tests..."
        
        node -e "
        const fs = require('fs');
        const { performance } = require('perf_hooks');
        
        async function performanceTest() {
          const results = {
            timestamp: new Date().toISOString(),
            node_version: process.version,
            tests: []
          };
          
          // Test 1: JSON parsing performance
          console.log('üìä Testing JSON parsing...');
          const jsonStart = performance.now();
          for (let i = 0; i < 10000; i++) {
            JSON.parse('{\"test\": \"value\", \"number\": 123}');
          }
          const jsonTime = performance.now() - jsonStart;
          
          results.tests.push({
            name: 'JSON Parsing (10k iterations)',
            duration_ms: Math.round(jsonTime * 100) / 100,
            status: jsonTime < 100 ? 'pass' : 'warning'
          });
          
          // Test 2: File I/O performance
          console.log('üìÅ Testing file I/O...');
          const fileStart = performance.now();
          
          for (let i = 0; i < 100; i++) {
            const testData = 'test data ' + i.toString().repeat(100);
            fs.writeFileSync(\`temp-test-\${i}.txt\`, testData);
            fs.readFileSync(\`temp-test-\${i}.txt\`, 'utf8');
            fs.unlinkSync(\`temp-test-\${i}.txt\`);
          }
          
          const fileTime = performance.now() - fileStart;
          
          results.tests.push({
            name: 'File I/O (100 files)',
            duration_ms: Math.round(fileTime * 100) / 100,
            status: fileTime < 1000 ? 'pass' : 'warning'
          });
          
          // Test 3: Memory usage
          console.log('üß† Testing memory usage...');
          const memStart = process.memoryUsage();
          
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
          const testArray = [];
          for (let i = 0; i < 100000; i++) {
            testArray.push({ id: i, data: 'test'.repeat(10) });
          }
          
          const memEnd = process.memoryUsage();
          const memDiff = memEnd.heapUsed - memStart.heapUsed;
          
          results.tests.push({
            name: 'Memory Allocation Test',
            memory_used_mb: Math.round(memDiff / 1024 / 1024 * 100) / 100,
            status: memDiff < 50 * 1024 * 1024 ? 'pass' : 'warning' // 50MB threshold
          });
          
          // Test 4: Async performance
          console.log('üîÑ Testing async operations...');
          const asyncStart = performance.now();
          
          const promises = [];
          for (let i = 0; i < 1000; i++) {
            promises.push(new Promise(resolve => {
              setTimeout(() => resolve(i), Math.random() * 10);
            }));
          }
          
          await Promise.all(promises);
          const asyncTime = performance.now() - asyncStart;
          
          results.tests.push({
            name: 'Async Operations (1k promises)',
            duration_ms: Math.round(asyncTime * 100) / 100,
            status: asyncTime < 2000 ? 'pass' : 'warning'
          });
          
          // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
          const totalTests = results.tests.length;
          const passedTests = results.tests.filter(t => t.status === 'pass').length;
          
          results.summary = {
            total_tests: totalTests,
            passed: passedTests,
            failed: totalTests - passedTests,
            score: Math.round((passedTests / totalTests) * 100)
          };
          
          fs.writeFileSync('.github/performance-report.json', JSON.stringify(results, null, 2));
          
          console.log('‚ö° Performance Test Results:');
          console.log('Tests passed:', passedTests + '/' + totalTests);
          console.log('Performance score:', results.summary.score + '%');
          
          results.tests.forEach(test => {
            const icon = test.status === 'pass' ? '‚úÖ' : '‚ö†Ô∏è';
            console.log(\`\${icon} \${test.name}: \${test.duration_ms || test.memory_used_mb}ms\`);
          });
          
          if (results.summary.score < 70) {
            console.log('‚ùå Performance tests failed');
            process.exit(1);
          }
        }
        
        performanceTest().catch(e => {
          console.log('‚ùå Performance test error:', e.message);
          process.exit(1);
        });
        "

    - name: Generate Combined Report
      if: always()
      run: |
        echo "üìã Generating combined security & performance report..."
        
        node -e "
        const fs = require('fs');
        
        const timestamp = new Date().toISOString();
        let report = '# üõ°Ô∏è Security & Performance Report\n\n';
        report += \`**Generated**: \${new Date().toLocaleString('th-TH')}\n\`;
        report += \`**Commit**: ${{ github.sha }}\n\n\`;
        
        // Security Report
        try {
          const security = JSON.parse(fs.readFileSync('.github/security-report.json', 'utf8'));
          
          report += '## üîí Security Audit\n\n';
          report += \`- **Total Vulnerabilities**: \${security.summary.total}\n\`;
          report += \`- **Critical**: \${security.summary.critical} üî¥\n\`;
          report += \`- **High**: \${security.summary.high} üü†\n\`;
          report += \`- **Moderate**: \${security.summary.moderate} üü°\n\`;
          report += \`- **Low**: \${security.summary.low} üü¢\n\n\`;
          
          if (security.details.length > 0) {
            report += '### üö® Vulnerability Details\n\n';
            security.details.slice(0, 5).forEach(vuln => {
              report += \`- **\${vuln.package}**: \${vuln.title} (\${vuln.severity})\n\`;
            });
            
            if (security.details.length > 5) {
              report += \`- ... and \${security.details.length - 5} more\n\`;
            }
            report += '\n';
          }
        } catch (e) {
          report += '## üîí Security Audit\n\n‚ùå Security report not available\n\n';
        }
        
        // Secrets Scan
        try {
          const secrets = JSON.parse(fs.readFileSync('.github/secrets-scan.json', 'utf8'));
          
          report += '## üîç Secrets Scan\n\n';
          report += \`- **Files Scanned**: \${secrets.files_scanned}\n\`;
          report += \`- **Potential Secrets**: \${secrets.potential_secrets.length}\n\n\`;
          
          if (secrets.potential_secrets.length > 0) {
            report += '### ‚ö†Ô∏è Potential Secrets Found\n\n';
            secrets.potential_secrets.forEach(secret => {
              report += \`- **\${secret.type}** in \${secret.file}:\${secret.line}\n\`;
            });
            report += '\n';
          }
        } catch (e) {
          report += '## üîç Secrets Scan\n\n‚ùå Secrets scan not available\n\n';
        }
        
        // Performance Report
        try {
          const perf = JSON.parse(fs.readFileSync('.github/performance-report.json', 'utf8'));
          
          report += '## ‚ö° Performance Test\n\n';
          report += \`- **Overall Score**: \${perf.summary.score}%\n\`;
          report += \`- **Tests Passed**: \${perf.summary.passed}/\${perf.summary.total}\n\n\`;
          
          report += '### üìä Test Results\n\n';
          perf.tests.forEach(test => {
            const icon = test.status === 'pass' ? '‚úÖ' : '‚ö†Ô∏è';
            const metric = test.duration_ms ? test.duration_ms + 'ms' : test.memory_used_mb + 'MB';
            report += \`\${icon} **\${test.name}**: \${metric}\n\`;
          });
          report += '\n';
        } catch (e) {
          report += '## ‚ö° Performance Test\n\n‚ùå Performance report not available\n\n';
        }
        
        // Recommendations
        report += '## üí° Recommendations\n\n';
        report += '- Run security audit regularly\n';
        report += '- Keep dependencies updated\n';
        report += '- Monitor performance metrics\n';
        report += '- Review potential secrets manually\n';
        report += '- Consider implementing automated security policies\n\n';
        
        fs.writeFileSync('.github/combined-report.md', report);
        console.log('üìã Combined report generated');
        "

    - name: Upload Reports
      uses: actions/upload-artifact@v4
      with:
        name: security-performance-reports
        path: |
          .github/*-report.json
          .github/combined-report.md
        retention-days: 30
