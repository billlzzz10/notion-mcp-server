name: Auto Version Update

on:
  push:
    branches: [ main ]
    paths:
      - '**.md'
      - '**.MD'
      - 'README*'
      - 'CHANGELOG*'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      force_update:
        description: 'Force version update'
        required: false
        type: boolean
        default: false

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      should_update: ${{ steps.analysis.outputs.should_update }}
      version_type: ${{ steps.analysis.outputs.version_type }}
      changed_files: ${{ steps.analysis.outputs.changed_files }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Analyze Changes
      id: analysis
      run: |
        echo "🔍 Analyzing documentation changes..."
        
        # ดึงรายการไฟล์ที่เปลี่ยนแปลง
        git diff --name-only HEAD~1 HEAD > changed-files.txt
        
        # กรองเฉพาะไฟล์เอกสาร
        grep -E '\.(md|MD)$|^README|^CHANGELOG|^docs/' changed-files.txt > doc-changes.txt || touch doc-changes.txt
        
        CHANGED_COUNT=$(wc -l < doc-changes.txt)
        SHOULD_UPDATE="false"
        VERSION_TYPE="patch"
        
        echo "📄 Documentation files changed: $CHANGED_COUNT"
        
        if [[ $CHANGED_COUNT -gt 0 ]]; then
          echo "📝 Changed documentation files:"
          cat doc-changes.txt
          
          # วิเคราะห์ประเภทการเปลี่ยนแปลง
          if grep -q "README" doc-changes.txt; then
            echo "📖 README updated - patch version"
            VERSION_TYPE="patch"
            SHOULD_UPDATE="true"
          fi
          
          if grep -q "CHANGELOG" doc-changes.txt; then
            echo "📋 CHANGELOG updated - minor version"
            VERSION_TYPE="minor"
            SHOULD_UPDATE="true"
          fi
          
          # ตรวจสอบไฟล์ใหม่
          NEW_FILES=$(git diff --name-status HEAD~1 HEAD | grep "^A" | grep -E '\.(md|MD)$' | wc -l)
          if [[ $NEW_FILES -gt 0 ]]; then
            echo "➕ New documentation files added: $NEW_FILES"
            VERSION_TYPE="minor"
            SHOULD_UPDATE="true"
          fi
          
          # ตรวจสอบเนื้อหาที่เปลี่ยนแปลง
          MAJOR_KEYWORDS="breaking|major|deprecated|removed|incompatible"
          if git diff HEAD~1 HEAD -- $(cat doc-changes.txt) | grep -iE "$MAJOR_KEYWORDS"; then
            echo "⚠️ Major changes detected in documentation"
            VERSION_TYPE="major"
            SHOULD_UPDATE="true"
          fi
        fi
        
        # Manual override
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          SHOULD_UPDATE="true"
          echo "🔧 Manual trigger - version type: $VERSION_TYPE"
        fi
        
        # Force update override
        if [[ "${{ github.event.inputs.force_update }}" == "true" ]]; then
          SHOULD_UPDATE="true"
          echo "⚡ Force update enabled"
        fi
        
        echo "should_update=$SHOULD_UPDATE" >> $GITHUB_OUTPUT
        echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
        echo "changed_files=$(cat doc-changes.txt | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT
        
        echo "🎯 Result: should_update=$SHOULD_UPDATE, version_type=$VERSION_TYPE"

  update-version:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should_update == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Update Version
      id: version
      run: |
        echo "📦 Updating version..."
        
        VERSION_TYPE="${{ needs.detect-changes.outputs.version_type }}"
        
        # อ่านเวอร์ชั่นปัจจุบัน
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # คำนวณเวอร์ชั่นใหม่
        node -e "
        const fs = require('fs');
        const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        const semver = pkg.version.split('.');
        let [major, minor, patch] = semver.map(Number);
        
        const versionType = '$VERSION_TYPE';
        
        switch(versionType) {
          case 'major':
            major += 1;
            minor = 0;
            patch = 0;
            break;
          case 'minor':
            minor += 1;
            patch = 0;
            break;
          case 'patch':
          default:
            patch += 1;
            break;
        }
        
        const newVersion = \`\${major}.\${minor}.\${patch}\`;
        pkg.version = newVersion;
        
        fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
        
        console.log(\`Updated version from $CURRENT_VERSION to \${newVersion}\`);
        console.log('NEW_VERSION=' + newVersion);
        " > version-update.log
        
        NEW_VERSION=$(grep "NEW_VERSION=" version-update.log | cut -d'=' -f2)
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        cat version-update.log

    - name: Update Documentation Versions
      run: |
        echo "📚 Updating version references in documentation..."
        
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        const newVersion = '$NEW_VERSION';
        
        // ฟังก์ชันอัปเดตไฟล์
        function updateVersionInFile(filePath, patterns) {
          if (!fs.existsSync(filePath)) return;
          
          let content = fs.readFileSync(filePath, 'utf8');
          let updated = false;
          
          patterns.forEach(pattern => {
            const regex = new RegExp(pattern.from, 'g');
            if (regex.test(content)) {
              content = content.replace(regex, pattern.to);
              updated = true;
            }
          });
          
          if (updated) {
            fs.writeFileSync(filePath, content);
            console.log('Updated version references in:', filePath);
          }
        }
        
        // อัปเดต README files
        const readmePatterns = [
          {
            from: 'version.*[0-9]+\\\.[0-9]+\\\.[0-9]+',
            to: \`version \${newVersion}\`
          },
          {
            from: 'v[0-9]+\\\.[0-9]+\\\.[0-9]+',
            to: \`v\${newVersion}\`
          },
          {
            from: '\"version\":\\s*\"[0-9]+\\\.[0-9]+\\\.[0-9]+\"',
            to: \`\"version\": \"\${newVersion}\"\`
          }
        ];
        
        // หาไฟล์ README ทั้งหมด
        ['README.md', 'README-new.md', 'docs/README.md'].forEach(file => {
          updateVersionInFile(file, readmePatterns);
        });
        
        // อัปเดต CHANGELOG ถ้ามี
        if (fs.existsSync('CHANGELOG.md')) {
          const changelogContent = fs.readFileSync('CHANGELOG.md', 'utf8');
          const today = new Date().toISOString().split('T')[0];
          
          const newEntry = '## [' + newVersion + '] - ' + today + '\\n\\n' +
            '### Documentation\\n' +
            '- Updated documentation files\\n' +
            '- Version bump due to documentation changes\\n\\n' +
            changelogContent;
          
          fs.writeFileSync('CHANGELOG.md', newEntry);
          console.log('Updated CHANGELOG.md with version', newVersion);
        }
        
        console.log('Documentation version update completed');
        "

    - name: Create Version Info
      run: |
        echo "📋 Creating version information..."
        
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        CHANGED_FILES="${{ needs.detect-changes.outputs.changed_files }}"
        
        cat > version-info.json << EOF
        {
          "version": "$NEW_VERSION",
          "updated_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "trigger": "${{ github.event_name }}",
          "version_type": "${{ needs.detect-changes.outputs.version_type }}",
          "changed_files": "$CHANGED_FILES",
          "commit": "${{ github.sha }}",
          "actor": "${{ github.actor }}"
        }
        EOF
        
        echo "📊 Version Info:"
        cat version-info.json

    - name: Build with New Version
      run: |
        echo "🔨 Building with new version..."
        npm run build

    - name: Commit Changes
      run: |
        echo "💾 Committing version changes..."
        
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add package.json
        git add README*.md || true
        git add CHANGELOG.md || true
        git add docs/ || true
        git add build/ || true
        git add version-info.json
        
        git commit -m "🔖 Bump version to $NEW_VERSION

        - Updated package.json version
        - Updated documentation references
        - Auto-generated from documentation changes
        
        Changed files: ${{ needs.detect-changes.outputs.changed_files }}
        Version type: ${{ needs.detect-changes.outputs.version_type }}"

    - name: Create Tag
      run: |
        echo "🏷️ Creating version tag..."
        
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        git tag -a "v$NEW_VERSION" -m "Version $NEW_VERSION

        Documentation update release
        
        Changes:
        - ${{ needs.detect-changes.outputs.changed_files }}
        
        Generated automatically from documentation updates."

    - name: Push Changes
      run: |
        echo "🚀 Pushing changes and tags..."
        
        git push origin main
        git push origin --tags

    - name: Generate Release Notes
      run: |
        echo "📝 Generating release notes..."
        
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        CHANGED_FILES="${{ needs.detect-changes.outputs.changed_files }}"
        
        cat > release-notes.md << EOF
        # 📚 Documentation Update Release v$NEW_VERSION
        
        This release includes documentation updates and improvements.
        
        ## 📄 Changed Files
        $(echo "$CHANGED_FILES" | tr ',' '\n' | sed 's/^/- /')
        
        ## 🔄 Version Information
        - **Previous Version**: Auto-detected from git history
        - **New Version**: $NEW_VERSION
        - **Version Type**: ${{ needs.detect-changes.outputs.version_type }}
        - **Trigger**: ${{ github.event_name }}
        - **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## 📋 Details
        This version was automatically generated due to documentation changes. The version bump follows semantic versioning principles based on the type of documentation changes detected.
        
        ### Automatic Version Rules:
        - **Patch** (x.x.+1): README updates, minor documentation fixes
        - **Minor** (x.+1.0): New documentation files, CHANGELOG updates
        - **Major** (+1.0.0): Breaking changes, deprecation notices
        
        ## 🔗 Links
        - [Full Changelog](https://github.com/${{ github.repository }}/compare/v$NEW_VERSION...HEAD)
        - [Documentation](https://github.com/${{ github.repository }}/tree/v$NEW_VERSION/docs)
        EOF
        
        echo "📋 Release notes generated:"
        cat release-notes.md

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: version-update-${{ steps.version.outputs.new_version }}
        path: |
          version-info.json
          release-notes.md
        retention-days: 30

  notify-update:
    runs-on: ubuntu-latest
    needs: [detect-changes, update-version]
    if: always() && needs.update-version.result == 'success'
    
    steps:
    - name: Generate Update Summary
      run: |
        echo "📊 Generating update summary..."
        
        cat > update-summary.md << EOF
        # 🔖 Version Update Summary
        
        **New Version**: ${{ needs.update-version.outputs.new_version }}
        **Version Type**: ${{ needs.detect-changes.outputs.version_type }}
        **Trigger**: ${{ github.event_name }}
        **Actor**: ${{ github.actor }}
        **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## 📄 Documentation Changes
        Files that triggered this update:
        $(echo "${{ needs.detect-changes.outputs.changed_files }}" | tr ',' '\n' | sed 's/^/- /')
        
        ## 🚀 Actions Taken
        - ✅ Version bumped in package.json
        - ✅ Documentation references updated
        - ✅ Git tag created
        - ✅ Changes committed and pushed
        - ✅ Build artifacts generated
        
        ## 🔗 Links
        - [Commit Details](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
        - [GitHub Actions Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        - [New Tag](${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.update-version.outputs.new_version }})
        EOF
        
        echo "📋 Update summary:"
        cat update-summary.md
        
    - name: Upload Summary
      uses: actions/upload-artifact@v4
      with:
        name: version-update-summary
        path: update-summary.md
