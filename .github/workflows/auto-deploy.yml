name: Auto Deploy & Release Manager

on:
  push:
    tags:
      - 'v*'
    branches: [ main ]
    paths:
      - 'src/**'
      - 'server/**'
      - 'package.json'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment (skip checks)'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20.x'
  DOCKER_REGISTRY: 'ghcr.io'

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.checks.outputs.should_deploy }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine Version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:7}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📦 Version: $VERSION"

    - name: Determine Environment
      id: env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          ENV="${{ github.event.inputs.environment }}"
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          ENV="production"
        else
          ENV="staging"
        fi
        echo "environment=$ENV" >> $GITHUB_OUTPUT
        echo "🌍 Environment: $ENV"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Pre-deployment Checks
      id: checks
      run: |
        echo "🔍 Running pre-deployment checks..."
        
        SHOULD_DEPLOY="true"
        ISSUES=()
        
        # ตรวจสอบ package.json
        if ! node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"; then
          ISSUES+=("Invalid package.json")
          SHOULD_DEPLOY="false"
        fi
        
        # ตรวจสอบไฟล์สำคัญ
        REQUIRED_FILES=("server/index.js" "src/index.js" "README.md")
        for file in "${REQUIRED_FILES[@]}"; do
          if [[ ! -f "$file" ]]; then
            ISSUES+=("Missing required file: $file")
            SHOULD_DEPLOY="false"
          fi
        done
        
        # ตรวจสอบ environment variables
        if [[ "${{ steps.env.outputs.environment }}" == "production" ]]; then
          echo "🔒 Production deployment - running strict checks..."
          
          # ต้องมี tag
          if [[ $GITHUB_REF != refs/tags/* ]]; then
            ISSUES+=("Production deployment requires a tag")
            SHOULD_DEPLOY="false"
          fi
        fi
        
        # Force deploy override
        if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
          echo "⚠️ Force deployment enabled - skipping checks"
          SHOULD_DEPLOY="true"
          ISSUES=()
        fi
        
        echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
        
        if [[ "$SHOULD_DEPLOY" == "false" ]]; then
          echo "❌ Pre-deployment checks failed:"
          printf '%s\n' "${ISSUES[@]}"
          exit 1
        else
          echo "✅ Pre-deployment checks passed"
        fi

  build-and-test:
    runs-on: ubuntu-latest
    needs: prepare-release
    if: needs.prepare-release.outputs.should_deploy == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: |
        echo "🔨 Building application..."
        
        # สร้าง build directory
        mkdir -p build
        
        # คัดลอกไฟล์สำคัญ
        cp -r src/* build/ 2>/dev/null || true
        cp -r server build/ 2>/dev/null || true
        cp package.json build/
        cp README.md build/ 2>/dev/null || true
        
        # สร้าง build info
        cat > build/build-info.json << EOF
        {
          "version": "${{ needs.prepare-release.outputs.version }}",
          "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "commit": "${{ github.sha }}",
          "environment": "${{ needs.prepare-release.outputs.environment }}",
          "node_version": "${{ env.NODE_VERSION }}"
        }
        EOF
        
        echo "✅ Build completed"

    - name: Run Tests
      run: |
        echo "🧪 Running application tests..."
        
        # Basic validation tests
        node -e "
        const fs = require('fs');
        
        console.log('📋 Running validation tests...');
        
        let errors = 0;
        
        // Test 1: Package.json validity
        try {
          const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
          console.log('✅ package.json is valid');
          
          if (!pkg.name || !pkg.version) {
            console.log('❌ package.json missing name or version');
            errors++;
          }
        } catch (e) {
          console.log('❌ package.json is invalid:', e.message);
          errors++;
        }
        
        // Test 2: Build files exist
        if (fs.existsSync('build/build-info.json')) {
          console.log('✅ Build info created');
        } else {
          console.log('❌ Build info missing');
          errors++;
        }
        
        // Test 3: Required files
        const requiredFiles = ['build/index.js', 'build/server'];
        requiredFiles.forEach(file => {
          if (fs.existsSync(file)) {
            console.log(\`✅ \${file} exists\`);
          } else {
            console.log(\`⚠️ \${file} not found (may be optional)\`);
          }
        });
        
        console.log(\`🎯 Test summary: \${errors} errors found\`);
        
        if (errors > 0) {
          console.log('❌ Tests failed');
          process.exit(1);
        } else {
          console.log('✅ All tests passed');
        }
        "

    - name: Build Docker Image
      if: needs.prepare-release.outputs.environment == 'production'
      run: |
        echo "🐳 Building Docker image..."
        
        # สร้าง Dockerfile หากไม่มี
        if [[ ! -f Dockerfile ]]; then
          cat > Dockerfile << 'EOF'
        FROM node:20-alpine
        
        WORKDIR /app
        
        # Copy package files
        COPY package*.json ./
        
        # Install dependencies
        RUN npm ci --only=production
        
        # Copy application
        COPY build/ ./
        
        # Expose port
        EXPOSE 3000
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
          CMD node -e "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"
        
        # Start application
        CMD ["node", "index.js"]
        EOF
        fi
        
        # Build image
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:${{ needs.prepare-release.outputs.version }} .
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:latest .
        
        echo "✅ Docker image built"

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ needs.prepare-release.outputs.version }}
        path: build/
        retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    if: needs.prepare-release.outputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-${{ needs.prepare-release.outputs.version }}
        path: build/

    - name: Deploy to Staging
      run: |
        echo "🚀 Deploying to staging environment..."
        
        # สำหรับ demo - สามารถแทนที่ด้วย deployment script จริง
        echo "📦 Version: ${{ needs.prepare-release.outputs.version }}"
        echo "🌍 Environment: staging"
        echo "📅 Deploy time: $(date)"
        
        # สร้าง deployment manifest
        cat > deployment-manifest.json << EOF
        {
          "version": "${{ needs.prepare-release.outputs.version }}",
          "environment": "staging",
          "deployed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "deployed_by": "${{ github.actor }}",
          "commit": "${{ github.sha }}",
          "status": "deployed"
        }
        EOF
        
        echo "✅ Staging deployment completed"

    - name: Run Smoke Tests
      run: |
        echo "💨 Running smoke tests..."
        
        # Basic smoke tests
        node -e "
        console.log('🧪 Running smoke tests for staging...');
        
        // Simulate health check
        setTimeout(() => {
          console.log('✅ Health check: OK');
          console.log('✅ Basic functionality: OK');
          console.log('✅ Smoke tests passed');
        }, 1000);
        "

  deploy-production:
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    if: needs.prepare-release.outputs.environment == 'production'
    environment: production
    
    steps:
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-${{ needs.prepare-release.outputs.version }}
        path: build/

    - name: Deploy to Production
      run: |
        echo "🚀 Deploying to production environment..."
        
        echo "📦 Version: ${{ needs.prepare-release.outputs.version }}"
        echo "🌍 Environment: production"
        echo "📅 Deploy time: $(date)"
        
        # Production deployment (replace with actual deployment)
        cat > deployment-manifest.json << EOF
        {
          "version": "${{ needs.prepare-release.outputs.version }}",
          "environment": "production",
          "deployed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "deployed_by": "${{ github.actor }}",
          "commit": "${{ github.sha }}",
          "status": "deployed"
        }
        EOF
        
        echo "✅ Production deployment completed"

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.prepare-release.outputs.version }}
        release_name: Release ${{ needs.prepare-release.outputs.version }}
        body: |
          ## 🚀 Release ${{ needs.prepare-release.outputs.version }}
          
          **Deployed**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit**: ${{ github.sha }}
          **Environment**: Production
          
          ### 📝 Changes
          - Automated release from GitHub Actions
          - Build and deployment validation passed
          
          ### 🔗 Links
          - [Commit Details](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
          - [GitHub Actions Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        draft: false
        prerelease: false

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [prepare-release, deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')
    
    steps:
    - name: Generate Deployment Report
      run: |
        echo "📋 Generating deployment report..."
        
        STATUS="success"
        if [[ "${{ needs.deploy-staging.result }}" == "failure" ]] || [[ "${{ needs.deploy-production.result }}" == "failure" ]]; then
          STATUS="failure"
        fi
        
        cat > deployment-report.md << EOF
        # 🚀 Deployment Report
        
        **Version**: ${{ needs.prepare-release.outputs.version }}
        **Environment**: ${{ needs.prepare-release.outputs.environment }}
        **Status**: ${STATUS}
        **Deployed by**: ${{ github.actor }}
        **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## 📊 Results
        - **Staging**: ${{ needs.deploy-staging.result || 'skipped' }}
        - **Production**: ${{ needs.deploy-production.result || 'skipped' }}
        
        ## 🔗 Links
        - [GitHub Actions Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        - [Commit Details](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
        EOF
        
        echo "✅ Deployment report generated"
        cat deployment-report.md

    - name: Upload Deployment Report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report-${{ needs.prepare-release.outputs.version }}
        path: deployment-report.md
